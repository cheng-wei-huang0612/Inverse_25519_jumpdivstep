
# qhasm: int64 input_x0

# qhasm: int64 input_x1

# qhasm: int64 input_x2

# qhasm: int64 input_x3

# qhasm: int64 input_x4

# qhasm: int64 input_x5

# qhasm: int64 input_x6

# qhasm: int64 input_x7

# qhasm: int64 output_x0

# qhasm: int64 calleesaved_x18

# qhasm: int64 calleesaved_x19

# qhasm: int64 calleesaved_x20

# qhasm: int64 calleesaved_x21

# qhasm: int64 calleesaved_x22

# qhasm: int64 calleesaved_x23

# qhasm: int64 calleesaved_x24

# qhasm: int64 calleesaved_x25

# qhasm: int64 calleesaved_x26

# qhasm: int64 calleesaved_x27

# qhasm: int64 calleesaved_x28

# qhasm: int64 calleesaved_x29

# qhasm: reg128 input_v0

# qhasm: reg128 input_v1

# qhasm: reg128 input_v2

# qhasm: reg128 input_v3

# qhasm: reg128 input_v4

# qhasm: reg128 input_v5

# qhasm: reg128 input_v6

# qhasm: reg128 input_v7

# qhasm: reg128 output_v0

# qhasm: reg128 calleesaved_v8

# qhasm: reg128 calleesaved_v9

# qhasm: reg128 calleesaved_v10

# qhasm: reg128 calleesaved_v11

# qhasm: reg128 calleesaved_v12

# qhasm: reg128 calleesaved_v13

# qhasm: reg128 calleesaved_v14

# qhasm: reg128 calleesaved_v15

# qhasm: int64 pointerR

# qhasm: int64 pointerS

# qhasm: int64 pointerF

# qhasm: int64 pointerG

# qhasm: int64 pointeru

# qhasm: int64 pointerv

# qhasm: int64 pointerr

# qhasm: int64 pointers

# qhasm: input pointerR

# qhasm: input pointerS

# qhasm: input pointerF

# qhasm: input pointerG

# qhasm: input pointeru

# qhasm: input pointerv

# qhasm: input pointerr

# qhasm: input pointers

# qhasm: int64 u0u1

# qhasm: int64 u0

# qhasm: int64 u1

# qhasm: int64 v0v1

# qhasm: int64 v0

# qhasm: int64 v1

# qhasm: int64 r0r1

# qhasm: int64 r0

# qhasm: int64 r1

# qhasm: int64 s0s1

# qhasm: int64 s0

# qhasm: int64 s1

# qhasm: int64 F0F1

# qhasm: int64 F2F3

# qhasm: int64 F4F5

# qhasm: int64 F6F7

# qhasm: int64 F8

# qhasm: int64 G0G1

# qhasm: int64 G2G3

# qhasm: int64 G4G5

# qhasm: int64 G6G7

# qhasm: int64 G8

# qhasm: reg128 vec_F0_F1_G0_G1 

# qhasm: reg128 vec_F2_F3_G2_G3 

# qhasm: reg128 vec_F4_F5_G4_G5 

# qhasm: reg128 vec_F6_F7_G6_G7 

# qhasm: reg128 vec_F8_0_G8_0

# qhasm: reg128 vec_u0_r0_v0_s0

# qhasm: int64 u0r0

# qhasm: int64 v0s0

# qhasm: reg128 vec_u1_r1_v1_s1

# qhasm: int64 u1r1

# qhasm: int64 v1s1

# qhasm: reg128 vec_tmp0

# qhasm: reg128 vec_MASK2p30m1

# qhasm: reg128 vec_MASK2p32m1

# qhasm: reg128 vec_R0_0_S0_0

# qhasm: reg128 vec_R1_0_S1_0

# qhasm: reg128 vec_R2_0_S2_0

# qhasm: reg128 vec_R3_0_S3_0

# qhasm: reg128 vec_R4_0_S4_0

# qhasm: reg128 vec_R5_0_S5_0

# qhasm: reg128 vec_R6_0_S6_0

# qhasm: reg128 vec_R7_0_S7_0

# qhasm: reg128 vec_R8_0_S8_0

# qhasm: reg128 vec_R9_0_S9_0

# qhasm: reg128 vec_R10_0_S10_0

# qhasm: reg128 vec_R0_R1_S0_S1

# qhasm: reg128 vec_R2_R3_S2_S3

# qhasm: reg128 vec_R4_R5_S4_S5

# qhasm: reg128 vec_R6_R7_S6_S7

# qhasm: reg128 vec_R8_R9_S8_S9

# qhasm: int64 R0R1

# qhasm: int64 R2R3

# qhasm: int64 R4R5

# qhasm: int64 R6R7

# qhasm: int64 R8R9

# qhasm: int64 R0

# qhasm: int64 R1

# qhasm: int64 R2

# qhasm: int64 R3

# qhasm: int64 R4

# qhasm: int64 R5

# qhasm: int64 R6

# qhasm: int64 R7

# qhasm: int64 R8

# qhasm: int64 R9

# qhasm: int64 S0S1

# qhasm: int64 S2S3

# qhasm: int64 S4S5

# qhasm: int64 S6S7

# qhasm: int64 S8S9

# qhasm: int64 S0

# qhasm: int64 S1

# qhasm: int64 S2

# qhasm: int64 S3

# qhasm: int64 S4

# qhasm: int64 S5

# qhasm: int64 S6

# qhasm: int64 S7

# qhasm: int64 S8

# qhasm: int64 S9

# qhasm: int64 R10

# qhasm: int64 S10

# qhasm: int64 carry1

# qhasm: int64 ONE

# qhasm: reg128 vec_MASKcarry1

# qhasm: reg128 vec_MASKcarry2

# qhasm: reg128 vec_MASKcarry

# qhasm: reg128 vec_MASKeffect

# qhasm: reg128 vec_ONE

# qhasm: reg128 vec_MASKhalfeffect

# qhasm: reg128 vec_uhat_rhat_vhat_shat

# qhasm: reg128 vec_uhat_rhat

# qhasm: reg128 vec_vhat_shat

# qhasm: reg128 vec_tmp1

# qhasm: reg128 vec_tmp2

# qhasm: reg128 vec_tmp3

# qhasm: reg128 vec_tmp4

# qhasm: reg128 vec_tmp5

# qhasm: reg128 vec_carry1

# qhasm: reg128 vec_carry2

# qhasm: reg128 vec_Fhat_0_Ghat_0

# qhasm: reg128 vec_Fhat

# qhasm: reg128 vec_Ghat

# qhasm: int64 debug0

# qhasm: int64 debug1

# qhasm: int64 debug2

# qhasm: int64 debug3

# qhasm: enter linear_comb
.align 4
.global _linear_comb
.global linear_comb
_linear_comb:
linear_comb:

# qhasm: u0u1 = mem64[pointeru]
# asm 1: ldr >u0u1=int64#5,[<pointeru=int64#5]
# asm 2: ldr >u0u1=x4,[<pointeru=x4]
ldr x4,[x4]

# qhasm: u0 = u0u1 & ((1 << 30)-1)
# asm 1: ubfx >u0=int64#9,<u0u1=int64#5, #0, #30
# asm 2: ubfx >u0=x8,<u0u1=x4, #0, #30
ubfx x8,x4, #0, #30

# qhasm: u1 = (u0u1 >> 30) & ((1 << 32)-1)
# asm 1: ubfx >u1=int64#5,<u0u1=int64#5, #30, #32
# asm 2: ubfx >u1=x4,<u0u1=x4, #30, #32
ubfx x4,x4, #30, #32

# qhasm: v0v1 = mem64[pointerv]
# asm 1: ldr >v0v1=int64#6,[<pointerv=int64#6]
# asm 2: ldr >v0v1=x5,[<pointerv=x5]
ldr x5,[x5]

# qhasm: v0 = v0v1 & ((1 << 30)-1)
# asm 1: ubfx >v0=int64#10,<v0v1=int64#6, #0, #30
# asm 2: ubfx >v0=x9,<v0v1=x5, #0, #30
ubfx x9,x5, #0, #30

# qhasm: v1 = (v0v1 >> 30) & ((1 << 32)-1)
# asm 1: ubfx >v1=int64#6,<v0v1=int64#6, #30, #32
# asm 2: ubfx >v1=x5,<v0v1=x5, #30, #32
ubfx x5,x5, #30, #32

# qhasm: r0r1 = mem64[pointerr]
# asm 1: ldr >r0r1=int64#7,[<pointerr=int64#7]
# asm 2: ldr >r0r1=x6,[<pointerr=x6]
ldr x6,[x6]

# qhasm: r0 = r0r1 & ((1 << 30)-1)
# asm 1: ubfx >r0=int64#11,<r0r1=int64#7, #0, #30
# asm 2: ubfx >r0=x10,<r0r1=x6, #0, #30
ubfx x10,x6, #0, #30

# qhasm: r1 = (r0r1 >> 30) & ((1 << 32)-1)
# asm 1: ubfx >r1=int64#7,<r0r1=int64#7, #30, #32
# asm 2: ubfx >r1=x6,<r0r1=x6, #30, #32
ubfx x6,x6, #30, #32

# qhasm: s0s1 = mem64[pointers]
# asm 1: ldr >s0s1=int64#8,[<pointers=int64#8]
# asm 2: ldr >s0s1=x7,[<pointers=x7]
ldr x7,[x7]

# qhasm: s0 = s0s1 & ((1 << 30)-1)
# asm 1: ubfx >s0=int64#12,<s0s1=int64#8, #0, #30
# asm 2: ubfx >s0=x11,<s0s1=x7, #0, #30
ubfx x11,x7, #0, #30

# qhasm: s1 = (s0s1 >> 30) & ((1 << 32)-1)
# asm 1: ubfx >s1=int64#8,<s0s1=int64#8, #30, #32
# asm 2: ubfx >s1=x7,<s0s1=x7, #30, #32
ubfx x7,x7, #30, #32

# qhasm: F0F1, F2F3 = mem128[pointerF]
# asm 1: ldp >F0F1=int64#13, >F2F3=int64#14, [<pointerF=int64#3]
# asm 2: ldp >F0F1=x12, >F2F3=x13, [<pointerF=x2]
ldp x12, x13, [x2]

# qhasm: F4F5, F6F7 = mem128[pointerF+16]
# asm 1: ldp >F4F5=int64#15, >F6F7=int64#16, [<pointerF=int64#3,#16]
# asm 2: ldp >F4F5=x14, >F6F7=x15, [<pointerF=x2,#16]
ldp x14, x15, [x2,#16]

# qhasm: F8 = mem64[pointerF+32]
# asm 1: ldr >F8=int64#3,[<pointerF=int64#3,#32]
# asm 2: ldr >F8=x2,[<pointerF=x2,#32]
ldr x2,[x2,#32]

# qhasm: G0G1, G2G3 = mem128[pointerG]
# asm 1: ldp >G0G1=int64#17, >G2G3=int64#18, [<pointerG=int64#4]
# asm 2: ldp >G0G1=x16, >G2G3=x17, [<pointerG=x3]
ldp x16, x17, [x3]

# qhasm: G4G5, G6G7 = mem128[pointerG+16]
# asm 1: ldp >G4G5=int64#19, >G6G7=int64#20, [<pointerG=int64#4,#16]
# asm 2: ldp >G4G5=x18, >G6G7=x19, [<pointerG=x3,#16]
ldp x18, x19, [x3,#16]

# qhasm: G8 = mem64[pointerG+32]
# asm 1: ldr >G8=int64#4,[<pointerG=int64#4,#32]
# asm 2: ldr >G8=x3,[<pointerG=x3,#32]
ldr x3,[x3,#32]

# qhasm: vec_F0_F1_G0_G1[0/2] = F0F1 
# asm 1: ins <vec_F0_F1_G0_G1=reg128#1.d[0],<F0F1=int64#13
# asm 2: ins <vec_F0_F1_G0_G1=v0.d[0],<F0F1=x12
ins v0.d[0],x12

# qhasm: vec_F0_F1_G0_G1[1/2] = G0G1 
# asm 1: ins <vec_F0_F1_G0_G1=reg128#1.d[1],<G0G1=int64#17
# asm 2: ins <vec_F0_F1_G0_G1=v0.d[1],<G0G1=x16
ins v0.d[1],x16

# qhasm: vec_F2_F3_G2_G3[0/2] = F2F3 
# asm 1: ins <vec_F2_F3_G2_G3=reg128#2.d[0],<F2F3=int64#14
# asm 2: ins <vec_F2_F3_G2_G3=v1.d[0],<F2F3=x13
ins v1.d[0],x13

# qhasm: vec_F2_F3_G2_G3[1/2] = G2G3 
# asm 1: ins <vec_F2_F3_G2_G3=reg128#2.d[1],<G2G3=int64#18
# asm 2: ins <vec_F2_F3_G2_G3=v1.d[1],<G2G3=x17
ins v1.d[1],x17

# qhasm: vec_F4_F5_G4_G5[0/2] = F4F5 
# asm 1: ins <vec_F4_F5_G4_G5=reg128#3.d[0],<F4F5=int64#15
# asm 2: ins <vec_F4_F5_G4_G5=v2.d[0],<F4F5=x14
ins v2.d[0],x14

# qhasm: vec_F4_F5_G4_G5[1/2] = G4G5 
# asm 1: ins <vec_F4_F5_G4_G5=reg128#3.d[1],<G4G5=int64#19
# asm 2: ins <vec_F4_F5_G4_G5=v2.d[1],<G4G5=x18
ins v2.d[1],x18

# qhasm: vec_F6_F7_G6_G7[0/2] = F6F7 
# asm 1: ins <vec_F6_F7_G6_G7=reg128#4.d[0],<F6F7=int64#16
# asm 2: ins <vec_F6_F7_G6_G7=v3.d[0],<F6F7=x15
ins v3.d[0],x15

# qhasm: vec_F6_F7_G6_G7[1/2] = G6G7 
# asm 1: ins <vec_F6_F7_G6_G7=reg128#4.d[1],<G6G7=int64#20
# asm 2: ins <vec_F6_F7_G6_G7=v3.d[1],<G6G7=x19
ins v3.d[1],x19

# qhasm: vec_F8_0_G8_0[0/2] = F8 
# asm 1: ins <vec_F8_0_G8_0=reg128#5.d[0],<F8=int64#3
# asm 2: ins <vec_F8_0_G8_0=v4.d[0],<F8=x2
ins v4.d[0],x2

# qhasm: vec_F8_0_G8_0[1/2] = G8 
# asm 1: ins <vec_F8_0_G8_0=reg128#5.d[1],<G8=int64#4
# asm 2: ins <vec_F8_0_G8_0=v4.d[1],<G8=x3
ins v4.d[1],x3

# qhasm: r0 = r0 << 32
# asm 1: lsl >r0=int64#3,<r0=int64#11,#32
# asm 2: lsl >r0=x2,<r0=x10,#32
lsl x2,x10,#32

# qhasm: u0r0 = u0 | r0
# asm 1: orr >u0r0=int64#3, <u0=int64#9, <r0=int64#3
# asm 2: orr >u0r0=x2, <u0=x8, <r0=x2
orr x2, x8, x2

# qhasm: vec_u0_r0_v0_s0[0/2] = u0r0
# asm 1: ins <vec_u0_r0_v0_s0=reg128#6.d[0],<u0r0=int64#3
# asm 2: ins <vec_u0_r0_v0_s0=v5.d[0],<u0r0=x2
ins v5.d[0],x2

# qhasm: s0 = s0 << 32
# asm 1: lsl >s0=int64#3,<s0=int64#12,#32
# asm 2: lsl >s0=x2,<s0=x11,#32
lsl x2,x11,#32

# qhasm: v0s0 = v0 | s0
# asm 1: orr >v0s0=int64#3, <v0=int64#10, <s0=int64#3
# asm 2: orr >v0s0=x2, <v0=x9, <s0=x2
orr x2, x9, x2

# qhasm: vec_u0_r0_v0_s0[1/2] = v0s0
# asm 1: ins <vec_u0_r0_v0_s0=reg128#6.d[1],<v0s0=int64#3
# asm 2: ins <vec_u0_r0_v0_s0=v5.d[1],<v0s0=x2
ins v5.d[1],x2

# qhasm: r1 = r1 << 32
# asm 1: lsl >r1=int64#3,<r1=int64#7,#32
# asm 2: lsl >r1=x2,<r1=x6,#32
lsl x2,x6,#32

# qhasm: u1r1 = u1 | r1
# asm 1: orr >u1r1=int64#3, <u1=int64#5, <r1=int64#3
# asm 2: orr >u1r1=x2, <u1=x4, <r1=x2
orr x2, x4, x2

# qhasm: vec_u1_r1_v1_s1[0/2] = u1r1
# asm 1: ins <vec_u1_r1_v1_s1=reg128#7.d[0],<u1r1=int64#3
# asm 2: ins <vec_u1_r1_v1_s1=v6.d[0],<u1r1=x2
ins v6.d[0],x2

# qhasm: s1 = s1 << 32
# asm 1: lsl >s1=int64#3,<s1=int64#8,#32
# asm 2: lsl >s1=x2,<s1=x7,#32
lsl x2,x7,#32

# qhasm: v1s1 = v1 | s1
# asm 1: orr >v1s1=int64#3, <v1=int64#6, <s1=int64#3
# asm 2: orr >v1s1=x2, <v1=x5, <s1=x2
orr x2, x5, x2

# qhasm: vec_u1_r1_v1_s1[1/2] = v1s1
# asm 1: ins <vec_u1_r1_v1_s1=reg128#7.d[1],<v1s1=int64#3
# asm 2: ins <vec_u1_r1_v1_s1=v6.d[1],<v1s1=x2
ins v6.d[1],x2

# qhasm: vec_tmp0 = vec_tmp0 ^ vec_tmp0
# asm 1: eor >vec_tmp0=reg128#8.16b,<vec_tmp0=reg128#8.16b,<vec_tmp0=reg128#8.16b
# asm 2: eor >vec_tmp0=v7.16b,<vec_tmp0=v7.16b,<vec_tmp0=v7.16b
eor v7.16b,v7.16b,v7.16b

# qhasm: 2x vec_MASK2p32m1 = 0xFFFFFFFF
# asm 1: movi >vec_MASK2p32m1=reg128#9.2d, #0xFFFFFFFF
# asm 2: movi >vec_MASK2p32m1=v8.2d, #0xFFFFFFFF
movi v8.2d, #0xFFFFFFFF

# qhasm: 2x vec_MASK2p30m1 = vec_MASK2p32m1 unsigned>> 2
# asm 1: ushr >vec_MASK2p30m1=reg128#9.2d,<vec_MASK2p32m1=reg128#9.2d,#2
# asm 2: ushr >vec_MASK2p30m1=v8.2d,<vec_MASK2p32m1=v8.2d,#2
ushr v8.2d,v8.2d,#2

# qhasm: 2x vec_tmp0 += vec_u0_r0_v0_s0[0] unsigned* vec_F0_F1_G0_G1[0/4]
# asm 1: umlal <vec_tmp0=reg128#8.2d,<vec_u0_r0_v0_s0=reg128#6.2s,<vec_F0_F1_G0_G1=reg128#1.s[0]
# asm 2: umlal <vec_tmp0=v7.2d,<vec_u0_r0_v0_s0=v5.2s,<vec_F0_F1_G0_G1=v0.s[0]
umlal v7.2d,v5.2s,v0.s[0]

# qhasm: 2x vec_tmp0 += vec_u0_r0_v0_s0[1] unsigned* vec_F0_F1_G0_G1[2/4]
# asm 1: umlal2 <vec_tmp0=reg128#8.2d,<vec_u0_r0_v0_s0=reg128#6.4s,<vec_F0_F1_G0_G1=reg128#1.s[2]
# asm 2: umlal2 <vec_tmp0=v7.2d,<vec_u0_r0_v0_s0=v5.4s,<vec_F0_F1_G0_G1=v0.s[2]
umlal2 v7.2d,v5.4s,v0.s[2]

# qhasm: vec_R0_0_S0_0 = vec_tmp0 & vec_MASK2p30m1
# asm 1: and >vec_R0_0_S0_0=reg128#10.16b,<vec_tmp0=reg128#8.16b,<vec_MASK2p30m1=reg128#9.16b
# asm 2: and >vec_R0_0_S0_0=v9.16b,<vec_tmp0=v7.16b,<vec_MASK2p30m1=v8.16b
and v9.16b,v7.16b,v8.16b

# qhasm: 2x vec_tmp0 unsigned>>= 30
# asm 1: ushr >vec_tmp0=reg128#8.2d,<vec_tmp0=reg128#8.2d,#30
# asm 2: ushr >vec_tmp0=v7.2d,<vec_tmp0=v7.2d,#30
ushr v7.2d,v7.2d,#30

# qhasm: 2x vec_tmp0 += vec_u0_r0_v0_s0[0] unsigned* vec_F0_F1_G0_G1[1/4]
# asm 1: umlal <vec_tmp0=reg128#8.2d,<vec_u0_r0_v0_s0=reg128#6.2s,<vec_F0_F1_G0_G1=reg128#1.s[1]
# asm 2: umlal <vec_tmp0=v7.2d,<vec_u0_r0_v0_s0=v5.2s,<vec_F0_F1_G0_G1=v0.s[1]
umlal v7.2d,v5.2s,v0.s[1]

# qhasm: 2x vec_tmp0 += vec_u0_r0_v0_s0[1] unsigned* vec_F0_F1_G0_G1[3/4]
# asm 1: umlal2 <vec_tmp0=reg128#8.2d,<vec_u0_r0_v0_s0=reg128#6.4s,<vec_F0_F1_G0_G1=reg128#1.s[3]
# asm 2: umlal2 <vec_tmp0=v7.2d,<vec_u0_r0_v0_s0=v5.4s,<vec_F0_F1_G0_G1=v0.s[3]
umlal2 v7.2d,v5.4s,v0.s[3]

# qhasm: 2x vec_tmp0 += vec_u1_r1_v1_s1[0] unsigned* vec_F0_F1_G0_G1[0/4]
# asm 1: umlal <vec_tmp0=reg128#8.2d,<vec_u1_r1_v1_s1=reg128#7.2s,<vec_F0_F1_G0_G1=reg128#1.s[0]
# asm 2: umlal <vec_tmp0=v7.2d,<vec_u1_r1_v1_s1=v6.2s,<vec_F0_F1_G0_G1=v0.s[0]
umlal v7.2d,v6.2s,v0.s[0]

# qhasm: 2x vec_tmp0 += vec_u1_r1_v1_s1[1] unsigned* vec_F0_F1_G0_G1[2/4]
# asm 1: umlal2 <vec_tmp0=reg128#8.2d,<vec_u1_r1_v1_s1=reg128#7.4s,<vec_F0_F1_G0_G1=reg128#1.s[2]
# asm 2: umlal2 <vec_tmp0=v7.2d,<vec_u1_r1_v1_s1=v6.4s,<vec_F0_F1_G0_G1=v0.s[2]
umlal2 v7.2d,v6.4s,v0.s[2]

# qhasm: vec_R1_0_S1_0 = vec_tmp0 & vec_MASK2p30m1
# asm 1: and >vec_R1_0_S1_0=reg128#11.16b,<vec_tmp0=reg128#8.16b,<vec_MASK2p30m1=reg128#9.16b
# asm 2: and >vec_R1_0_S1_0=v10.16b,<vec_tmp0=v7.16b,<vec_MASK2p30m1=v8.16b
and v10.16b,v7.16b,v8.16b

# qhasm: 2x vec_tmp0 unsigned>>= 30
# asm 1: ushr >vec_tmp0=reg128#8.2d,<vec_tmp0=reg128#8.2d,#30
# asm 2: ushr >vec_tmp0=v7.2d,<vec_tmp0=v7.2d,#30
ushr v7.2d,v7.2d,#30

# qhasm: 2x vec_tmp0 += vec_u0_r0_v0_s0[0] unsigned* vec_F2_F3_G2_G3[0/4]
# asm 1: umlal <vec_tmp0=reg128#8.2d,<vec_u0_r0_v0_s0=reg128#6.2s,<vec_F2_F3_G2_G3=reg128#2.s[0]
# asm 2: umlal <vec_tmp0=v7.2d,<vec_u0_r0_v0_s0=v5.2s,<vec_F2_F3_G2_G3=v1.s[0]
umlal v7.2d,v5.2s,v1.s[0]

# qhasm: 2x vec_tmp0 += vec_u0_r0_v0_s0[1] unsigned* vec_F2_F3_G2_G3[2/4]
# asm 1: umlal2 <vec_tmp0=reg128#8.2d,<vec_u0_r0_v0_s0=reg128#6.4s,<vec_F2_F3_G2_G3=reg128#2.s[2]
# asm 2: umlal2 <vec_tmp0=v7.2d,<vec_u0_r0_v0_s0=v5.4s,<vec_F2_F3_G2_G3=v1.s[2]
umlal2 v7.2d,v5.4s,v1.s[2]

# qhasm: 2x vec_tmp0 += vec_u1_r1_v1_s1[0] unsigned* vec_F0_F1_G0_G1[1/4]
# asm 1: umlal <vec_tmp0=reg128#8.2d,<vec_u1_r1_v1_s1=reg128#7.2s,<vec_F0_F1_G0_G1=reg128#1.s[1]
# asm 2: umlal <vec_tmp0=v7.2d,<vec_u1_r1_v1_s1=v6.2s,<vec_F0_F1_G0_G1=v0.s[1]
umlal v7.2d,v6.2s,v0.s[1]

# qhasm: 2x vec_tmp0 += vec_u1_r1_v1_s1[1] unsigned* vec_F0_F1_G0_G1[3/4]
# asm 1: umlal2 <vec_tmp0=reg128#8.2d,<vec_u1_r1_v1_s1=reg128#7.4s,<vec_F0_F1_G0_G1=reg128#1.s[3]
# asm 2: umlal2 <vec_tmp0=v7.2d,<vec_u1_r1_v1_s1=v6.4s,<vec_F0_F1_G0_G1=v0.s[3]
umlal2 v7.2d,v6.4s,v0.s[3]

# qhasm: vec_R2_0_S2_0 = vec_tmp0 & vec_MASK2p30m1
# asm 1: and >vec_R2_0_S2_0=reg128#12.16b,<vec_tmp0=reg128#8.16b,<vec_MASK2p30m1=reg128#9.16b
# asm 2: and >vec_R2_0_S2_0=v11.16b,<vec_tmp0=v7.16b,<vec_MASK2p30m1=v8.16b
and v11.16b,v7.16b,v8.16b

# qhasm: 2x vec_tmp0 unsigned>>= 30
# asm 1: ushr >vec_tmp0=reg128#8.2d,<vec_tmp0=reg128#8.2d,#30
# asm 2: ushr >vec_tmp0=v7.2d,<vec_tmp0=v7.2d,#30
ushr v7.2d,v7.2d,#30

# qhasm: 2x vec_tmp0 += vec_u0_r0_v0_s0[0] unsigned* vec_F2_F3_G2_G3[1/4]
# asm 1: umlal <vec_tmp0=reg128#8.2d,<vec_u0_r0_v0_s0=reg128#6.2s,<vec_F2_F3_G2_G3=reg128#2.s[1]
# asm 2: umlal <vec_tmp0=v7.2d,<vec_u0_r0_v0_s0=v5.2s,<vec_F2_F3_G2_G3=v1.s[1]
umlal v7.2d,v5.2s,v1.s[1]

# qhasm: 2x vec_tmp0 += vec_u0_r0_v0_s0[1] unsigned* vec_F2_F3_G2_G3[3/4]
# asm 1: umlal2 <vec_tmp0=reg128#8.2d,<vec_u0_r0_v0_s0=reg128#6.4s,<vec_F2_F3_G2_G3=reg128#2.s[3]
# asm 2: umlal2 <vec_tmp0=v7.2d,<vec_u0_r0_v0_s0=v5.4s,<vec_F2_F3_G2_G3=v1.s[3]
umlal2 v7.2d,v5.4s,v1.s[3]

# qhasm: 2x vec_tmp0 += vec_u1_r1_v1_s1[0] unsigned* vec_F2_F3_G2_G3[0/4]
# asm 1: umlal <vec_tmp0=reg128#8.2d,<vec_u1_r1_v1_s1=reg128#7.2s,<vec_F2_F3_G2_G3=reg128#2.s[0]
# asm 2: umlal <vec_tmp0=v7.2d,<vec_u1_r1_v1_s1=v6.2s,<vec_F2_F3_G2_G3=v1.s[0]
umlal v7.2d,v6.2s,v1.s[0]

# qhasm: 2x vec_tmp0 += vec_u1_r1_v1_s1[1] unsigned* vec_F2_F3_G2_G3[2/4]
# asm 1: umlal2 <vec_tmp0=reg128#8.2d,<vec_u1_r1_v1_s1=reg128#7.4s,<vec_F2_F3_G2_G3=reg128#2.s[2]
# asm 2: umlal2 <vec_tmp0=v7.2d,<vec_u1_r1_v1_s1=v6.4s,<vec_F2_F3_G2_G3=v1.s[2]
umlal2 v7.2d,v6.4s,v1.s[2]

# qhasm: vec_R3_0_S3_0 = vec_tmp0 & vec_MASK2p30m1
# asm 1: and >vec_R3_0_S3_0=reg128#13.16b,<vec_tmp0=reg128#8.16b,<vec_MASK2p30m1=reg128#9.16b
# asm 2: and >vec_R3_0_S3_0=v12.16b,<vec_tmp0=v7.16b,<vec_MASK2p30m1=v8.16b
and v12.16b,v7.16b,v8.16b

# qhasm: 2x vec_tmp0 unsigned>>= 30
# asm 1: ushr >vec_tmp0=reg128#8.2d,<vec_tmp0=reg128#8.2d,#30
# asm 2: ushr >vec_tmp0=v7.2d,<vec_tmp0=v7.2d,#30
ushr v7.2d,v7.2d,#30

# qhasm: 2x vec_tmp0 += vec_u0_r0_v0_s0[0] unsigned* vec_F4_F5_G4_G5[0/4]
# asm 1: umlal <vec_tmp0=reg128#8.2d,<vec_u0_r0_v0_s0=reg128#6.2s,<vec_F4_F5_G4_G5=reg128#3.s[0]
# asm 2: umlal <vec_tmp0=v7.2d,<vec_u0_r0_v0_s0=v5.2s,<vec_F4_F5_G4_G5=v2.s[0]
umlal v7.2d,v5.2s,v2.s[0]

# qhasm: 2x vec_tmp0 += vec_u0_r0_v0_s0[1] unsigned* vec_F4_F5_G4_G5[2/4]
# asm 1: umlal2 <vec_tmp0=reg128#8.2d,<vec_u0_r0_v0_s0=reg128#6.4s,<vec_F4_F5_G4_G5=reg128#3.s[2]
# asm 2: umlal2 <vec_tmp0=v7.2d,<vec_u0_r0_v0_s0=v5.4s,<vec_F4_F5_G4_G5=v2.s[2]
umlal2 v7.2d,v5.4s,v2.s[2]

# qhasm: 2x vec_tmp0 += vec_u1_r1_v1_s1[0] unsigned* vec_F2_F3_G2_G3[1/4]
# asm 1: umlal <vec_tmp0=reg128#8.2d,<vec_u1_r1_v1_s1=reg128#7.2s,<vec_F2_F3_G2_G3=reg128#2.s[1]
# asm 2: umlal <vec_tmp0=v7.2d,<vec_u1_r1_v1_s1=v6.2s,<vec_F2_F3_G2_G3=v1.s[1]
umlal v7.2d,v6.2s,v1.s[1]

# qhasm: 2x vec_tmp0 += vec_u1_r1_v1_s1[1] unsigned* vec_F2_F3_G2_G3[3/4]
# asm 1: umlal2 <vec_tmp0=reg128#8.2d,<vec_u1_r1_v1_s1=reg128#7.4s,<vec_F2_F3_G2_G3=reg128#2.s[3]
# asm 2: umlal2 <vec_tmp0=v7.2d,<vec_u1_r1_v1_s1=v6.4s,<vec_F2_F3_G2_G3=v1.s[3]
umlal2 v7.2d,v6.4s,v1.s[3]

# qhasm: vec_R4_0_S4_0 = vec_tmp0 & vec_MASK2p30m1
# asm 1: and >vec_R4_0_S4_0=reg128#14.16b,<vec_tmp0=reg128#8.16b,<vec_MASK2p30m1=reg128#9.16b
# asm 2: and >vec_R4_0_S4_0=v13.16b,<vec_tmp0=v7.16b,<vec_MASK2p30m1=v8.16b
and v13.16b,v7.16b,v8.16b

# qhasm: 2x vec_tmp0 unsigned>>= 30
# asm 1: ushr >vec_tmp0=reg128#8.2d,<vec_tmp0=reg128#8.2d,#30
# asm 2: ushr >vec_tmp0=v7.2d,<vec_tmp0=v7.2d,#30
ushr v7.2d,v7.2d,#30

# qhasm: 2x vec_tmp0 += vec_u0_r0_v0_s0[0] unsigned* vec_F4_F5_G4_G5[1/4]
# asm 1: umlal <vec_tmp0=reg128#8.2d,<vec_u0_r0_v0_s0=reg128#6.2s,<vec_F4_F5_G4_G5=reg128#3.s[1]
# asm 2: umlal <vec_tmp0=v7.2d,<vec_u0_r0_v0_s0=v5.2s,<vec_F4_F5_G4_G5=v2.s[1]
umlal v7.2d,v5.2s,v2.s[1]

# qhasm: 2x vec_tmp0 += vec_u0_r0_v0_s0[1] unsigned* vec_F4_F5_G4_G5[3/4]
# asm 1: umlal2 <vec_tmp0=reg128#8.2d,<vec_u0_r0_v0_s0=reg128#6.4s,<vec_F4_F5_G4_G5=reg128#3.s[3]
# asm 2: umlal2 <vec_tmp0=v7.2d,<vec_u0_r0_v0_s0=v5.4s,<vec_F4_F5_G4_G5=v2.s[3]
umlal2 v7.2d,v5.4s,v2.s[3]

# qhasm: 2x vec_tmp0 += vec_u1_r1_v1_s1[0] unsigned* vec_F4_F5_G4_G5[0/4]
# asm 1: umlal <vec_tmp0=reg128#8.2d,<vec_u1_r1_v1_s1=reg128#7.2s,<vec_F4_F5_G4_G5=reg128#3.s[0]
# asm 2: umlal <vec_tmp0=v7.2d,<vec_u1_r1_v1_s1=v6.2s,<vec_F4_F5_G4_G5=v2.s[0]
umlal v7.2d,v6.2s,v2.s[0]

# qhasm: 2x vec_tmp0 += vec_u1_r1_v1_s1[1] unsigned* vec_F4_F5_G4_G5[2/4]
# asm 1: umlal2 <vec_tmp0=reg128#8.2d,<vec_u1_r1_v1_s1=reg128#7.4s,<vec_F4_F5_G4_G5=reg128#3.s[2]
# asm 2: umlal2 <vec_tmp0=v7.2d,<vec_u1_r1_v1_s1=v6.4s,<vec_F4_F5_G4_G5=v2.s[2]
umlal2 v7.2d,v6.4s,v2.s[2]

# qhasm: vec_R5_0_S5_0 = vec_tmp0 & vec_MASK2p30m1
# asm 1: and >vec_R5_0_S5_0=reg128#15.16b,<vec_tmp0=reg128#8.16b,<vec_MASK2p30m1=reg128#9.16b
# asm 2: and >vec_R5_0_S5_0=v14.16b,<vec_tmp0=v7.16b,<vec_MASK2p30m1=v8.16b
and v14.16b,v7.16b,v8.16b

# qhasm: 2x vec_tmp0 unsigned>>= 30
# asm 1: ushr >vec_tmp0=reg128#8.2d,<vec_tmp0=reg128#8.2d,#30
# asm 2: ushr >vec_tmp0=v7.2d,<vec_tmp0=v7.2d,#30
ushr v7.2d,v7.2d,#30

# qhasm: 2x vec_tmp0 += vec_u0_r0_v0_s0[0] unsigned* vec_F6_F7_G6_G7[0/4]
# asm 1: umlal <vec_tmp0=reg128#8.2d,<vec_u0_r0_v0_s0=reg128#6.2s,<vec_F6_F7_G6_G7=reg128#4.s[0]
# asm 2: umlal <vec_tmp0=v7.2d,<vec_u0_r0_v0_s0=v5.2s,<vec_F6_F7_G6_G7=v3.s[0]
umlal v7.2d,v5.2s,v3.s[0]

# qhasm: 2x vec_tmp0 += vec_u0_r0_v0_s0[1] unsigned* vec_F6_F7_G6_G7[2/4]
# asm 1: umlal2 <vec_tmp0=reg128#8.2d,<vec_u0_r0_v0_s0=reg128#6.4s,<vec_F6_F7_G6_G7=reg128#4.s[2]
# asm 2: umlal2 <vec_tmp0=v7.2d,<vec_u0_r0_v0_s0=v5.4s,<vec_F6_F7_G6_G7=v3.s[2]
umlal2 v7.2d,v5.4s,v3.s[2]

# qhasm: 2x vec_tmp0 += vec_u1_r1_v1_s1[0] unsigned* vec_F4_F5_G4_G5[1/4]
# asm 1: umlal <vec_tmp0=reg128#8.2d,<vec_u1_r1_v1_s1=reg128#7.2s,<vec_F4_F5_G4_G5=reg128#3.s[1]
# asm 2: umlal <vec_tmp0=v7.2d,<vec_u1_r1_v1_s1=v6.2s,<vec_F4_F5_G4_G5=v2.s[1]
umlal v7.2d,v6.2s,v2.s[1]

# qhasm: 2x vec_tmp0 += vec_u1_r1_v1_s1[1] unsigned* vec_F4_F5_G4_G5[3/4]
# asm 1: umlal2 <vec_tmp0=reg128#8.2d,<vec_u1_r1_v1_s1=reg128#7.4s,<vec_F4_F5_G4_G5=reg128#3.s[3]
# asm 2: umlal2 <vec_tmp0=v7.2d,<vec_u1_r1_v1_s1=v6.4s,<vec_F4_F5_G4_G5=v2.s[3]
umlal2 v7.2d,v6.4s,v2.s[3]

# qhasm: vec_R6_0_S6_0 = vec_tmp0 & vec_MASK2p30m1
# asm 1: and >vec_R6_0_S6_0=reg128#16.16b,<vec_tmp0=reg128#8.16b,<vec_MASK2p30m1=reg128#9.16b
# asm 2: and >vec_R6_0_S6_0=v15.16b,<vec_tmp0=v7.16b,<vec_MASK2p30m1=v8.16b
and v15.16b,v7.16b,v8.16b

# qhasm: 2x vec_tmp0 unsigned>>= 30
# asm 1: ushr >vec_tmp0=reg128#8.2d,<vec_tmp0=reg128#8.2d,#30
# asm 2: ushr >vec_tmp0=v7.2d,<vec_tmp0=v7.2d,#30
ushr v7.2d,v7.2d,#30

# qhasm: 2x vec_tmp0 += vec_u0_r0_v0_s0[0] unsigned* vec_F6_F7_G6_G7[1/4]
# asm 1: umlal <vec_tmp0=reg128#8.2d,<vec_u0_r0_v0_s0=reg128#6.2s,<vec_F6_F7_G6_G7=reg128#4.s[1]
# asm 2: umlal <vec_tmp0=v7.2d,<vec_u0_r0_v0_s0=v5.2s,<vec_F6_F7_G6_G7=v3.s[1]
umlal v7.2d,v5.2s,v3.s[1]

# qhasm: 2x vec_tmp0 += vec_u0_r0_v0_s0[1] unsigned* vec_F6_F7_G6_G7[3/4]
# asm 1: umlal2 <vec_tmp0=reg128#8.2d,<vec_u0_r0_v0_s0=reg128#6.4s,<vec_F6_F7_G6_G7=reg128#4.s[3]
# asm 2: umlal2 <vec_tmp0=v7.2d,<vec_u0_r0_v0_s0=v5.4s,<vec_F6_F7_G6_G7=v3.s[3]
umlal2 v7.2d,v5.4s,v3.s[3]

# qhasm: 2x vec_tmp0 += vec_u1_r1_v1_s1[0] unsigned* vec_F6_F7_G6_G7[0/4]
# asm 1: umlal <vec_tmp0=reg128#8.2d,<vec_u1_r1_v1_s1=reg128#7.2s,<vec_F6_F7_G6_G7=reg128#4.s[0]
# asm 2: umlal <vec_tmp0=v7.2d,<vec_u1_r1_v1_s1=v6.2s,<vec_F6_F7_G6_G7=v3.s[0]
umlal v7.2d,v6.2s,v3.s[0]

# qhasm: 2x vec_tmp0 += vec_u1_r1_v1_s1[1] unsigned* vec_F6_F7_G6_G7[2/4]
# asm 1: umlal2 <vec_tmp0=reg128#8.2d,<vec_u1_r1_v1_s1=reg128#7.4s,<vec_F6_F7_G6_G7=reg128#4.s[2]
# asm 2: umlal2 <vec_tmp0=v7.2d,<vec_u1_r1_v1_s1=v6.4s,<vec_F6_F7_G6_G7=v3.s[2]
umlal2 v7.2d,v6.4s,v3.s[2]

# qhasm: vec_R7_0_S7_0 = vec_tmp0 & vec_MASK2p30m1
# asm 1: and >vec_R7_0_S7_0=reg128#17.16b,<vec_tmp0=reg128#8.16b,<vec_MASK2p30m1=reg128#9.16b
# asm 2: and >vec_R7_0_S7_0=v16.16b,<vec_tmp0=v7.16b,<vec_MASK2p30m1=v8.16b
and v16.16b,v7.16b,v8.16b

# qhasm: 2x vec_tmp0 unsigned>>= 30
# asm 1: ushr >vec_tmp0=reg128#8.2d,<vec_tmp0=reg128#8.2d,#30
# asm 2: ushr >vec_tmp0=v7.2d,<vec_tmp0=v7.2d,#30
ushr v7.2d,v7.2d,#30

# qhasm: 2x vec_tmp0 += vec_u0_r0_v0_s0[0] unsigned* vec_F8_0_G8_0[0/4]
# asm 1: umlal <vec_tmp0=reg128#8.2d,<vec_u0_r0_v0_s0=reg128#6.2s,<vec_F8_0_G8_0=reg128#5.s[0]
# asm 2: umlal <vec_tmp0=v7.2d,<vec_u0_r0_v0_s0=v5.2s,<vec_F8_0_G8_0=v4.s[0]
umlal v7.2d,v5.2s,v4.s[0]

# qhasm: 2x vec_tmp0 += vec_u0_r0_v0_s0[1] unsigned* vec_F8_0_G8_0[2/4]
# asm 1: umlal2 <vec_tmp0=reg128#8.2d,<vec_u0_r0_v0_s0=reg128#6.4s,<vec_F8_0_G8_0=reg128#5.s[2]
# asm 2: umlal2 <vec_tmp0=v7.2d,<vec_u0_r0_v0_s0=v5.4s,<vec_F8_0_G8_0=v4.s[2]
umlal2 v7.2d,v5.4s,v4.s[2]

# qhasm: 2x vec_tmp0 += vec_u1_r1_v1_s1[0] unsigned* vec_F6_F7_G6_G7[1/4]
# asm 1: umlal <vec_tmp0=reg128#8.2d,<vec_u1_r1_v1_s1=reg128#7.2s,<vec_F6_F7_G6_G7=reg128#4.s[1]
# asm 2: umlal <vec_tmp0=v7.2d,<vec_u1_r1_v1_s1=v6.2s,<vec_F6_F7_G6_G7=v3.s[1]
umlal v7.2d,v6.2s,v3.s[1]

# qhasm: 2x vec_tmp0 += vec_u1_r1_v1_s1[1] unsigned* vec_F6_F7_G6_G7[3/4]
# asm 1: umlal2 <vec_tmp0=reg128#8.2d,<vec_u1_r1_v1_s1=reg128#7.4s,<vec_F6_F7_G6_G7=reg128#4.s[3]
# asm 2: umlal2 <vec_tmp0=v7.2d,<vec_u1_r1_v1_s1=v6.4s,<vec_F6_F7_G6_G7=v3.s[3]
umlal2 v7.2d,v6.4s,v3.s[3]

# qhasm: vec_R8_0_S8_0 = vec_tmp0 & vec_MASK2p30m1
# asm 1: and >vec_R8_0_S8_0=reg128#18.16b,<vec_tmp0=reg128#8.16b,<vec_MASK2p30m1=reg128#9.16b
# asm 2: and >vec_R8_0_S8_0=v17.16b,<vec_tmp0=v7.16b,<vec_MASK2p30m1=v8.16b
and v17.16b,v7.16b,v8.16b

# qhasm: 2x vec_tmp0 unsigned>>= 30
# asm 1: ushr >vec_tmp0=reg128#8.2d,<vec_tmp0=reg128#8.2d,#30
# asm 2: ushr >vec_tmp0=v7.2d,<vec_tmp0=v7.2d,#30
ushr v7.2d,v7.2d,#30

# qhasm: 2x vec_tmp0 += vec_u1_r1_v1_s1[0] unsigned* vec_F8_0_G8_0[0/4]
# asm 1: umlal <vec_tmp0=reg128#8.2d,<vec_u1_r1_v1_s1=reg128#7.2s,<vec_F8_0_G8_0=reg128#5.s[0]
# asm 2: umlal <vec_tmp0=v7.2d,<vec_u1_r1_v1_s1=v6.2s,<vec_F8_0_G8_0=v4.s[0]
umlal v7.2d,v6.2s,v4.s[0]

# qhasm: 2x vec_tmp0 += vec_u1_r1_v1_s1[1] unsigned* vec_F8_0_G8_0[2/4]
# asm 1: umlal2 <vec_tmp0=reg128#8.2d,<vec_u1_r1_v1_s1=reg128#7.4s,<vec_F8_0_G8_0=reg128#5.s[2]
# asm 2: umlal2 <vec_tmp0=v7.2d,<vec_u1_r1_v1_s1=v6.4s,<vec_F8_0_G8_0=v4.s[2]
umlal2 v7.2d,v6.4s,v4.s[2]

# qhasm: vec_R9_0_S9_0 = vec_tmp0 & vec_MASK2p30m1
# asm 1: and >vec_R9_0_S9_0=reg128#9.16b,<vec_tmp0=reg128#8.16b,<vec_MASK2p30m1=reg128#9.16b
# asm 2: and >vec_R9_0_S9_0=v8.16b,<vec_tmp0=v7.16b,<vec_MASK2p30m1=v8.16b
and v8.16b,v7.16b,v8.16b

# qhasm: 2x vec_tmp0 unsigned>>= 30
# asm 1: ushr >vec_tmp0=reg128#8.2d,<vec_tmp0=reg128#8.2d,#30
# asm 2: ushr >vec_tmp0=v7.2d,<vec_tmp0=v7.2d,#30
ushr v7.2d,v7.2d,#30

# qhasm: vec_R10_0_S10_0 = vec_tmp0 
# asm 1: mov >vec_R10_0_S10_0=reg128#8.16b,<vec_tmp0=reg128#8.16b
# asm 2: mov >vec_R10_0_S10_0=v7.16b,<vec_tmp0=v7.16b
mov v7.16b,v7.16b

# qhasm: 2x vec_R1_0_S1_0 <<= 32
# asm 1: shl >vec_R1_0_S1_0=reg128#11.2d,<vec_R1_0_S1_0=reg128#11.2d,#32
# asm 2: shl >vec_R1_0_S1_0=v10.2d,<vec_R1_0_S1_0=v10.2d,#32
shl v10.2d,v10.2d,#32

# qhasm: vec_R0_R1_S0_S1 = vec_R0_0_S0_0 | vec_R1_0_S1_0
# asm 1: orr >vec_R0_R1_S0_S1=reg128#10.16b,<vec_R0_0_S0_0=reg128#10.16b,<vec_R1_0_S1_0=reg128#11.16b
# asm 2: orr >vec_R0_R1_S0_S1=v9.16b,<vec_R0_0_S0_0=v9.16b,<vec_R1_0_S1_0=v10.16b
orr v9.16b,v9.16b,v10.16b

# qhasm: 2x vec_R3_0_S3_0 <<= 32
# asm 1: shl >vec_R3_0_S3_0=reg128#11.2d,<vec_R3_0_S3_0=reg128#13.2d,#32
# asm 2: shl >vec_R3_0_S3_0=v10.2d,<vec_R3_0_S3_0=v12.2d,#32
shl v10.2d,v12.2d,#32

# qhasm: vec_R2_R3_S2_S3 = vec_R2_0_S2_0 | vec_R3_0_S3_0
# asm 1: orr >vec_R2_R3_S2_S3=reg128#11.16b,<vec_R2_0_S2_0=reg128#12.16b,<vec_R3_0_S3_0=reg128#11.16b
# asm 2: orr >vec_R2_R3_S2_S3=v10.16b,<vec_R2_0_S2_0=v11.16b,<vec_R3_0_S3_0=v10.16b
orr v10.16b,v11.16b,v10.16b

# qhasm: 2x vec_R5_0_S5_0 <<= 32
# asm 1: shl >vec_R5_0_S5_0=reg128#12.2d,<vec_R5_0_S5_0=reg128#15.2d,#32
# asm 2: shl >vec_R5_0_S5_0=v11.2d,<vec_R5_0_S5_0=v14.2d,#32
shl v11.2d,v14.2d,#32

# qhasm: vec_R4_R5_S4_S5 = vec_R4_0_S4_0 | vec_R5_0_S5_0
# asm 1: orr >vec_R4_R5_S4_S5=reg128#12.16b,<vec_R4_0_S4_0=reg128#14.16b,<vec_R5_0_S5_0=reg128#12.16b
# asm 2: orr >vec_R4_R5_S4_S5=v11.16b,<vec_R4_0_S4_0=v13.16b,<vec_R5_0_S5_0=v11.16b
orr v11.16b,v13.16b,v11.16b

# qhasm: 2x vec_R7_0_S7_0 <<= 32
# asm 1: shl >vec_R7_0_S7_0=reg128#13.2d,<vec_R7_0_S7_0=reg128#17.2d,#32
# asm 2: shl >vec_R7_0_S7_0=v12.2d,<vec_R7_0_S7_0=v16.2d,#32
shl v12.2d,v16.2d,#32

# qhasm: vec_R6_R7_S6_S7 = vec_R6_0_S6_0 | vec_R7_0_S7_0
# asm 1: orr >vec_R6_R7_S6_S7=reg128#13.16b,<vec_R6_0_S6_0=reg128#16.16b,<vec_R7_0_S7_0=reg128#13.16b
# asm 2: orr >vec_R6_R7_S6_S7=v12.16b,<vec_R6_0_S6_0=v15.16b,<vec_R7_0_S7_0=v12.16b
orr v12.16b,v15.16b,v12.16b

# qhasm: 2x vec_R9_0_S9_0 <<= 32
# asm 1: shl >vec_R9_0_S9_0=reg128#9.2d,<vec_R9_0_S9_0=reg128#9.2d,#32
# asm 2: shl >vec_R9_0_S9_0=v8.2d,<vec_R9_0_S9_0=v8.2d,#32
shl v8.2d,v8.2d,#32

# qhasm: vec_R8_R9_S8_S9 = vec_R8_0_S8_0 | vec_R9_0_S9_0
# asm 1: orr >vec_R8_R9_S8_S9=reg128#9.16b,<vec_R8_0_S8_0=reg128#18.16b,<vec_R9_0_S9_0=reg128#9.16b
# asm 2: orr >vec_R8_R9_S8_S9=v8.16b,<vec_R8_0_S8_0=v17.16b,<vec_R9_0_S9_0=v8.16b
orr v8.16b,v17.16b,v8.16b

# qhasm: carry1 = 3221225472
# asm 1: mov >carry1=int64#3, #3221225472
# asm 2: mov >carry1=x2, #3221225472
mov x2, #3221225472

# qhasm: 2x vec_MASKcarry1 = carry1
# asm 1: dup <vec_MASKcarry1=reg128#14.2d,<carry1=int64#3
# asm 2: dup <vec_MASKcarry1=v13.2d,<carry1=x2
dup v13.2d,x2

# qhasm: 2x vec_MASKcarry2 = vec_MASKcarry1 << 32
# asm 1: shl >vec_MASKcarry2=reg128#15.2d,<vec_MASKcarry1=reg128#14.2d,#32
# asm 2: shl >vec_MASKcarry2=v14.2d,<vec_MASKcarry1=v13.2d,#32
shl v14.2d,v13.2d,#32

# qhasm: vec_MASKcarry = vec_MASKcarry1 | vec_MASKcarry2
# asm 1: orr >vec_MASKcarry=reg128#16.16b,<vec_MASKcarry1=reg128#14.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: orr >vec_MASKcarry=v15.16b,<vec_MASKcarry1=v13.16b,<vec_MASKcarry2=v14.16b
orr v15.16b,v13.16b,v14.16b

# qhasm: vec_MASKeffect = ~vec_MASKcarry
# asm 1: mvn  >vec_MASKeffect=reg128#17.16b,<vec_MASKcarry=reg128#16.16b
# asm 2: mvn  >vec_MASKeffect=v16.16b,<vec_MASKcarry=v15.16b
mvn  v16.16b,v15.16b

# qhasm: ONE = 1
# asm 1: mov >ONE=int64#3, #1
# asm 2: mov >ONE=x2, #1
mov x2, #1

# qhasm: 2x vec_ONE = ONE
# asm 1: dup <vec_ONE=reg128#18.2d,<ONE=int64#3
# asm 2: dup <vec_ONE=v17.2d,<ONE=x2
dup v17.2d,x2

# qhasm: carry1 = 4294967295
# asm 1: mov >carry1=int64#3, #4294967295
# asm 2: mov >carry1=x2, #4294967295
mov x2, #4294967295

# qhasm: 2x vec_MASKhalfeffect = carry1
# asm 1: dup <vec_MASKhalfeffect=reg128#19.2d,<carry1=int64#3
# asm 2: dup <vec_MASKhalfeffect=v18.2d,<carry1=x2
dup v18.2d,x2

# qhasm: 4x vec_uhat_rhat_vhat_shat = vec_u1_r1_v1_s1 >> 31
# asm 1: sshr >vec_uhat_rhat_vhat_shat=reg128#20.4s,<vec_u1_r1_v1_s1=reg128#7.4s,#31
# asm 2: sshr >vec_uhat_rhat_vhat_shat=v19.4s,<vec_u1_r1_v1_s1=v6.4s,#31
sshr v19.4s,v6.4s,#31

# qhasm: 4x vec_uhat_rhat = vec_uhat_rhat_vhat_shat[0/4] vec_uhat_rhat_vhat_shat[0/4] vec_uhat_rhat_vhat_shat[1/4] vec_uhat_rhat_vhat_shat[1/4]
# asm 1: zip1 >vec_uhat_rhat=reg128#21.4s,<vec_uhat_rhat_vhat_shat=reg128#20.4s,<vec_uhat_rhat_vhat_shat=reg128#20.4s
# asm 2: zip1 >vec_uhat_rhat=v20.4s,<vec_uhat_rhat_vhat_shat=v19.4s,<vec_uhat_rhat_vhat_shat=v19.4s
zip1 v20.4s,v19.4s,v19.4s

# qhasm: 4x vec_vhat_shat = vec_uhat_rhat_vhat_shat[2/4] vec_uhat_rhat_vhat_shat[2/4] vec_uhat_rhat_vhat_shat[3/4] vec_uhat_rhat_vhat_shat[3/4]
# asm 1: zip2 >vec_vhat_shat=reg128#20.4s,<vec_uhat_rhat_vhat_shat=reg128#20.4s,<vec_uhat_rhat_vhat_shat=reg128#20.4s
# asm 2: zip2 >vec_vhat_shat=v19.4s,<vec_uhat_rhat_vhat_shat=v19.4s,<vec_uhat_rhat_vhat_shat=v19.4s
zip2 v19.4s,v19.4s,v19.4s

# qhasm: 2x vec_tmp1 = vec_F0_F1_G0_G1[0/2]
# asm 1: dup <vec_tmp1=reg128#22.2d,<vec_F0_F1_G0_G1=reg128#1.d[0]
# asm 2: dup <vec_tmp1=v21.2d,<vec_F0_F1_G0_G1=v0.d[0]
dup v21.2d,v0.d[0]

# qhasm: 2x vec_tmp2 = vec_F2_F3_G2_G3[0/2]
# asm 1: dup <vec_tmp2=reg128#23.2d,<vec_F2_F3_G2_G3=reg128#2.d[0]
# asm 2: dup <vec_tmp2=v22.2d,<vec_F2_F3_G2_G3=v1.d[0]
dup v22.2d,v1.d[0]

# qhasm: 2x vec_tmp3 = vec_F4_F5_G4_G5[0/2]
# asm 1: dup <vec_tmp3=reg128#24.2d,<vec_F4_F5_G4_G5=reg128#3.d[0]
# asm 2: dup <vec_tmp3=v23.2d,<vec_F4_F5_G4_G5=v2.d[0]
dup v23.2d,v2.d[0]

# qhasm: 2x vec_tmp4 = vec_F6_F7_G6_G7[0/2]
# asm 1: dup <vec_tmp4=reg128#25.2d,<vec_F6_F7_G6_G7=reg128#4.d[0]
# asm 2: dup <vec_tmp4=v24.2d,<vec_F6_F7_G6_G7=v3.d[0]
dup v24.2d,v3.d[0]

# qhasm: 2x vec_tmp5 = vec_F8_0_G8_0[0/2]
# asm 1: dup <vec_tmp5=reg128#26.2d,<vec_F8_0_G8_0=reg128#5.d[0]
# asm 2: dup <vec_tmp5=v25.2d,<vec_F8_0_G8_0=v4.d[0]
dup v25.2d,v4.d[0]

# qhasm: 2x vec_tmp1 <<= 2
# asm 1: shl >vec_tmp1=reg128#22.2d,<vec_tmp1=reg128#22.2d,#2
# asm 2: shl >vec_tmp1=v21.2d,<vec_tmp1=v21.2d,#2
shl v21.2d,v21.2d,#2

# qhasm: 2x vec_tmp2 <<= 2
# asm 1: shl >vec_tmp2=reg128#23.2d,<vec_tmp2=reg128#23.2d,#2
# asm 2: shl >vec_tmp2=v22.2d,<vec_tmp2=v22.2d,#2
shl v22.2d,v22.2d,#2

# qhasm: 2x vec_tmp3 <<= 2
# asm 1: shl >vec_tmp3=reg128#24.2d,<vec_tmp3=reg128#24.2d,#2
# asm 2: shl >vec_tmp3=v23.2d,<vec_tmp3=v23.2d,#2
shl v23.2d,v23.2d,#2

# qhasm: 2x vec_tmp4 <<= 2
# asm 1: shl >vec_tmp4=reg128#25.2d,<vec_tmp4=reg128#25.2d,#2
# asm 2: shl >vec_tmp4=v24.2d,<vec_tmp4=v24.2d,#2
shl v24.2d,v24.2d,#2

# qhasm: 2x vec_tmp5 <<= 2
# asm 1: shl >vec_tmp5=reg128#26.2d,<vec_tmp5=reg128#26.2d,#2
# asm 2: shl >vec_tmp5=v25.2d,<vec_tmp5=v25.2d,#2
shl v25.2d,v25.2d,#2

# qhasm: vec_carry1 = vec_tmp1 & vec_MASKcarry1
# asm 1: and >vec_carry1=reg128#27.16b,<vec_tmp1=reg128#22.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: and >vec_carry1=v26.16b,<vec_tmp1=v21.16b,<vec_MASKcarry1=v13.16b
and v26.16b,v21.16b,v13.16b

# qhasm: vec_tmp1 = vec_tmp1 & ~vec_MASKcarry1
# asm 1: bic >vec_tmp1=reg128#22.16b,<vec_tmp1=reg128#22.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: bic >vec_tmp1=v21.16b,<vec_tmp1=v21.16b,<vec_MASKcarry1=v13.16b
bic v21.16b,v21.16b,v13.16b

# qhasm: 2x vec_carry1 <<= 2
# asm 1: shl >vec_carry1=reg128#27.2d,<vec_carry1=reg128#27.2d,#2
# asm 2: shl >vec_carry1=v26.2d,<vec_carry1=v26.2d,#2
shl v26.2d,v26.2d,#2

# qhasm: vec_tmp1 |= vec_carry1
# asm 1: orr >vec_tmp1=reg128#22.16b,<vec_tmp1=reg128#22.16b,<vec_carry1=reg128#27.16b
# asm 2: orr >vec_tmp1=v21.16b,<vec_tmp1=v21.16b,<vec_carry1=v26.16b
orr v21.16b,v21.16b,v26.16b

# qhasm: vec_carry2 = vec_tmp1 & vec_MASKcarry2
# asm 1: and >vec_carry2=reg128#27.16b,<vec_tmp1=reg128#22.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: and >vec_carry2=v26.16b,<vec_tmp1=v21.16b,<vec_MASKcarry2=v14.16b
and v26.16b,v21.16b,v14.16b

# qhasm: vec_tmp1 = vec_tmp1 & ~vec_MASKcarry2
# asm 1: bic >vec_tmp1=reg128#22.16b,<vec_tmp1=reg128#22.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: bic >vec_tmp1=v21.16b,<vec_tmp1=v21.16b,<vec_MASKcarry2=v14.16b
bic v21.16b,v21.16b,v14.16b

# qhasm: 2x vec_carry2 unsigned>>= 62
# asm 1: ushr >vec_carry2=reg128#27.2d,<vec_carry2=reg128#27.2d,#62
# asm 2: ushr >vec_carry2=v26.2d,<vec_carry2=v26.2d,#62
ushr v26.2d,v26.2d,#62

# qhasm: vec_tmp2 |= vec_carry2
# asm 1: orr >vec_tmp2=reg128#23.16b,<vec_tmp2=reg128#23.16b,<vec_carry2=reg128#27.16b
# asm 2: orr >vec_tmp2=v22.16b,<vec_tmp2=v22.16b,<vec_carry2=v26.16b
orr v22.16b,v22.16b,v26.16b

# qhasm: vec_carry1 = vec_tmp2 & vec_MASKcarry1
# asm 1: and >vec_carry1=reg128#27.16b,<vec_tmp2=reg128#23.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: and >vec_carry1=v26.16b,<vec_tmp2=v22.16b,<vec_MASKcarry1=v13.16b
and v26.16b,v22.16b,v13.16b

# qhasm: vec_tmp2 = vec_tmp2 & ~vec_MASKcarry1
# asm 1: bic >vec_tmp2=reg128#23.16b,<vec_tmp2=reg128#23.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: bic >vec_tmp2=v22.16b,<vec_tmp2=v22.16b,<vec_MASKcarry1=v13.16b
bic v22.16b,v22.16b,v13.16b

# qhasm: 2x vec_carry1 <<= 2
# asm 1: shl >vec_carry1=reg128#27.2d,<vec_carry1=reg128#27.2d,#2
# asm 2: shl >vec_carry1=v26.2d,<vec_carry1=v26.2d,#2
shl v26.2d,v26.2d,#2

# qhasm: vec_tmp2 |= vec_carry1
# asm 1: orr >vec_tmp2=reg128#23.16b,<vec_tmp2=reg128#23.16b,<vec_carry1=reg128#27.16b
# asm 2: orr >vec_tmp2=v22.16b,<vec_tmp2=v22.16b,<vec_carry1=v26.16b
orr v22.16b,v22.16b,v26.16b

# qhasm: vec_carry2 = vec_tmp2 & vec_MASKcarry2
# asm 1: and >vec_carry2=reg128#27.16b,<vec_tmp2=reg128#23.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: and >vec_carry2=v26.16b,<vec_tmp2=v22.16b,<vec_MASKcarry2=v14.16b
and v26.16b,v22.16b,v14.16b

# qhasm: vec_tmp2 = vec_tmp2 & ~vec_MASKcarry2
# asm 1: bic >vec_tmp2=reg128#23.16b,<vec_tmp2=reg128#23.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: bic >vec_tmp2=v22.16b,<vec_tmp2=v22.16b,<vec_MASKcarry2=v14.16b
bic v22.16b,v22.16b,v14.16b

# qhasm: 2x vec_carry2 unsigned>>= 62
# asm 1: ushr >vec_carry2=reg128#27.2d,<vec_carry2=reg128#27.2d,#62
# asm 2: ushr >vec_carry2=v26.2d,<vec_carry2=v26.2d,#62
ushr v26.2d,v26.2d,#62

# qhasm: vec_tmp3 |= vec_carry2
# asm 1: orr >vec_tmp3=reg128#24.16b,<vec_tmp3=reg128#24.16b,<vec_carry2=reg128#27.16b
# asm 2: orr >vec_tmp3=v23.16b,<vec_tmp3=v23.16b,<vec_carry2=v26.16b
orr v23.16b,v23.16b,v26.16b

# qhasm: vec_carry1 = vec_tmp3 & vec_MASKcarry1
# asm 1: and >vec_carry1=reg128#27.16b,<vec_tmp3=reg128#24.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: and >vec_carry1=v26.16b,<vec_tmp3=v23.16b,<vec_MASKcarry1=v13.16b
and v26.16b,v23.16b,v13.16b

# qhasm: vec_tmp3 = vec_tmp3 & ~vec_MASKcarry1
# asm 1: bic >vec_tmp3=reg128#24.16b,<vec_tmp3=reg128#24.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: bic >vec_tmp3=v23.16b,<vec_tmp3=v23.16b,<vec_MASKcarry1=v13.16b
bic v23.16b,v23.16b,v13.16b

# qhasm: 2x vec_carry1 <<= 2
# asm 1: shl >vec_carry1=reg128#27.2d,<vec_carry1=reg128#27.2d,#2
# asm 2: shl >vec_carry1=v26.2d,<vec_carry1=v26.2d,#2
shl v26.2d,v26.2d,#2

# qhasm: vec_tmp3 |= vec_carry1
# asm 1: orr >vec_tmp3=reg128#24.16b,<vec_tmp3=reg128#24.16b,<vec_carry1=reg128#27.16b
# asm 2: orr >vec_tmp3=v23.16b,<vec_tmp3=v23.16b,<vec_carry1=v26.16b
orr v23.16b,v23.16b,v26.16b

# qhasm: vec_carry2 = vec_tmp3 & vec_MASKcarry2
# asm 1: and >vec_carry2=reg128#27.16b,<vec_tmp3=reg128#24.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: and >vec_carry2=v26.16b,<vec_tmp3=v23.16b,<vec_MASKcarry2=v14.16b
and v26.16b,v23.16b,v14.16b

# qhasm: vec_tmp3 = vec_tmp3 & ~vec_MASKcarry2
# asm 1: bic >vec_tmp3=reg128#24.16b,<vec_tmp3=reg128#24.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: bic >vec_tmp3=v23.16b,<vec_tmp3=v23.16b,<vec_MASKcarry2=v14.16b
bic v23.16b,v23.16b,v14.16b

# qhasm: 2x vec_carry2 unsigned>>= 62
# asm 1: ushr >vec_carry2=reg128#27.2d,<vec_carry2=reg128#27.2d,#62
# asm 2: ushr >vec_carry2=v26.2d,<vec_carry2=v26.2d,#62
ushr v26.2d,v26.2d,#62

# qhasm: vec_tmp4 |= vec_carry2
# asm 1: orr >vec_tmp4=reg128#25.16b,<vec_tmp4=reg128#25.16b,<vec_carry2=reg128#27.16b
# asm 2: orr >vec_tmp4=v24.16b,<vec_tmp4=v24.16b,<vec_carry2=v26.16b
orr v24.16b,v24.16b,v26.16b

# qhasm: vec_carry1 = vec_tmp4 & vec_MASKcarry1
# asm 1: and >vec_carry1=reg128#27.16b,<vec_tmp4=reg128#25.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: and >vec_carry1=v26.16b,<vec_tmp4=v24.16b,<vec_MASKcarry1=v13.16b
and v26.16b,v24.16b,v13.16b

# qhasm: vec_tmp4 = vec_tmp4 & ~vec_MASKcarry1
# asm 1: bic >vec_tmp4=reg128#25.16b,<vec_tmp4=reg128#25.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: bic >vec_tmp4=v24.16b,<vec_tmp4=v24.16b,<vec_MASKcarry1=v13.16b
bic v24.16b,v24.16b,v13.16b

# qhasm: 2x vec_carry1 <<= 2
# asm 1: shl >vec_carry1=reg128#27.2d,<vec_carry1=reg128#27.2d,#2
# asm 2: shl >vec_carry1=v26.2d,<vec_carry1=v26.2d,#2
shl v26.2d,v26.2d,#2

# qhasm: vec_tmp4 |= vec_carry1
# asm 1: orr >vec_tmp4=reg128#25.16b,<vec_tmp4=reg128#25.16b,<vec_carry1=reg128#27.16b
# asm 2: orr >vec_tmp4=v24.16b,<vec_tmp4=v24.16b,<vec_carry1=v26.16b
orr v24.16b,v24.16b,v26.16b

# qhasm: vec_carry2 = vec_tmp4 & vec_MASKcarry2
# asm 1: and >vec_carry2=reg128#27.16b,<vec_tmp4=reg128#25.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: and >vec_carry2=v26.16b,<vec_tmp4=v24.16b,<vec_MASKcarry2=v14.16b
and v26.16b,v24.16b,v14.16b

# qhasm: vec_tmp4 = vec_tmp4 & ~vec_MASKcarry2
# asm 1: bic >vec_tmp4=reg128#25.16b,<vec_tmp4=reg128#25.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: bic >vec_tmp4=v24.16b,<vec_tmp4=v24.16b,<vec_MASKcarry2=v14.16b
bic v24.16b,v24.16b,v14.16b

# qhasm: 2x vec_carry2 unsigned>>= 62
# asm 1: ushr >vec_carry2=reg128#27.2d,<vec_carry2=reg128#27.2d,#62
# asm 2: ushr >vec_carry2=v26.2d,<vec_carry2=v26.2d,#62
ushr v26.2d,v26.2d,#62

# qhasm: vec_tmp5 |= vec_carry2
# asm 1: orr >vec_tmp5=reg128#26.16b,<vec_tmp5=reg128#26.16b,<vec_carry2=reg128#27.16b
# asm 2: orr >vec_tmp5=v25.16b,<vec_tmp5=v25.16b,<vec_carry2=v26.16b
orr v25.16b,v25.16b,v26.16b

# qhasm: vec_tmp1 ^= vec_MASKcarry
# asm 1: eor >vec_tmp1=reg128#22.16b,<vec_tmp1=reg128#22.16b,<vec_MASKcarry=reg128#16.16b
# asm 2: eor >vec_tmp1=v21.16b,<vec_tmp1=v21.16b,<vec_MASKcarry=v15.16b
eor v21.16b,v21.16b,v15.16b

# qhasm: vec_tmp1 = ~vec_tmp1
# asm 1: mvn  >vec_tmp1=reg128#22.16b,<vec_tmp1=reg128#22.16b
# asm 2: mvn  >vec_tmp1=v21.16b,<vec_tmp1=v21.16b
mvn  v21.16b,v21.16b

# qhasm: vec_tmp2 ^= vec_MASKcarry
# asm 1: eor >vec_tmp2=reg128#23.16b,<vec_tmp2=reg128#23.16b,<vec_MASKcarry=reg128#16.16b
# asm 2: eor >vec_tmp2=v22.16b,<vec_tmp2=v22.16b,<vec_MASKcarry=v15.16b
eor v22.16b,v22.16b,v15.16b

# qhasm: vec_tmp2 = ~vec_tmp2
# asm 1: mvn  >vec_tmp2=reg128#23.16b,<vec_tmp2=reg128#23.16b
# asm 2: mvn  >vec_tmp2=v22.16b,<vec_tmp2=v22.16b
mvn  v22.16b,v22.16b

# qhasm: vec_tmp3 ^= vec_MASKcarry
# asm 1: eor >vec_tmp3=reg128#24.16b,<vec_tmp3=reg128#24.16b,<vec_MASKcarry=reg128#16.16b
# asm 2: eor >vec_tmp3=v23.16b,<vec_tmp3=v23.16b,<vec_MASKcarry=v15.16b
eor v23.16b,v23.16b,v15.16b

# qhasm: vec_tmp3 = ~vec_tmp3
# asm 1: mvn  >vec_tmp3=reg128#24.16b,<vec_tmp3=reg128#24.16b
# asm 2: mvn  >vec_tmp3=v23.16b,<vec_tmp3=v23.16b
mvn  v23.16b,v23.16b

# qhasm: vec_tmp4 ^= vec_MASKcarry
# asm 1: eor >vec_tmp4=reg128#25.16b,<vec_tmp4=reg128#25.16b,<vec_MASKcarry=reg128#16.16b
# asm 2: eor >vec_tmp4=v24.16b,<vec_tmp4=v24.16b,<vec_MASKcarry=v15.16b
eor v24.16b,v24.16b,v15.16b

# qhasm: vec_tmp4 = ~vec_tmp4
# asm 1: mvn  >vec_tmp4=reg128#25.16b,<vec_tmp4=reg128#25.16b
# asm 2: mvn  >vec_tmp4=v24.16b,<vec_tmp4=v24.16b
mvn  v24.16b,v24.16b

# qhasm: vec_tmp5 ^= vec_MASKhalfeffect
# asm 1: eor >vec_tmp5=reg128#26.16b,<vec_tmp5=reg128#26.16b,<vec_MASKhalfeffect=reg128#19.16b
# asm 2: eor >vec_tmp5=v25.16b,<vec_tmp5=v25.16b,<vec_MASKhalfeffect=v18.16b
eor v25.16b,v25.16b,v18.16b

# qhasm: 2x vec_tmp1 += vec_ONE
# asm 1: add <vec_tmp1=reg128#22.2d,<vec_tmp1=reg128#22.2d,<vec_ONE=reg128#18.2d
# asm 2: add <vec_tmp1=v21.2d,<vec_tmp1=v21.2d,<vec_ONE=v17.2d
add v21.2d,v21.2d,v17.2d

# qhasm: vec_tmp1 &= vec_uhat_rhat
# asm 1: and >vec_tmp1=reg128#22.16b,<vec_tmp1=reg128#22.16b,<vec_uhat_rhat=reg128#21.16b
# asm 2: and >vec_tmp1=v21.16b,<vec_tmp1=v21.16b,<vec_uhat_rhat=v20.16b
and v21.16b,v21.16b,v20.16b

# qhasm: vec_tmp2 &= vec_uhat_rhat
# asm 1: and >vec_tmp2=reg128#23.16b,<vec_tmp2=reg128#23.16b,<vec_uhat_rhat=reg128#21.16b
# asm 2: and >vec_tmp2=v22.16b,<vec_tmp2=v22.16b,<vec_uhat_rhat=v20.16b
and v22.16b,v22.16b,v20.16b

# qhasm: vec_tmp3 &= vec_uhat_rhat
# asm 1: and >vec_tmp3=reg128#24.16b,<vec_tmp3=reg128#24.16b,<vec_uhat_rhat=reg128#21.16b
# asm 2: and >vec_tmp3=v23.16b,<vec_tmp3=v23.16b,<vec_uhat_rhat=v20.16b
and v23.16b,v23.16b,v20.16b

# qhasm: vec_tmp4 &= vec_uhat_rhat
# asm 1: and >vec_tmp4=reg128#25.16b,<vec_tmp4=reg128#25.16b,<vec_uhat_rhat=reg128#21.16b
# asm 2: and >vec_tmp4=v24.16b,<vec_tmp4=v24.16b,<vec_uhat_rhat=v20.16b
and v24.16b,v24.16b,v20.16b

# qhasm: vec_tmp5 &= vec_uhat_rhat
# asm 1: and >vec_tmp5=reg128#21.16b,<vec_tmp5=reg128#26.16b,<vec_uhat_rhat=reg128#21.16b
# asm 2: and >vec_tmp5=v20.16b,<vec_tmp5=v25.16b,<vec_uhat_rhat=v20.16b
and v20.16b,v25.16b,v20.16b

# qhasm: 2x vec_R2_R3_S2_S3 += vec_tmp1
# asm 1: add <vec_R2_R3_S2_S3=reg128#11.2d,<vec_R2_R3_S2_S3=reg128#11.2d,<vec_tmp1=reg128#22.2d
# asm 2: add <vec_R2_R3_S2_S3=v10.2d,<vec_R2_R3_S2_S3=v10.2d,<vec_tmp1=v21.2d
add v10.2d,v10.2d,v21.2d

# qhasm: 2x vec_R4_R5_S4_S5 += vec_tmp2
# asm 1: add <vec_R4_R5_S4_S5=reg128#12.2d,<vec_R4_R5_S4_S5=reg128#12.2d,<vec_tmp2=reg128#23.2d
# asm 2: add <vec_R4_R5_S4_S5=v11.2d,<vec_R4_R5_S4_S5=v11.2d,<vec_tmp2=v22.2d
add v11.2d,v11.2d,v22.2d

# qhasm: 2x vec_R6_R7_S6_S7 += vec_tmp3
# asm 1: add <vec_R6_R7_S6_S7=reg128#13.2d,<vec_R6_R7_S6_S7=reg128#13.2d,<vec_tmp3=reg128#24.2d
# asm 2: add <vec_R6_R7_S6_S7=v12.2d,<vec_R6_R7_S6_S7=v12.2d,<vec_tmp3=v23.2d
add v12.2d,v12.2d,v23.2d

# qhasm: 2x vec_R8_R9_S8_S9 += vec_tmp4
# asm 1: add <vec_R8_R9_S8_S9=reg128#9.2d,<vec_R8_R9_S8_S9=reg128#9.2d,<vec_tmp4=reg128#25.2d
# asm 2: add <vec_R8_R9_S8_S9=v8.2d,<vec_R8_R9_S8_S9=v8.2d,<vec_tmp4=v24.2d
add v8.2d,v8.2d,v24.2d

# qhasm: 2x vec_R10_0_S10_0 += vec_tmp5
# asm 1: add <vec_R10_0_S10_0=reg128#8.2d,<vec_R10_0_S10_0=reg128#8.2d,<vec_tmp5=reg128#21.2d
# asm 2: add <vec_R10_0_S10_0=v7.2d,<vec_R10_0_S10_0=v7.2d,<vec_tmp5=v20.2d
add v7.2d,v7.2d,v20.2d

# qhasm: 2x vec_tmp1 = vec_F0_F1_G0_G1[1/2]
# asm 1: dup <vec_tmp1=reg128#22.2d,<vec_F0_F1_G0_G1=reg128#1.d[1]
# asm 2: dup <vec_tmp1=v21.2d,<vec_F0_F1_G0_G1=v0.d[1]
dup v21.2d,v0.d[1]

# qhasm: 2x vec_tmp2 = vec_F2_F3_G2_G3[1/2]
# asm 1: dup <vec_tmp2=reg128#23.2d,<vec_F2_F3_G2_G3=reg128#2.d[1]
# asm 2: dup <vec_tmp2=v22.2d,<vec_F2_F3_G2_G3=v1.d[1]
dup v22.2d,v1.d[1]

# qhasm: 2x vec_tmp3 = vec_F4_F5_G4_G5[1/2]
# asm 1: dup <vec_tmp3=reg128#24.2d,<vec_F4_F5_G4_G5=reg128#3.d[1]
# asm 2: dup <vec_tmp3=v23.2d,<vec_F4_F5_G4_G5=v2.d[1]
dup v23.2d,v2.d[1]

# qhasm: 2x vec_tmp4 = vec_F6_F7_G6_G7[1/2]
# asm 1: dup <vec_tmp4=reg128#25.2d,<vec_F6_F7_G6_G7=reg128#4.d[1]
# asm 2: dup <vec_tmp4=v24.2d,<vec_F6_F7_G6_G7=v3.d[1]
dup v24.2d,v3.d[1]

# qhasm: 2x vec_tmp5 = vec_F8_0_G8_0[1/2]
# asm 1: dup <vec_tmp5=reg128#21.2d,<vec_F8_0_G8_0=reg128#5.d[1]
# asm 2: dup <vec_tmp5=v20.2d,<vec_F8_0_G8_0=v4.d[1]
dup v20.2d,v4.d[1]

# qhasm: 2x vec_tmp1 <<= 2
# asm 1: shl >vec_tmp1=reg128#1.2d,<vec_tmp1=reg128#22.2d,#2
# asm 2: shl >vec_tmp1=v0.2d,<vec_tmp1=v21.2d,#2
shl v0.2d,v21.2d,#2

# qhasm: 2x vec_tmp2 <<= 2
# asm 1: shl >vec_tmp2=reg128#2.2d,<vec_tmp2=reg128#23.2d,#2
# asm 2: shl >vec_tmp2=v1.2d,<vec_tmp2=v22.2d,#2
shl v1.2d,v22.2d,#2

# qhasm: 2x vec_tmp3 <<= 2
# asm 1: shl >vec_tmp3=reg128#3.2d,<vec_tmp3=reg128#24.2d,#2
# asm 2: shl >vec_tmp3=v2.2d,<vec_tmp3=v23.2d,#2
shl v2.2d,v23.2d,#2

# qhasm: 2x vec_tmp4 <<= 2
# asm 1: shl >vec_tmp4=reg128#4.2d,<vec_tmp4=reg128#25.2d,#2
# asm 2: shl >vec_tmp4=v3.2d,<vec_tmp4=v24.2d,#2
shl v3.2d,v24.2d,#2

# qhasm: 2x vec_tmp5 <<= 2
# asm 1: shl >vec_tmp5=reg128#21.2d,<vec_tmp5=reg128#21.2d,#2
# asm 2: shl >vec_tmp5=v20.2d,<vec_tmp5=v20.2d,#2
shl v20.2d,v20.2d,#2

# qhasm: vec_carry1 = vec_tmp1 & vec_MASKcarry1
# asm 1: and >vec_carry1=reg128#22.16b,<vec_tmp1=reg128#1.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: and >vec_carry1=v21.16b,<vec_tmp1=v0.16b,<vec_MASKcarry1=v13.16b
and v21.16b,v0.16b,v13.16b

# qhasm: vec_tmp1 = vec_tmp1 & ~vec_MASKcarry1
# asm 1: bic >vec_tmp1=reg128#1.16b,<vec_tmp1=reg128#1.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: bic >vec_tmp1=v0.16b,<vec_tmp1=v0.16b,<vec_MASKcarry1=v13.16b
bic v0.16b,v0.16b,v13.16b

# qhasm: 2x vec_carry1 <<= 2
# asm 1: shl >vec_carry1=reg128#22.2d,<vec_carry1=reg128#22.2d,#2
# asm 2: shl >vec_carry1=v21.2d,<vec_carry1=v21.2d,#2
shl v21.2d,v21.2d,#2

# qhasm: vec_tmp1 |= vec_carry1
# asm 1: orr >vec_tmp1=reg128#1.16b,<vec_tmp1=reg128#1.16b,<vec_carry1=reg128#22.16b
# asm 2: orr >vec_tmp1=v0.16b,<vec_tmp1=v0.16b,<vec_carry1=v21.16b
orr v0.16b,v0.16b,v21.16b

# qhasm: vec_carry2 = vec_tmp1 & vec_MASKcarry2
# asm 1: and >vec_carry2=reg128#22.16b,<vec_tmp1=reg128#1.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: and >vec_carry2=v21.16b,<vec_tmp1=v0.16b,<vec_MASKcarry2=v14.16b
and v21.16b,v0.16b,v14.16b

# qhasm: vec_tmp1 = vec_tmp1 & ~vec_MASKcarry2
# asm 1: bic >vec_tmp1=reg128#1.16b,<vec_tmp1=reg128#1.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: bic >vec_tmp1=v0.16b,<vec_tmp1=v0.16b,<vec_MASKcarry2=v14.16b
bic v0.16b,v0.16b,v14.16b

# qhasm: 2x vec_carry2 unsigned>>= 62
# asm 1: ushr >vec_carry2=reg128#22.2d,<vec_carry2=reg128#22.2d,#62
# asm 2: ushr >vec_carry2=v21.2d,<vec_carry2=v21.2d,#62
ushr v21.2d,v21.2d,#62

# qhasm: vec_tmp2 |= vec_carry2
# asm 1: orr >vec_tmp2=reg128#2.16b,<vec_tmp2=reg128#2.16b,<vec_carry2=reg128#22.16b
# asm 2: orr >vec_tmp2=v1.16b,<vec_tmp2=v1.16b,<vec_carry2=v21.16b
orr v1.16b,v1.16b,v21.16b

# qhasm: vec_carry1 = vec_tmp2 & vec_MASKcarry1
# asm 1: and >vec_carry1=reg128#22.16b,<vec_tmp2=reg128#2.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: and >vec_carry1=v21.16b,<vec_tmp2=v1.16b,<vec_MASKcarry1=v13.16b
and v21.16b,v1.16b,v13.16b

# qhasm: vec_tmp2 = vec_tmp2 & ~vec_MASKcarry1
# asm 1: bic >vec_tmp2=reg128#2.16b,<vec_tmp2=reg128#2.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: bic >vec_tmp2=v1.16b,<vec_tmp2=v1.16b,<vec_MASKcarry1=v13.16b
bic v1.16b,v1.16b,v13.16b

# qhasm: 2x vec_carry1 <<= 2
# asm 1: shl >vec_carry1=reg128#22.2d,<vec_carry1=reg128#22.2d,#2
# asm 2: shl >vec_carry1=v21.2d,<vec_carry1=v21.2d,#2
shl v21.2d,v21.2d,#2

# qhasm: vec_tmp2 |= vec_carry1
# asm 1: orr >vec_tmp2=reg128#2.16b,<vec_tmp2=reg128#2.16b,<vec_carry1=reg128#22.16b
# asm 2: orr >vec_tmp2=v1.16b,<vec_tmp2=v1.16b,<vec_carry1=v21.16b
orr v1.16b,v1.16b,v21.16b

# qhasm: vec_carry2 = vec_tmp2 & vec_MASKcarry2
# asm 1: and >vec_carry2=reg128#22.16b,<vec_tmp2=reg128#2.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: and >vec_carry2=v21.16b,<vec_tmp2=v1.16b,<vec_MASKcarry2=v14.16b
and v21.16b,v1.16b,v14.16b

# qhasm: vec_tmp2 = vec_tmp2 & ~vec_MASKcarry2
# asm 1: bic >vec_tmp2=reg128#2.16b,<vec_tmp2=reg128#2.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: bic >vec_tmp2=v1.16b,<vec_tmp2=v1.16b,<vec_MASKcarry2=v14.16b
bic v1.16b,v1.16b,v14.16b

# qhasm: 2x vec_carry2 unsigned>>= 62
# asm 1: ushr >vec_carry2=reg128#22.2d,<vec_carry2=reg128#22.2d,#62
# asm 2: ushr >vec_carry2=v21.2d,<vec_carry2=v21.2d,#62
ushr v21.2d,v21.2d,#62

# qhasm: vec_tmp3 |= vec_carry2
# asm 1: orr >vec_tmp3=reg128#3.16b,<vec_tmp3=reg128#3.16b,<vec_carry2=reg128#22.16b
# asm 2: orr >vec_tmp3=v2.16b,<vec_tmp3=v2.16b,<vec_carry2=v21.16b
orr v2.16b,v2.16b,v21.16b

# qhasm: vec_carry1 = vec_tmp3 & vec_MASKcarry1
# asm 1: and >vec_carry1=reg128#22.16b,<vec_tmp3=reg128#3.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: and >vec_carry1=v21.16b,<vec_tmp3=v2.16b,<vec_MASKcarry1=v13.16b
and v21.16b,v2.16b,v13.16b

# qhasm: vec_tmp3 = vec_tmp3 & ~vec_MASKcarry1
# asm 1: bic >vec_tmp3=reg128#3.16b,<vec_tmp3=reg128#3.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: bic >vec_tmp3=v2.16b,<vec_tmp3=v2.16b,<vec_MASKcarry1=v13.16b
bic v2.16b,v2.16b,v13.16b

# qhasm: 2x vec_carry1 <<= 2
# asm 1: shl >vec_carry1=reg128#22.2d,<vec_carry1=reg128#22.2d,#2
# asm 2: shl >vec_carry1=v21.2d,<vec_carry1=v21.2d,#2
shl v21.2d,v21.2d,#2

# qhasm: vec_tmp3 |= vec_carry1
# asm 1: orr >vec_tmp3=reg128#3.16b,<vec_tmp3=reg128#3.16b,<vec_carry1=reg128#22.16b
# asm 2: orr >vec_tmp3=v2.16b,<vec_tmp3=v2.16b,<vec_carry1=v21.16b
orr v2.16b,v2.16b,v21.16b

# qhasm: vec_carry2 = vec_tmp3 & vec_MASKcarry2
# asm 1: and >vec_carry2=reg128#22.16b,<vec_tmp3=reg128#3.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: and >vec_carry2=v21.16b,<vec_tmp3=v2.16b,<vec_MASKcarry2=v14.16b
and v21.16b,v2.16b,v14.16b

# qhasm: vec_tmp3 = vec_tmp3 & ~vec_MASKcarry2
# asm 1: bic >vec_tmp3=reg128#3.16b,<vec_tmp3=reg128#3.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: bic >vec_tmp3=v2.16b,<vec_tmp3=v2.16b,<vec_MASKcarry2=v14.16b
bic v2.16b,v2.16b,v14.16b

# qhasm: 2x vec_carry2 unsigned>>= 62
# asm 1: ushr >vec_carry2=reg128#22.2d,<vec_carry2=reg128#22.2d,#62
# asm 2: ushr >vec_carry2=v21.2d,<vec_carry2=v21.2d,#62
ushr v21.2d,v21.2d,#62

# qhasm: vec_tmp4 |= vec_carry2
# asm 1: orr >vec_tmp4=reg128#4.16b,<vec_tmp4=reg128#4.16b,<vec_carry2=reg128#22.16b
# asm 2: orr >vec_tmp4=v3.16b,<vec_tmp4=v3.16b,<vec_carry2=v21.16b
orr v3.16b,v3.16b,v21.16b

# qhasm: vec_carry1 = vec_tmp4 & vec_MASKcarry1
# asm 1: and >vec_carry1=reg128#22.16b,<vec_tmp4=reg128#4.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: and >vec_carry1=v21.16b,<vec_tmp4=v3.16b,<vec_MASKcarry1=v13.16b
and v21.16b,v3.16b,v13.16b

# qhasm: vec_tmp4 = vec_tmp4 & ~vec_MASKcarry1
# asm 1: bic >vec_tmp4=reg128#4.16b,<vec_tmp4=reg128#4.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: bic >vec_tmp4=v3.16b,<vec_tmp4=v3.16b,<vec_MASKcarry1=v13.16b
bic v3.16b,v3.16b,v13.16b

# qhasm: 2x vec_carry1 <<= 2
# asm 1: shl >vec_carry1=reg128#22.2d,<vec_carry1=reg128#22.2d,#2
# asm 2: shl >vec_carry1=v21.2d,<vec_carry1=v21.2d,#2
shl v21.2d,v21.2d,#2

# qhasm: vec_tmp4 |= vec_carry1
# asm 1: orr >vec_tmp4=reg128#4.16b,<vec_tmp4=reg128#4.16b,<vec_carry1=reg128#22.16b
# asm 2: orr >vec_tmp4=v3.16b,<vec_tmp4=v3.16b,<vec_carry1=v21.16b
orr v3.16b,v3.16b,v21.16b

# qhasm: vec_carry2 = vec_tmp4 & vec_MASKcarry2
# asm 1: and >vec_carry2=reg128#22.16b,<vec_tmp4=reg128#4.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: and >vec_carry2=v21.16b,<vec_tmp4=v3.16b,<vec_MASKcarry2=v14.16b
and v21.16b,v3.16b,v14.16b

# qhasm: vec_tmp4 = vec_tmp4 & ~vec_MASKcarry2
# asm 1: bic >vec_tmp4=reg128#4.16b,<vec_tmp4=reg128#4.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: bic >vec_tmp4=v3.16b,<vec_tmp4=v3.16b,<vec_MASKcarry2=v14.16b
bic v3.16b,v3.16b,v14.16b

# qhasm: 2x vec_carry2 unsigned>>= 62
# asm 1: ushr >vec_carry2=reg128#22.2d,<vec_carry2=reg128#22.2d,#62
# asm 2: ushr >vec_carry2=v21.2d,<vec_carry2=v21.2d,#62
ushr v21.2d,v21.2d,#62

# qhasm: vec_tmp5 |= vec_carry2
# asm 1: orr >vec_tmp5=reg128#21.16b,<vec_tmp5=reg128#21.16b,<vec_carry2=reg128#22.16b
# asm 2: orr >vec_tmp5=v20.16b,<vec_tmp5=v20.16b,<vec_carry2=v21.16b
orr v20.16b,v20.16b,v21.16b

# qhasm: vec_tmp1 ^= vec_MASKcarry
# asm 1: eor >vec_tmp1=reg128#1.16b,<vec_tmp1=reg128#1.16b,<vec_MASKcarry=reg128#16.16b
# asm 2: eor >vec_tmp1=v0.16b,<vec_tmp1=v0.16b,<vec_MASKcarry=v15.16b
eor v0.16b,v0.16b,v15.16b

# qhasm: vec_tmp1 = ~vec_tmp1
# asm 1: mvn  >vec_tmp1=reg128#1.16b,<vec_tmp1=reg128#1.16b
# asm 2: mvn  >vec_tmp1=v0.16b,<vec_tmp1=v0.16b
mvn  v0.16b,v0.16b

# qhasm: vec_tmp2 ^= vec_MASKcarry
# asm 1: eor >vec_tmp2=reg128#2.16b,<vec_tmp2=reg128#2.16b,<vec_MASKcarry=reg128#16.16b
# asm 2: eor >vec_tmp2=v1.16b,<vec_tmp2=v1.16b,<vec_MASKcarry=v15.16b
eor v1.16b,v1.16b,v15.16b

# qhasm: vec_tmp2 = ~vec_tmp2
# asm 1: mvn  >vec_tmp2=reg128#2.16b,<vec_tmp2=reg128#2.16b
# asm 2: mvn  >vec_tmp2=v1.16b,<vec_tmp2=v1.16b
mvn  v1.16b,v1.16b

# qhasm: vec_tmp3 ^= vec_MASKcarry
# asm 1: eor >vec_tmp3=reg128#3.16b,<vec_tmp3=reg128#3.16b,<vec_MASKcarry=reg128#16.16b
# asm 2: eor >vec_tmp3=v2.16b,<vec_tmp3=v2.16b,<vec_MASKcarry=v15.16b
eor v2.16b,v2.16b,v15.16b

# qhasm: vec_tmp3 = ~vec_tmp3
# asm 1: mvn  >vec_tmp3=reg128#3.16b,<vec_tmp3=reg128#3.16b
# asm 2: mvn  >vec_tmp3=v2.16b,<vec_tmp3=v2.16b
mvn  v2.16b,v2.16b

# qhasm: vec_tmp4 ^= vec_MASKcarry
# asm 1: eor >vec_tmp4=reg128#4.16b,<vec_tmp4=reg128#4.16b,<vec_MASKcarry=reg128#16.16b
# asm 2: eor >vec_tmp4=v3.16b,<vec_tmp4=v3.16b,<vec_MASKcarry=v15.16b
eor v3.16b,v3.16b,v15.16b

# qhasm: vec_tmp4 = ~vec_tmp4
# asm 1: mvn  >vec_tmp4=reg128#4.16b,<vec_tmp4=reg128#4.16b
# asm 2: mvn  >vec_tmp4=v3.16b,<vec_tmp4=v3.16b
mvn  v3.16b,v3.16b

# qhasm: vec_tmp5 ^= vec_MASKhalfeffect
# asm 1: eor >vec_tmp5=reg128#16.16b,<vec_tmp5=reg128#21.16b,<vec_MASKhalfeffect=reg128#19.16b
# asm 2: eor >vec_tmp5=v15.16b,<vec_tmp5=v20.16b,<vec_MASKhalfeffect=v18.16b
eor v15.16b,v20.16b,v18.16b

# qhasm: 2x vec_tmp1 += vec_ONE
# asm 1: add <vec_tmp1=reg128#1.2d,<vec_tmp1=reg128#1.2d,<vec_ONE=reg128#18.2d
# asm 2: add <vec_tmp1=v0.2d,<vec_tmp1=v0.2d,<vec_ONE=v17.2d
add v0.2d,v0.2d,v17.2d

# qhasm: vec_tmp1 &= vec_vhat_shat
# asm 1: and >vec_tmp1=reg128#1.16b,<vec_tmp1=reg128#1.16b,<vec_vhat_shat=reg128#20.16b
# asm 2: and >vec_tmp1=v0.16b,<vec_tmp1=v0.16b,<vec_vhat_shat=v19.16b
and v0.16b,v0.16b,v19.16b

# qhasm: vec_tmp2 &= vec_vhat_shat
# asm 1: and >vec_tmp2=reg128#2.16b,<vec_tmp2=reg128#2.16b,<vec_vhat_shat=reg128#20.16b
# asm 2: and >vec_tmp2=v1.16b,<vec_tmp2=v1.16b,<vec_vhat_shat=v19.16b
and v1.16b,v1.16b,v19.16b

# qhasm: vec_tmp3 &= vec_vhat_shat
# asm 1: and >vec_tmp3=reg128#3.16b,<vec_tmp3=reg128#3.16b,<vec_vhat_shat=reg128#20.16b
# asm 2: and >vec_tmp3=v2.16b,<vec_tmp3=v2.16b,<vec_vhat_shat=v19.16b
and v2.16b,v2.16b,v19.16b

# qhasm: vec_tmp4 &= vec_vhat_shat
# asm 1: and >vec_tmp4=reg128#4.16b,<vec_tmp4=reg128#4.16b,<vec_vhat_shat=reg128#20.16b
# asm 2: and >vec_tmp4=v3.16b,<vec_tmp4=v3.16b,<vec_vhat_shat=v19.16b
and v3.16b,v3.16b,v19.16b

# qhasm: vec_tmp5 &= vec_vhat_shat
# asm 1: and >vec_tmp5=reg128#16.16b,<vec_tmp5=reg128#16.16b,<vec_vhat_shat=reg128#20.16b
# asm 2: and >vec_tmp5=v15.16b,<vec_tmp5=v15.16b,<vec_vhat_shat=v19.16b
and v15.16b,v15.16b,v19.16b

# qhasm: 2x vec_R2_R3_S2_S3 += vec_tmp1
# asm 1: add <vec_R2_R3_S2_S3=reg128#11.2d,<vec_R2_R3_S2_S3=reg128#11.2d,<vec_tmp1=reg128#1.2d
# asm 2: add <vec_R2_R3_S2_S3=v10.2d,<vec_R2_R3_S2_S3=v10.2d,<vec_tmp1=v0.2d
add v10.2d,v10.2d,v0.2d

# qhasm: 2x vec_R4_R5_S4_S5 += vec_tmp2
# asm 1: add <vec_R4_R5_S4_S5=reg128#12.2d,<vec_R4_R5_S4_S5=reg128#12.2d,<vec_tmp2=reg128#2.2d
# asm 2: add <vec_R4_R5_S4_S5=v11.2d,<vec_R4_R5_S4_S5=v11.2d,<vec_tmp2=v1.2d
add v11.2d,v11.2d,v1.2d

# qhasm: 2x vec_R6_R7_S6_S7 += vec_tmp3
# asm 1: add <vec_R6_R7_S6_S7=reg128#13.2d,<vec_R6_R7_S6_S7=reg128#13.2d,<vec_tmp3=reg128#3.2d
# asm 2: add <vec_R6_R7_S6_S7=v12.2d,<vec_R6_R7_S6_S7=v12.2d,<vec_tmp3=v2.2d
add v12.2d,v12.2d,v2.2d

# qhasm: 2x vec_R8_R9_S8_S9 += vec_tmp4
# asm 1: add <vec_R8_R9_S8_S9=reg128#9.2d,<vec_R8_R9_S8_S9=reg128#9.2d,<vec_tmp4=reg128#4.2d
# asm 2: add <vec_R8_R9_S8_S9=v8.2d,<vec_R8_R9_S8_S9=v8.2d,<vec_tmp4=v3.2d
add v8.2d,v8.2d,v3.2d

# qhasm: 2x vec_R10_0_S10_0 += vec_tmp5
# asm 1: add <vec_R10_0_S10_0=reg128#8.2d,<vec_R10_0_S10_0=reg128#8.2d,<vec_tmp5=reg128#16.2d
# asm 2: add <vec_R10_0_S10_0=v7.2d,<vec_R10_0_S10_0=v7.2d,<vec_tmp5=v15.2d
add v7.2d,v7.2d,v15.2d

# qhasm: vec_carry1 = vec_R2_R3_S2_S3 & vec_MASKcarry1
# asm 1: and >vec_carry1=reg128#1.16b,<vec_R2_R3_S2_S3=reg128#11.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: and >vec_carry1=v0.16b,<vec_R2_R3_S2_S3=v10.16b,<vec_MASKcarry1=v13.16b
and v0.16b,v10.16b,v13.16b

# qhasm: vec_R2_R3_S2_S3 = vec_R2_R3_S2_S3 & ~vec_MASKcarry1
# asm 1: bic >vec_R2_R3_S2_S3=reg128#2.16b,<vec_R2_R3_S2_S3=reg128#11.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: bic >vec_R2_R3_S2_S3=v1.16b,<vec_R2_R3_S2_S3=v10.16b,<vec_MASKcarry1=v13.16b
bic v1.16b,v10.16b,v13.16b

# qhasm: 2x vec_carry1 <<= 2
# asm 1: shl >vec_carry1=reg128#1.2d,<vec_carry1=reg128#1.2d,#2
# asm 2: shl >vec_carry1=v0.2d,<vec_carry1=v0.2d,#2
shl v0.2d,v0.2d,#2

# qhasm: 2x vec_R2_R3_S2_S3 += vec_carry1
# asm 1: add <vec_R2_R3_S2_S3=reg128#2.2d,<vec_R2_R3_S2_S3=reg128#2.2d,<vec_carry1=reg128#1.2d
# asm 2: add <vec_R2_R3_S2_S3=v1.2d,<vec_R2_R3_S2_S3=v1.2d,<vec_carry1=v0.2d
add v1.2d,v1.2d,v0.2d

# qhasm: vec_carry2 = vec_R2_R3_S2_S3 & vec_MASKcarry2
# asm 1: and >vec_carry2=reg128#1.16b,<vec_R2_R3_S2_S3=reg128#2.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: and >vec_carry2=v0.16b,<vec_R2_R3_S2_S3=v1.16b,<vec_MASKcarry2=v14.16b
and v0.16b,v1.16b,v14.16b

# qhasm: vec_R2_R3_S2_S3 = vec_R2_R3_S2_S3 & ~vec_MASKcarry2
# asm 1: bic >vec_R2_R3_S2_S3=reg128#2.16b,<vec_R2_R3_S2_S3=reg128#2.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: bic >vec_R2_R3_S2_S3=v1.16b,<vec_R2_R3_S2_S3=v1.16b,<vec_MASKcarry2=v14.16b
bic v1.16b,v1.16b,v14.16b

# qhasm: 2x vec_carry2 unsigned>>= 62
# asm 1: ushr >vec_carry2=reg128#1.2d,<vec_carry2=reg128#1.2d,#62
# asm 2: ushr >vec_carry2=v0.2d,<vec_carry2=v0.2d,#62
ushr v0.2d,v0.2d,#62

# qhasm: 2x vec_R4_R5_S4_S5 += vec_carry2
# asm 1: add <vec_R4_R5_S4_S5=reg128#12.2d,<vec_R4_R5_S4_S5=reg128#12.2d,<vec_carry2=reg128#1.2d
# asm 2: add <vec_R4_R5_S4_S5=v11.2d,<vec_R4_R5_S4_S5=v11.2d,<vec_carry2=v0.2d
add v11.2d,v11.2d,v0.2d

# qhasm: vec_carry1 = vec_R4_R5_S4_S5 & vec_MASKcarry1
# asm 1: and >vec_carry1=reg128#1.16b,<vec_R4_R5_S4_S5=reg128#12.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: and >vec_carry1=v0.16b,<vec_R4_R5_S4_S5=v11.16b,<vec_MASKcarry1=v13.16b
and v0.16b,v11.16b,v13.16b

# qhasm: vec_R4_R5_S4_S5 = vec_R4_R5_S4_S5 & ~vec_MASKcarry1
# asm 1: bic >vec_R4_R5_S4_S5=reg128#3.16b,<vec_R4_R5_S4_S5=reg128#12.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: bic >vec_R4_R5_S4_S5=v2.16b,<vec_R4_R5_S4_S5=v11.16b,<vec_MASKcarry1=v13.16b
bic v2.16b,v11.16b,v13.16b

# qhasm: 2x vec_carry1 <<= 2
# asm 1: shl >vec_carry1=reg128#1.2d,<vec_carry1=reg128#1.2d,#2
# asm 2: shl >vec_carry1=v0.2d,<vec_carry1=v0.2d,#2
shl v0.2d,v0.2d,#2

# qhasm: 2x vec_R4_R5_S4_S5 += vec_carry1
# asm 1: add <vec_R4_R5_S4_S5=reg128#3.2d,<vec_R4_R5_S4_S5=reg128#3.2d,<vec_carry1=reg128#1.2d
# asm 2: add <vec_R4_R5_S4_S5=v2.2d,<vec_R4_R5_S4_S5=v2.2d,<vec_carry1=v0.2d
add v2.2d,v2.2d,v0.2d

# qhasm: vec_carry2 = vec_R4_R5_S4_S5 & vec_MASKcarry2
# asm 1: and >vec_carry2=reg128#1.16b,<vec_R4_R5_S4_S5=reg128#3.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: and >vec_carry2=v0.16b,<vec_R4_R5_S4_S5=v2.16b,<vec_MASKcarry2=v14.16b
and v0.16b,v2.16b,v14.16b

# qhasm: vec_R4_R5_S4_S5 = vec_R4_R5_S4_S5 & ~vec_MASKcarry2
# asm 1: bic >vec_R4_R5_S4_S5=reg128#3.16b,<vec_R4_R5_S4_S5=reg128#3.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: bic >vec_R4_R5_S4_S5=v2.16b,<vec_R4_R5_S4_S5=v2.16b,<vec_MASKcarry2=v14.16b
bic v2.16b,v2.16b,v14.16b

# qhasm: 2x vec_carry2 unsigned>>= 62
# asm 1: ushr >vec_carry2=reg128#1.2d,<vec_carry2=reg128#1.2d,#62
# asm 2: ushr >vec_carry2=v0.2d,<vec_carry2=v0.2d,#62
ushr v0.2d,v0.2d,#62

# qhasm: 2x vec_R6_R7_S6_S7 += vec_carry2
# asm 1: add <vec_R6_R7_S6_S7=reg128#13.2d,<vec_R6_R7_S6_S7=reg128#13.2d,<vec_carry2=reg128#1.2d
# asm 2: add <vec_R6_R7_S6_S7=v12.2d,<vec_R6_R7_S6_S7=v12.2d,<vec_carry2=v0.2d
add v12.2d,v12.2d,v0.2d

# qhasm: vec_carry1 = vec_R6_R7_S6_S7 & vec_MASKcarry1
# asm 1: and >vec_carry1=reg128#1.16b,<vec_R6_R7_S6_S7=reg128#13.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: and >vec_carry1=v0.16b,<vec_R6_R7_S6_S7=v12.16b,<vec_MASKcarry1=v13.16b
and v0.16b,v12.16b,v13.16b

# qhasm: vec_R6_R7_S6_S7 = vec_R6_R7_S6_S7 & ~vec_MASKcarry1
# asm 1: bic >vec_R6_R7_S6_S7=reg128#4.16b,<vec_R6_R7_S6_S7=reg128#13.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: bic >vec_R6_R7_S6_S7=v3.16b,<vec_R6_R7_S6_S7=v12.16b,<vec_MASKcarry1=v13.16b
bic v3.16b,v12.16b,v13.16b

# qhasm: 2x vec_carry1 <<= 2
# asm 1: shl >vec_carry1=reg128#1.2d,<vec_carry1=reg128#1.2d,#2
# asm 2: shl >vec_carry1=v0.2d,<vec_carry1=v0.2d,#2
shl v0.2d,v0.2d,#2

# qhasm: 2x vec_R6_R7_S6_S7 += vec_carry1
# asm 1: add <vec_R6_R7_S6_S7=reg128#4.2d,<vec_R6_R7_S6_S7=reg128#4.2d,<vec_carry1=reg128#1.2d
# asm 2: add <vec_R6_R7_S6_S7=v3.2d,<vec_R6_R7_S6_S7=v3.2d,<vec_carry1=v0.2d
add v3.2d,v3.2d,v0.2d

# qhasm: vec_carry2 = vec_R6_R7_S6_S7 & vec_MASKcarry2
# asm 1: and >vec_carry2=reg128#1.16b,<vec_R6_R7_S6_S7=reg128#4.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: and >vec_carry2=v0.16b,<vec_R6_R7_S6_S7=v3.16b,<vec_MASKcarry2=v14.16b
and v0.16b,v3.16b,v14.16b

# qhasm: vec_R6_R7_S6_S7 = vec_R6_R7_S6_S7 & ~vec_MASKcarry2
# asm 1: bic >vec_R6_R7_S6_S7=reg128#4.16b,<vec_R6_R7_S6_S7=reg128#4.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: bic >vec_R6_R7_S6_S7=v3.16b,<vec_R6_R7_S6_S7=v3.16b,<vec_MASKcarry2=v14.16b
bic v3.16b,v3.16b,v14.16b

# qhasm: 2x vec_carry2 unsigned>>= 62
# asm 1: ushr >vec_carry2=reg128#1.2d,<vec_carry2=reg128#1.2d,#62
# asm 2: ushr >vec_carry2=v0.2d,<vec_carry2=v0.2d,#62
ushr v0.2d,v0.2d,#62

# qhasm: 2x vec_R8_R9_S8_S9 += vec_carry2
# asm 1: add <vec_R8_R9_S8_S9=reg128#9.2d,<vec_R8_R9_S8_S9=reg128#9.2d,<vec_carry2=reg128#1.2d
# asm 2: add <vec_R8_R9_S8_S9=v8.2d,<vec_R8_R9_S8_S9=v8.2d,<vec_carry2=v0.2d
add v8.2d,v8.2d,v0.2d

# qhasm: vec_carry1 = vec_R8_R9_S8_S9 & vec_MASKcarry1
# asm 1: and >vec_carry1=reg128#1.16b,<vec_R8_R9_S8_S9=reg128#9.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: and >vec_carry1=v0.16b,<vec_R8_R9_S8_S9=v8.16b,<vec_MASKcarry1=v13.16b
and v0.16b,v8.16b,v13.16b

# qhasm: vec_R8_R9_S8_S9 = vec_R8_R9_S8_S9 & ~vec_MASKcarry1
# asm 1: bic >vec_R8_R9_S8_S9=reg128#9.16b,<vec_R8_R9_S8_S9=reg128#9.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: bic >vec_R8_R9_S8_S9=v8.16b,<vec_R8_R9_S8_S9=v8.16b,<vec_MASKcarry1=v13.16b
bic v8.16b,v8.16b,v13.16b

# qhasm: 2x vec_carry1 <<= 2
# asm 1: shl >vec_carry1=reg128#1.2d,<vec_carry1=reg128#1.2d,#2
# asm 2: shl >vec_carry1=v0.2d,<vec_carry1=v0.2d,#2
shl v0.2d,v0.2d,#2

# qhasm: 2x vec_R8_R9_S8_S9 += vec_carry1
# asm 1: add <vec_R8_R9_S8_S9=reg128#9.2d,<vec_R8_R9_S8_S9=reg128#9.2d,<vec_carry1=reg128#1.2d
# asm 2: add <vec_R8_R9_S8_S9=v8.2d,<vec_R8_R9_S8_S9=v8.2d,<vec_carry1=v0.2d
add v8.2d,v8.2d,v0.2d

# qhasm: vec_carry2 = vec_R8_R9_S8_S9 & vec_MASKcarry2
# asm 1: and >vec_carry2=reg128#1.16b,<vec_R8_R9_S8_S9=reg128#9.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: and >vec_carry2=v0.16b,<vec_R8_R9_S8_S9=v8.16b,<vec_MASKcarry2=v14.16b
and v0.16b,v8.16b,v14.16b

# qhasm: vec_R8_R9_S8_S9 = vec_R8_R9_S8_S9 & ~vec_MASKcarry2
# asm 1: bic >vec_R8_R9_S8_S9=reg128#9.16b,<vec_R8_R9_S8_S9=reg128#9.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: bic >vec_R8_R9_S8_S9=v8.16b,<vec_R8_R9_S8_S9=v8.16b,<vec_MASKcarry2=v14.16b
bic v8.16b,v8.16b,v14.16b

# qhasm: 2x vec_carry2 unsigned>>= 62
# asm 1: ushr >vec_carry2=reg128#1.2d,<vec_carry2=reg128#1.2d,#62
# asm 2: ushr >vec_carry2=v0.2d,<vec_carry2=v0.2d,#62
ushr v0.2d,v0.2d,#62

# qhasm: 2x vec_R10_0_S10_0 += vec_carry2
# asm 1: add <vec_R10_0_S10_0=reg128#8.2d,<vec_R10_0_S10_0=reg128#8.2d,<vec_carry2=reg128#1.2d
# asm 2: add <vec_R10_0_S10_0=v7.2d,<vec_R10_0_S10_0=v7.2d,<vec_carry2=v0.2d
add v7.2d,v7.2d,v0.2d

# qhasm: 4x vec_Fhat_0_Ghat_0 = vec_F8_0_G8_0 >> 31
# asm 1: sshr >vec_Fhat_0_Ghat_0=reg128#1.4s,<vec_F8_0_G8_0=reg128#5.4s,#31
# asm 2: sshr >vec_Fhat_0_Ghat_0=v0.4s,<vec_F8_0_G8_0=v4.4s,#31
sshr v0.4s,v4.4s,#31

# qhasm: 4x vec_Fhat = vec_Fhat_0_Ghat_0[0/4]
# asm 1: dup <vec_Fhat=reg128#5.4s,<vec_Fhat_0_Ghat_0=reg128#1.s[0]
# asm 2: dup <vec_Fhat=v4.4s,<vec_Fhat_0_Ghat_0=v0.s[0]
dup v4.4s,v0.s[0]

# qhasm: 4x vec_Ghat = vec_Fhat_0_Ghat_0[2/4]
# asm 1: dup <vec_Ghat=reg128#11.4s,<vec_Fhat_0_Ghat_0=reg128#1.s[2]
# asm 2: dup <vec_Ghat=v10.4s,<vec_Fhat_0_Ghat_0=v0.s[2]
dup v10.4s,v0.s[2]

# qhasm: 4x vec_tmp1 = vec_u0_r0_v0_s0[0/4] vec_u1_r1_v1_s1[0/4] vec_u0_r0_v0_s0[1/4] vec_u1_r1_v1_s1[1/4]
# asm 1: zip1 >vec_tmp1=reg128#1.4s,<vec_u0_r0_v0_s0=reg128#6.4s,<vec_u1_r1_v1_s1=reg128#7.4s
# asm 2: zip1 >vec_tmp1=v0.4s,<vec_u0_r0_v0_s0=v5.4s,<vec_u1_r1_v1_s1=v6.4s
zip1 v0.4s,v5.4s,v6.4s

# qhasm: 2x vec_tmp1 <<= 2
# asm 1: shl >vec_tmp1=reg128#1.2d,<vec_tmp1=reg128#1.2d,#2
# asm 2: shl >vec_tmp1=v0.2d,<vec_tmp1=v0.2d,#2
shl v0.2d,v0.2d,#2

# qhasm: vec_carry1 = vec_tmp1 & vec_MASKcarry1
# asm 1: and >vec_carry1=reg128#12.16b,<vec_tmp1=reg128#1.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: and >vec_carry1=v11.16b,<vec_tmp1=v0.16b,<vec_MASKcarry1=v13.16b
and v11.16b,v0.16b,v13.16b

# qhasm: vec_tmp1 = vec_tmp1 & ~vec_MASKcarry1
# asm 1: bic >vec_tmp1=reg128#1.16b,<vec_tmp1=reg128#1.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: bic >vec_tmp1=v0.16b,<vec_tmp1=v0.16b,<vec_MASKcarry1=v13.16b
bic v0.16b,v0.16b,v13.16b

# qhasm: 2x vec_carry1 <<= 2
# asm 1: shl >vec_carry1=reg128#12.2d,<vec_carry1=reg128#12.2d,#2
# asm 2: shl >vec_carry1=v11.2d,<vec_carry1=v11.2d,#2
shl v11.2d,v11.2d,#2

# qhasm: vec_tmp1 |= vec_carry1
# asm 1: orr >vec_tmp1=reg128#1.16b,<vec_tmp1=reg128#1.16b,<vec_carry1=reg128#12.16b
# asm 2: orr >vec_tmp1=v0.16b,<vec_tmp1=v0.16b,<vec_carry1=v11.16b
orr v0.16b,v0.16b,v11.16b

# qhasm: vec_tmp1 ^= vec_MASKcarry1
# asm 1: eor >vec_tmp1=reg128#1.16b,<vec_tmp1=reg128#1.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: eor >vec_tmp1=v0.16b,<vec_tmp1=v0.16b,<vec_MASKcarry1=v13.16b
eor v0.16b,v0.16b,v13.16b

# qhasm: vec_tmp1 = ~vec_tmp1
# asm 1: mvn  >vec_tmp1=reg128#1.16b,<vec_tmp1=reg128#1.16b
# asm 2: mvn  >vec_tmp1=v0.16b,<vec_tmp1=v0.16b
mvn  v0.16b,v0.16b

# qhasm: 2x vec_tmp1 += vec_ONE
# asm 1: add <vec_tmp1=reg128#1.2d,<vec_tmp1=reg128#1.2d,<vec_ONE=reg128#18.2d
# asm 2: add <vec_tmp1=v0.2d,<vec_tmp1=v0.2d,<vec_ONE=v17.2d
add v0.2d,v0.2d,v17.2d

# qhasm: vec_tmp1 &= vec_Fhat
# asm 1: and >vec_tmp1=reg128#1.16b,<vec_tmp1=reg128#1.16b,<vec_Fhat=reg128#5.16b
# asm 2: and >vec_tmp1=v0.16b,<vec_tmp1=v0.16b,<vec_Fhat=v4.16b
and v0.16b,v0.16b,v4.16b

# qhasm: 2x vec_tmp2 = vec_tmp1 << 32
# asm 1: shl >vec_tmp2=reg128#5.2d,<vec_tmp1=reg128#1.2d,#32
# asm 2: shl >vec_tmp2=v4.2d,<vec_tmp1=v0.2d,#32
shl v4.2d,v0.2d,#32

# qhasm: 2x vec_tmp3 = vec_tmp1 unsigned>> 32
# asm 1: ushr >vec_tmp3=reg128#1.2d,<vec_tmp1=reg128#1.2d,#32
# asm 2: ushr >vec_tmp3=v0.2d,<vec_tmp1=v0.2d,#32
ushr v0.2d,v0.2d,#32

# qhasm: 2x vec_R8_R9_S8_S9 += vec_tmp2
# asm 1: add <vec_R8_R9_S8_S9=reg128#9.2d,<vec_R8_R9_S8_S9=reg128#9.2d,<vec_tmp2=reg128#5.2d
# asm 2: add <vec_R8_R9_S8_S9=v8.2d,<vec_R8_R9_S8_S9=v8.2d,<vec_tmp2=v4.2d
add v8.2d,v8.2d,v4.2d

# qhasm: 2x vec_R10_0_S10_0 += vec_tmp3
# asm 1: add <vec_R10_0_S10_0=reg128#8.2d,<vec_R10_0_S10_0=reg128#8.2d,<vec_tmp3=reg128#1.2d
# asm 2: add <vec_R10_0_S10_0=v7.2d,<vec_R10_0_S10_0=v7.2d,<vec_tmp3=v0.2d
add v7.2d,v7.2d,v0.2d

# qhasm: 4x vec_tmp1 = vec_u0_r0_v0_s0[2/4] vec_u1_r1_v1_s1[2/4] vec_u0_r0_v0_s0[3/4] vec_u1_r1_v1_s1[3/4]
# asm 1: zip2 >vec_tmp1=reg128#1.4s,<vec_u0_r0_v0_s0=reg128#6.4s,<vec_u1_r1_v1_s1=reg128#7.4s
# asm 2: zip2 >vec_tmp1=v0.4s,<vec_u0_r0_v0_s0=v5.4s,<vec_u1_r1_v1_s1=v6.4s
zip2 v0.4s,v5.4s,v6.4s

# qhasm: 2x vec_tmp1 <<= 2
# asm 1: shl >vec_tmp1=reg128#1.2d,<vec_tmp1=reg128#1.2d,#2
# asm 2: shl >vec_tmp1=v0.2d,<vec_tmp1=v0.2d,#2
shl v0.2d,v0.2d,#2

# qhasm: vec_carry1 = vec_tmp1 & vec_MASKcarry1
# asm 1: and >vec_carry1=reg128#5.16b,<vec_tmp1=reg128#1.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: and >vec_carry1=v4.16b,<vec_tmp1=v0.16b,<vec_MASKcarry1=v13.16b
and v4.16b,v0.16b,v13.16b

# qhasm: vec_tmp1 = vec_tmp1 & ~vec_MASKcarry1
# asm 1: bic >vec_tmp1=reg128#1.16b,<vec_tmp1=reg128#1.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: bic >vec_tmp1=v0.16b,<vec_tmp1=v0.16b,<vec_MASKcarry1=v13.16b
bic v0.16b,v0.16b,v13.16b

# qhasm: 2x vec_carry1 <<= 2
# asm 1: shl >vec_carry1=reg128#5.2d,<vec_carry1=reg128#5.2d,#2
# asm 2: shl >vec_carry1=v4.2d,<vec_carry1=v4.2d,#2
shl v4.2d,v4.2d,#2

# qhasm: vec_tmp1 |= vec_carry1
# asm 1: orr >vec_tmp1=reg128#1.16b,<vec_tmp1=reg128#1.16b,<vec_carry1=reg128#5.16b
# asm 2: orr >vec_tmp1=v0.16b,<vec_tmp1=v0.16b,<vec_carry1=v4.16b
orr v0.16b,v0.16b,v4.16b

# qhasm: vec_tmp1 ^= vec_MASKcarry1
# asm 1: eor >vec_tmp1=reg128#1.16b,<vec_tmp1=reg128#1.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: eor >vec_tmp1=v0.16b,<vec_tmp1=v0.16b,<vec_MASKcarry1=v13.16b
eor v0.16b,v0.16b,v13.16b

# qhasm: vec_tmp1 = ~vec_tmp1
# asm 1: mvn  >vec_tmp1=reg128#1.16b,<vec_tmp1=reg128#1.16b
# asm 2: mvn  >vec_tmp1=v0.16b,<vec_tmp1=v0.16b
mvn  v0.16b,v0.16b

# qhasm: 2x vec_tmp1 += vec_ONE
# asm 1: add <vec_tmp1=reg128#1.2d,<vec_tmp1=reg128#1.2d,<vec_ONE=reg128#18.2d
# asm 2: add <vec_tmp1=v0.2d,<vec_tmp1=v0.2d,<vec_ONE=v17.2d
add v0.2d,v0.2d,v17.2d

# qhasm: vec_tmp1 &= vec_Ghat
# asm 1: and >vec_tmp1=reg128#1.16b,<vec_tmp1=reg128#1.16b,<vec_Ghat=reg128#11.16b
# asm 2: and >vec_tmp1=v0.16b,<vec_tmp1=v0.16b,<vec_Ghat=v10.16b
and v0.16b,v0.16b,v10.16b

# qhasm: vec_tmp1 &= vec_Ghat
# asm 1: and >vec_tmp1=reg128#1.16b,<vec_tmp1=reg128#1.16b,<vec_Ghat=reg128#11.16b
# asm 2: and >vec_tmp1=v0.16b,<vec_tmp1=v0.16b,<vec_Ghat=v10.16b
and v0.16b,v0.16b,v10.16b

# qhasm: 2x vec_tmp2 = vec_tmp1 << 32
# asm 1: shl >vec_tmp2=reg128#5.2d,<vec_tmp1=reg128#1.2d,#32
# asm 2: shl >vec_tmp2=v4.2d,<vec_tmp1=v0.2d,#32
shl v4.2d,v0.2d,#32

# qhasm: 2x vec_tmp3 = vec_tmp1 unsigned>> 32
# asm 1: ushr >vec_tmp3=reg128#1.2d,<vec_tmp1=reg128#1.2d,#32
# asm 2: ushr >vec_tmp3=v0.2d,<vec_tmp1=v0.2d,#32
ushr v0.2d,v0.2d,#32

# qhasm: 2x vec_R8_R9_S8_S9 += vec_tmp2
# asm 1: add <vec_R8_R9_S8_S9=reg128#9.2d,<vec_R8_R9_S8_S9=reg128#9.2d,<vec_tmp2=reg128#5.2d
# asm 2: add <vec_R8_R9_S8_S9=v8.2d,<vec_R8_R9_S8_S9=v8.2d,<vec_tmp2=v4.2d
add v8.2d,v8.2d,v4.2d

# qhasm: 2x vec_R10_0_S10_0 += vec_tmp3
# asm 1: add <vec_R10_0_S10_0=reg128#8.2d,<vec_R10_0_S10_0=reg128#8.2d,<vec_tmp3=reg128#1.2d
# asm 2: add <vec_R10_0_S10_0=v7.2d,<vec_R10_0_S10_0=v7.2d,<vec_tmp3=v0.2d
add v7.2d,v7.2d,v0.2d

# qhasm: vec_carry1 = vec_R8_R9_S8_S9 & vec_MASKcarry1
# asm 1: and >vec_carry1=reg128#1.16b,<vec_R8_R9_S8_S9=reg128#9.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: and >vec_carry1=v0.16b,<vec_R8_R9_S8_S9=v8.16b,<vec_MASKcarry1=v13.16b
and v0.16b,v8.16b,v13.16b

# qhasm: vec_R8_R9_S8_S9 = vec_R8_R9_S8_S9 & ~vec_MASKcarry1
# asm 1: bic >vec_R8_R9_S8_S9=reg128#5.16b,<vec_R8_R9_S8_S9=reg128#9.16b,<vec_MASKcarry1=reg128#14.16b
# asm 2: bic >vec_R8_R9_S8_S9=v4.16b,<vec_R8_R9_S8_S9=v8.16b,<vec_MASKcarry1=v13.16b
bic v4.16b,v8.16b,v13.16b

# qhasm: 2x vec_carry1 <<= 2
# asm 1: shl >vec_carry1=reg128#1.2d,<vec_carry1=reg128#1.2d,#2
# asm 2: shl >vec_carry1=v0.2d,<vec_carry1=v0.2d,#2
shl v0.2d,v0.2d,#2

# qhasm: 2x vec_R8_R9_S8_S9 += vec_carry1
# asm 1: add <vec_R8_R9_S8_S9=reg128#5.2d,<vec_R8_R9_S8_S9=reg128#5.2d,<vec_carry1=reg128#1.2d
# asm 2: add <vec_R8_R9_S8_S9=v4.2d,<vec_R8_R9_S8_S9=v4.2d,<vec_carry1=v0.2d
add v4.2d,v4.2d,v0.2d

# qhasm: vec_carry2 = vec_R8_R9_S8_S9 & vec_MASKcarry2
# asm 1: and >vec_carry2=reg128#1.16b,<vec_R8_R9_S8_S9=reg128#5.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: and >vec_carry2=v0.16b,<vec_R8_R9_S8_S9=v4.16b,<vec_MASKcarry2=v14.16b
and v0.16b,v4.16b,v14.16b

# qhasm: vec_R8_R9_S8_S9 = vec_R8_R9_S8_S9 & ~vec_MASKcarry2
# asm 1: bic >vec_R8_R9_S8_S9=reg128#5.16b,<vec_R8_R9_S8_S9=reg128#5.16b,<vec_MASKcarry2=reg128#15.16b
# asm 2: bic >vec_R8_R9_S8_S9=v4.16b,<vec_R8_R9_S8_S9=v4.16b,<vec_MASKcarry2=v14.16b
bic v4.16b,v4.16b,v14.16b

# qhasm: 2x vec_carry2 unsigned>>= 62
# asm 1: ushr >vec_carry2=reg128#1.2d,<vec_carry2=reg128#1.2d,#62
# asm 2: ushr >vec_carry2=v0.2d,<vec_carry2=v0.2d,#62
ushr v0.2d,v0.2d,#62

# qhasm: 2x vec_R10_0_S10_0 += vec_carry2
# asm 1: add <vec_R10_0_S10_0=reg128#8.2d,<vec_R10_0_S10_0=reg128#8.2d,<vec_carry2=reg128#1.2d
# asm 2: add <vec_R10_0_S10_0=v7.2d,<vec_R10_0_S10_0=v7.2d,<vec_carry2=v0.2d
add v7.2d,v7.2d,v0.2d

# qhasm: R0R1 = vec_R0_R1_S0_S1[0/2]
# asm 1: umov >R0R1=int64#3,<vec_R0_R1_S0_S1=reg128#10.d[0]
# asm 2: umov >R0R1=x2,<vec_R0_R1_S0_S1=v9.d[0]
umov x2,v9.d[0]

# qhasm: S0S1 = vec_R0_R1_S0_S1[1/2]
# asm 1: umov >S0S1=int64#4,<vec_R0_R1_S0_S1=reg128#10.d[1]
# asm 2: umov >S0S1=x3,<vec_R0_R1_S0_S1=v9.d[1]
umov x3,v9.d[1]

# qhasm: mem64[pointerR+0] = R0R1
# asm 1: str <R0R1=int64#3,[<pointerR=int64#1,#0]
# asm 2: str <R0R1=x2,[<pointerR=x0,#0]
str x2,[x0,#0]

# qhasm: mem64[pointerS+0] = S0S1
# asm 1: str <S0S1=int64#4,[<pointerS=int64#2,#0]
# asm 2: str <S0S1=x3,[<pointerS=x1,#0]
str x3,[x1,#0]

# qhasm: R2R3 = vec_R2_R3_S2_S3[0/2]
# asm 1: umov >R2R3=int64#3,<vec_R2_R3_S2_S3=reg128#2.d[0]
# asm 2: umov >R2R3=x2,<vec_R2_R3_S2_S3=v1.d[0]
umov x2,v1.d[0]

# qhasm: S2S3 = vec_R2_R3_S2_S3[1/2]
# asm 1: umov >S2S3=int64#4,<vec_R2_R3_S2_S3=reg128#2.d[1]
# asm 2: umov >S2S3=x3,<vec_R2_R3_S2_S3=v1.d[1]
umov x3,v1.d[1]

# qhasm: mem64[pointerR+8] = R2R3
# asm 1: str <R2R3=int64#3,[<pointerR=int64#1,#8]
# asm 2: str <R2R3=x2,[<pointerR=x0,#8]
str x2,[x0,#8]

# qhasm: mem64[pointerS+8] = S2S3
# asm 1: str <S2S3=int64#4,[<pointerS=int64#2,#8]
# asm 2: str <S2S3=x3,[<pointerS=x1,#8]
str x3,[x1,#8]

# qhasm: R4R5 = vec_R4_R5_S4_S5[0/2]
# asm 1: umov >R4R5=int64#3,<vec_R4_R5_S4_S5=reg128#3.d[0]
# asm 2: umov >R4R5=x2,<vec_R4_R5_S4_S5=v2.d[0]
umov x2,v2.d[0]

# qhasm: S4S5 = vec_R4_R5_S4_S5[1/2]
# asm 1: umov >S4S5=int64#4,<vec_R4_R5_S4_S5=reg128#3.d[1]
# asm 2: umov >S4S5=x3,<vec_R4_R5_S4_S5=v2.d[1]
umov x3,v2.d[1]

# qhasm: mem64[pointerR+16] = R4R5
# asm 1: str <R4R5=int64#3,[<pointerR=int64#1,#16]
# asm 2: str <R4R5=x2,[<pointerR=x0,#16]
str x2,[x0,#16]

# qhasm: mem64[pointerS+16] = S4S5
# asm 1: str <S4S5=int64#4,[<pointerS=int64#2,#16]
# asm 2: str <S4S5=x3,[<pointerS=x1,#16]
str x3,[x1,#16]

# qhasm: R6R7 = vec_R6_R7_S6_S7[0/2]
# asm 1: umov >R6R7=int64#3,<vec_R6_R7_S6_S7=reg128#4.d[0]
# asm 2: umov >R6R7=x2,<vec_R6_R7_S6_S7=v3.d[0]
umov x2,v3.d[0]

# qhasm: S6S7 = vec_R6_R7_S6_S7[1/2]
# asm 1: umov >S6S7=int64#4,<vec_R6_R7_S6_S7=reg128#4.d[1]
# asm 2: umov >S6S7=x3,<vec_R6_R7_S6_S7=v3.d[1]
umov x3,v3.d[1]

# qhasm: mem64[pointerR+24] = R6R7
# asm 1: str <R6R7=int64#3,[<pointerR=int64#1,#24]
# asm 2: str <R6R7=x2,[<pointerR=x0,#24]
str x2,[x0,#24]

# qhasm: mem64[pointerS+24] = S6S7
# asm 1: str <S6S7=int64#4,[<pointerS=int64#2,#24]
# asm 2: str <S6S7=x3,[<pointerS=x1,#24]
str x3,[x1,#24]

# qhasm: R8R9 = vec_R8_R9_S8_S9[0/2]
# asm 1: umov >R8R9=int64#3,<vec_R8_R9_S8_S9=reg128#5.d[0]
# asm 2: umov >R8R9=x2,<vec_R8_R9_S8_S9=v4.d[0]
umov x2,v4.d[0]

# qhasm: S8S9 = vec_R8_R9_S8_S9[1/2]
# asm 1: umov >S8S9=int64#4,<vec_R8_R9_S8_S9=reg128#5.d[1]
# asm 2: umov >S8S9=x3,<vec_R8_R9_S8_S9=v4.d[1]
umov x3,v4.d[1]

# qhasm: mem64[pointerR+32] = R8R9
# asm 1: str <R8R9=int64#3,[<pointerR=int64#1,#32]
# asm 2: str <R8R9=x2,[<pointerR=x0,#32]
str x2,[x0,#32]

# qhasm: mem64[pointerS+32] = S8S9
# asm 1: str <S8S9=int64#4,[<pointerS=int64#2,#32]
# asm 2: str <S8S9=x3,[<pointerS=x1,#32]
str x3,[x1,#32]

# qhasm: R10 = vec_R10_0_S10_0[0/2]
# asm 1: umov >R10=int64#3,<vec_R10_0_S10_0=reg128#8.d[0]
# asm 2: umov >R10=x2,<vec_R10_0_S10_0=v7.d[0]
umov x2,v7.d[0]

# qhasm: mem32[pointerR+40] = R10
# asm 1: str <R10=int64#3%wregname,[<pointerR=int64#1,#40]
# asm 2: str <R10=w2,[<pointerR=x0,#40]
str w2,[x0,#40]

# qhasm: S10 = vec_R10_0_S10_0[1/2]
# asm 1: umov >S10=int64#1,<vec_R10_0_S10_0=reg128#8.d[1]
# asm 2: umov >S10=x0,<vec_R10_0_S10_0=v7.d[1]
umov x0,v7.d[1]

# qhasm: mem32[pointerS+40] = S10
# asm 1: str <S10=int64#1%wregname,[<pointerS=int64#2,#40]
# asm 2: str <S10=w0,[<pointerS=x1,#40]
str w0,[x1,#40]

# qhasm: return
ret
