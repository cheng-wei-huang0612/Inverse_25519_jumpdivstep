# ===============================================================
#  Makefile  ——  for the directory shown by your `tree`
#  (arm64 / GCC / GMP)
# ===============================================================

# ── toolchain ───────────────────────────────────────────────────
CC      := gcc
CFLAGS  := -O3 -std=gnu11 -Wall -I. -I../../include
LIBS    := -lgmp                 # 連結 GMP

# ── source files ────────────────────────────────────────────────
# 共用：任何可執行檔都需要
COMMON_C   := big30.c prg.c gmp_update_VS_mont.c update_VS_mont_neon.c
# COMMON_C   := big30.c prg.c gmp_update_VS_mont.c update_VS_mont_neon1.c
# COMMON_S   := update_VS_mont.S
COMMON_OBJ := $(COMMON_C:.c=.o) $(COMMON_S:.S=.o)

# 要產出的主要執行檔
TEST_BINS  := single_test random_test

# 其他你說過偶爾會用到的檔案（想編再 make <name>）
EXTRA_BINS := main test subtest

ALL_BINS   := $(TEST_BINS) $(EXTRA_BINS)

# ===============================================================
#  把所有內建隱式規則清空，避免 .c → binary 的預設行為
# ===============================================================
.SUFFIXES:

# ===============================================================
#  default 目標：只建主要測試程式
# ===============================================================
.PHONY: all
all: $(TEST_BINS)

# ===============================================================
#  通用連結規則  (任何 <bin>.o + COMMON_OBJ → <bin>)
# ===============================================================
$(ALL_BINS): %: %.o $(COMMON_OBJ)
	$(CC) $(CFLAGS) $^ $(LIBS) -o $@

# ===============================================================
#  編譯規則
# ===============================================================
%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

%.o: %.S
	$(CC) $(CFLAGS) -c $< -o $@

# ===============================================================
#  清理
# ===============================================================
.PHONY: clean
clean:
	rm -f $(ALL_BINS) $(COMMON_OBJ) *.o

