# Generated by mont5.py
int64 m
int64 f
int64 g
int64 u
int64 v
int64 r
int64 s
int64 uvrs
int64 fuv
int64 grs
int64 mnew
int64 z
int64 loop
int64 rax
int64 rdx
int64 h
int64 oldg
int64 i
int64 j
int64 f0
int64 g0
int64 table
int64 minv
stack64 stack_minv

int64 rtimesoldv
int64 stimesolds

stack64 stack_out

stack256 stack_m1
#inplace stack_fxgx[0] = f
#inplace stack_fxgx[2] = g
#inplace stack_uuss[0] = u
#inplace stack_vvrr[0] = v
#inplace stack_vvrr[2] = r
#inplace stack_uuss[2] = s
stack64 stack_m

stack256 stack_fxgx
stack256 stack_uuss
stack256 stack_vvrr
stack256 stack_fygy

stack64 stack_fuv
stack64 stack_f

reg256 carryy
reg256 minvx4
reg256 d0
reg256 d1
reg256 d2
reg256 out0

int64 a0
int64 t0
reg256 mod0
stack256 stack_mod0
reg256 FVGS0
reg256 GSFV0
stack256 stack_FVGS0
reg256 out1
reg256 out1plus
reg256 out2plus2
int64 a1
int64 t1
reg256 mod1
stack256 stack_mod1
reg256 FVGS1
reg256 GSFV1
stack256 stack_FVGS1
reg256 out2
reg256 out2plus
reg256 out3plus2
int64 a2
int64 t2
reg256 mod2
stack256 stack_mod2
reg256 FVGS2
reg256 GSFV2
stack256 stack_FVGS2
reg256 out3
reg256 out3plus
reg256 out4plus2
int64 a3
int64 t3
reg256 mod3
stack256 stack_mod3
reg256 FVGS3
reg256 GSFV3
stack256 stack_FVGS3
reg256 out4
reg256 out4plus
reg256 out5plus2
int64 a4
int64 t4
reg256 mod4
stack256 stack_mod4
reg256 FVGS4
reg256 GSFV4
stack256 stack_FVGS4
reg256 out5
reg256 out5plus
reg256 out6plus2
int64 a5
int64 t5
reg256 mod5
stack256 stack_mod5
reg256 FVGS5
reg256 GSFV5
stack256 stack_FVGS5
reg256 out6
reg256 out6plus
reg256 out7plus2
int64 a6
int64 t6
reg256 mod6
stack256 stack_mod6
reg256 FVGS6
reg256 GSFV6
stack256 stack_FVGS6
reg256 out7
reg256 out7plus
reg256 out8plus2
int64 a7
int64 t7
reg256 mod7
stack256 stack_mod7
reg256 FVGS7
reg256 GSFV7
stack256 stack_FVGS7
reg256 out8
reg256 out8plus
reg256 out9plus2
int64 a8
int64 t8
reg256 mod8
stack256 stack_mod8
reg256 FVGS8
reg256 GSFV8
stack256 stack_FVGS8
reg256 out9
reg256 out9plus
reg256 out10plus2
int64 a9
int64 t9
reg256 mod9
stack256 stack_mod9
reg256 FVGS9
reg256 GSFV9
stack256 stack_FVGS9
reg256 out10
reg256 out10plus
reg256 out11plus2
int64 a10
int64 t10
reg256 mod10
stack256 stack_mod10
reg256 FVGS10
reg256 GSFV10
stack256 stack_FVGS10
reg256 out11
reg256 out11plus
reg256 out12plus2
int64 a11
int64 t11
reg256 mod11
stack256 stack_mod11
reg256 FVGS11
reg256 GSFV11
stack256 stack_FVGS11
reg256 out12
reg256 out12plus
reg256 out13plus2
int64 a12
int64 t12
reg256 mod12
stack256 stack_mod12
reg256 FVGS12
reg256 GSFV12
stack256 stack_FVGS12
reg256 out13
reg256 out13plus
reg256 out14plus2
int64 a13
int64 t13
reg256 mod13
stack256 stack_mod13
reg256 FVGS13
reg256 GSFV13
stack256 stack_FVGS13
reg256 out14
reg256 out14plus
reg256 out15plus2
int64 a14
int64 t14
reg256 mod14
stack256 stack_mod14
reg256 FVGS14
reg256 GSFV14
stack256 stack_FVGS14
reg256 out15
reg256 out15plus
reg256 out16plus2
int64 a15
int64 t15
reg256 mod15
stack256 stack_mod15
reg256 FVGS15
reg256 GSFV15
stack256 stack_FVGS15
reg256 out16
reg256 out16plus
reg256 out17plus2
int64 a16
int64 t16
reg256 mod16
stack256 stack_mod16
reg256 FVGS16
reg256 GSFV16
stack256 stack_FVGS16
reg256 out17
reg256 out17plus
reg256 out18plus2
int64 a17
int64 t17
reg256 mod17
stack256 stack_mod17
reg256 FVGS17
reg256 GSFV17
stack256 stack_FVGS17
reg256 out18
reg256 out18plus
reg256 out19plus2
int64 a18
int64 t18
reg256 mod18
stack256 stack_mod18
reg256 FVGS18
reg256 GSFV18
stack256 stack_FVGS18
reg256 out19
reg256 out19plus
reg256 out20plus2
int64 a19
int64 t19
reg256 mod19
stack256 stack_mod19
reg256 FVGS19
reg256 GSFV19
stack256 stack_FVGS19
reg256 out20
reg256 out20plus
reg256 out21plus2
int64 a20
int64 t20
reg256 mod20
stack256 stack_mod20
reg256 FVGS20
reg256 GSFV20
stack256 stack_FVGS20
reg256 out21
reg256 out21plus
reg256 out22plus2
int64 a21
int64 t21
reg256 mod21
stack256 stack_mod21
reg256 FVGS21
reg256 GSFV21
stack256 stack_FVGS21
reg256 out22
reg256 out22plus
reg256 out23plus2
int64 a22
int64 t22
reg256 mod22
stack256 stack_mod22
reg256 FVGS22
reg256 GSFV22
stack256 stack_FVGS22
reg256 out23
reg256 out23plus
reg256 out24plus2
int64 a23
int64 t23
reg256 mod23
stack256 stack_mod23
reg256 FVGS23
reg256 GSFV23
stack256 stack_FVGS23
reg256 out24
reg256 out24plus
reg256 out25plus2
int64 a24
int64 t24
reg256 mod24
stack256 stack_mod24
reg256 FVGS24
reg256 GSFV24
stack256 stack_FVGS24
reg256 out25
reg256 out25plus
reg256 out26plus2
int64 a25
int64 t25
reg256 mod25
stack256 stack_mod25
reg256 FVGS25
reg256 GSFV25
stack256 stack_FVGS25
reg256 out26
reg256 out26plus
reg256 out27plus2
int64 a26
int64 t26
reg256 mod26
stack256 stack_mod26
reg256 FVGS26
reg256 GSFV26
stack256 stack_FVGS26
reg256 out27
reg256 out27plus
reg256 out28plus2
int64 a27
int64 t27
reg256 mod27
stack256 stack_mod27
reg256 FVGS27
reg256 GSFV27
stack256 stack_FVGS27
reg256 out28
reg256 out28plus
reg256 out29plus2
int64 a28
int64 t28
reg256 mod28
stack256 stack_mod28
reg256 FVGS28
reg256 GSFV28
stack256 stack_FVGS28
reg256 out29
reg256 out29plus
reg256 out30plus2
int64 a29
int64 t29
reg256 mod29
stack256 stack_mod29
reg256 FVGS29
reg256 GSFV29
stack256 stack_FVGS29
reg256 out30
reg256 out30plus
reg256 out31plus2
int64 a30
int64 t30
reg256 mod30
stack256 stack_mod30
reg256 FVGS30
reg256 GSFV30
stack256 stack_FVGS30
reg256 out31
reg256 out31plus
reg256 out32plus2
int64 a31
int64 t31
reg256 mod31
stack256 stack_mod31
reg256 FVGS31
reg256 GSFV31
stack256 stack_FVGS31
reg256 out32
reg256 out32plus
reg256 out33plus2
int64 a32
int64 t32
reg256 mod32
stack256 stack_mod32
reg256 FVGS32
reg256 GSFV32
stack256 stack_FVGS32
reg256 out33
reg256 out33plus
reg256 out34plus2
int64 a33
int64 t33
reg256 mod33
stack256 stack_mod33
reg256 FVGS33
reg256 GSFV33
stack256 stack_FVGS33
reg256 out34
reg256 out34plus
int64 a34
int64 t34
reg256 mod34
stack256 stack_mod34
reg256 FVGS34
reg256 GSFV34
stack256 stack_FVGS34
reg256 out35
reg256 out35plus

int64 t35
reg256 out36
reg256 out36plus
reg256 out37
reg256 ta
reg256 tb
reg256 uuss
reg256 uuss0
reg256 uuss1
reg256 vvrr
reg256 vvrr0
reg256 vvrr1


int64            _m2p20
stack64     stack_m2p20
int64             _2p20
stack64      stack_2p20
int64            _m2p41
stack64     stack_m2p41
int64            _m2p62
stack64     stack_m2p62
int64        _2p20a2p41
stack64 stack_2p20a2p41
reg256 _2p30m1x4
reg256 _2p33x4
reg256 _2p63x4
reg256 _2p63m2p33x4
reg256 _2p29x4
reg256 _prime0x4
reg256 _prime1x4
reg256 _prime2x4
reg256 _prime3x4
stack256 stack_2p30m1x4
stack256 stack_2p33x4
stack256 stack_2p63x4
stack256 stack_2p63m2p33x4
stack256 stack_2p29x4
stack256 stack_prime0x4
stack256 stack_prime1x4
stack256 stack_prime2x4
stack256 stack_prime3x4

enter inverse_1024
# input_0 = input
# input_1 = output
# input_2 = table of constants

new stack_m1
stack_out = input_1
table = input_2


stack64 stack_r11
stack_r11 = caller_r11
stack64 stack_r12
stack_r12 = caller_r12
stack64 stack_r13
stack_r13 = caller_r13
stack64 stack_r14
stack_r14 = caller_r14
stack64 stack_r15
stack_r15 = caller_r15
stack64 stack_rbx
stack_rbx = caller_rbx
stack64 stack_rbp
stack_rbp = caller_rbp
# load and store the table
d1 = mem256[ table + 288 ]
stack_FVGS0 = d1
d1 = mem256[ table + 320 ]
stack_FVGS1 = d1
d1 = mem256[ table + 352 ]
stack_FVGS2 = d1
d1 = mem256[ table + 384 ]
stack_FVGS3 = d1
d1 = mem256[ table + 416 ]
stack_FVGS4 = d1
d1 = mem256[ table + 448 ]
stack_FVGS5 = d1
d1 = mem256[ table + 480 ]
stack_FVGS6 = d1
d1 = mem256[ table + 512 ]
stack_FVGS7 = d1
d1 = mem256[ table + 544 ]
stack_FVGS8 = d1
d1 = mem256[ table + 576 ]
stack_FVGS9 = d1
d1 = mem256[ table + 608 ]
stack_FVGS10 = d1
d1 = mem256[ table + 640 ]
stack_FVGS11 = d1
d1 = mem256[ table + 672 ]
stack_FVGS12 = d1
d1 = mem256[ table + 704 ]
stack_FVGS13 = d1
d1 = mem256[ table + 736 ]
stack_FVGS14 = d1
d1 = mem256[ table + 768 ]
stack_FVGS15 = d1
d1 = mem256[ table + 800 ]
stack_FVGS16 = d1
d1 = mem256[ table + 832 ]
stack_FVGS17 = d1
d1 = mem256[ table + 864 ]
stack_FVGS18 = d1
d1 = mem256[ table + 896 ]
stack_FVGS19 = d1
d1 = mem256[ table + 928 ]
stack_FVGS20 = d1
d1 = mem256[ table + 960 ]
stack_FVGS21 = d1
d1 = mem256[ table + 992 ]
stack_FVGS22 = d1
d1 = mem256[ table + 1024 ]
stack_FVGS23 = d1
d1 = mem256[ table + 1056 ]
stack_FVGS24 = d1
d1 = mem256[ table + 1088 ]
stack_FVGS25 = d1
d1 = mem256[ table + 1120 ]
stack_FVGS26 = d1
d1 = mem256[ table + 1152 ]
stack_FVGS27 = d1
d1 = mem256[ table + 1184 ]
stack_FVGS28 = d1
d1 = mem256[ table + 1216 ]
stack_FVGS29 = d1
d1 = mem256[ table + 1248 ]
stack_FVGS30 = d1
d1 = mem256[ table + 1280 ]
stack_FVGS31 = d1
d1 = mem256[ table + 1312 ]
stack_FVGS32 = d1
d1 = mem256[ table + 1344 ]
stack_FVGS33 = d1
d1 = mem256[ table + 1376 ]
stack_FVGS34 = d1
d1 = 4x stack_FVGS0[0]
stack_mod0 = d1
d1 = 4x stack_FVGS1[0]
stack_mod1 = d1
d1 = 4x stack_FVGS2[0]
stack_mod2 = d1
d1 = 4x stack_FVGS3[0]
stack_mod3 = d1
d1 = 4x stack_FVGS4[0]
stack_mod4 = d1
d1 = 4x stack_FVGS5[0]
stack_mod5 = d1
d1 = 4x stack_FVGS6[0]
stack_mod6 = d1
d1 = 4x stack_FVGS7[0]
stack_mod7 = d1
d1 = 4x stack_FVGS8[0]
stack_mod8 = d1
d1 = 4x stack_FVGS9[0]
stack_mod9 = d1
d1 = 4x stack_FVGS10[0]
stack_mod10 = d1
d1 = 4x stack_FVGS11[0]
stack_mod11 = d1
d1 = 4x stack_FVGS12[0]
stack_mod12 = d1
d1 = 4x stack_FVGS13[0]
stack_mod13 = d1
d1 = 4x stack_FVGS14[0]
stack_mod14 = d1
d1 = 4x stack_FVGS15[0]
stack_mod15 = d1
d1 = 4x stack_FVGS16[0]
stack_mod16 = d1
d1 = 4x stack_FVGS17[0]
stack_mod17 = d1
d1 = 4x stack_FVGS18[0]
stack_mod18 = d1
d1 = 4x stack_FVGS19[0]
stack_mod19 = d1
d1 = 4x stack_FVGS20[0]
stack_mod20 = d1
d1 = 4x stack_FVGS21[0]
stack_mod21 = d1
d1 = 4x stack_FVGS22[0]
stack_mod22 = d1
d1 = 4x stack_FVGS23[0]
stack_mod23 = d1
d1 = 4x stack_FVGS24[0]
stack_mod24 = d1
d1 = 4x stack_FVGS25[0]
stack_mod25 = d1
d1 = 4x stack_FVGS26[0]
stack_mod26 = d1
d1 = 4x stack_FVGS27[0]
stack_mod27 = d1
d1 = 4x stack_FVGS28[0]
stack_mod28 = d1
d1 = 4x stack_FVGS29[0]
stack_mod29 = d1
d1 = 4x stack_FVGS30[0]
stack_mod30 = d1
d1 = 4x stack_FVGS31[0]
stack_mod31 = d1
d1 = 4x stack_FVGS32[0]
stack_mod32 = d1
d1 = 4x stack_FVGS33[0]
stack_mod33 = d1
d1 = 4x stack_FVGS34[0]
stack_mod34 = d1
# start with a Montgomery reduction
minv = mem64[ table + 1408]
stack_minv = minv
a0 = mem64[input_0 +  0]
minv *= a0
(uint128) t1 t0 = minv * mem64[ table + 160 ]
carry? t0 += a0
t1 += 0 + carry
a1 = mem64[input_0 +  8]
h = 0
carry? a1 += t1
h += 0 + carry
(uint128) t2 t1 = minv * mem64[ table + 168 ]
carry? t1 += a1
t2 += h + carry
inplace stack_FVGS0[2] = t1
a2 = mem64[input_0 + 16]
h = 0
carry? a2 += t2
h += 0 + carry
(uint128) t3 t2 = minv * mem64[ table + 176 ]
carry? t2 += a2
t3 += h + carry
inplace stack_FVGS1[2] = t2
a3 = mem64[input_0 + 24]
h = 0
carry? a3 += t3
h += 0 + carry
(uint128) t4 t3 = minv * mem64[ table + 184 ]
carry? t3 += a3
t4 += h + carry
inplace stack_FVGS2[2] = t3
a4 = mem64[input_0 + 32]
h = 0
carry? a4 += t4
h += 0 + carry
(uint128) t5 t4 = minv * mem64[ table + 192 ]
carry? t4 += a4
t5 += h + carry
inplace stack_FVGS3[2] = t4
a5 = mem64[input_0 + 40]
h = 0
carry? a5 += t5
h += 0 + carry
(uint128) t6 t5 = minv * mem64[ table + 200 ]
carry? t5 += a5
t6 += h + carry
inplace stack_FVGS4[2] = t5
a6 = mem64[input_0 + 48]
h = 0
carry? a6 += t6
h += 0 + carry
(uint128) t7 t6 = minv * mem64[ table + 208 ]
carry? t6 += a6
t7 += h + carry
inplace stack_FVGS5[2] = t6
a7 = mem64[input_0 + 56]
h = 0
carry? a7 += t7
h += 0 + carry
(uint128) t8 t7 = minv * mem64[ table + 216 ]
carry? t7 += a7
t8 += h + carry
inplace stack_FVGS6[2] = t7
a8 = mem64[input_0 + 64]
h = 0
carry? a8 += t8
h += 0 + carry
(uint128) t9 t8 = minv * mem64[ table + 224 ]
carry? t8 += a8
t9 += h + carry
inplace stack_FVGS7[2] = t8
a9 = mem64[input_0 + 72]
h = 0
carry? a9 += t9
h += 0 + carry
(uint128) t10 t9 = minv * mem64[ table + 232 ]
carry? t9 += a9
t10 += h + carry
inplace stack_FVGS8[2] = t9
a10 = mem64[input_0 + 80]
h = 0
carry? a10 += t10
h += 0 + carry
(uint128) t11 t10 = minv * mem64[ table + 240 ]
carry? t10 += a10
t11 += h + carry
inplace stack_FVGS9[2] = t10
a11 = mem64[input_0 + 88]
h = 0
carry? a11 += t11
h += 0 + carry
(uint128) t12 t11 = minv * mem64[ table + 248 ]
carry? t11 += a11
t12 += h + carry
inplace stack_FVGS10[2] = t11
a12 = mem64[input_0 + 96]
h = 0
carry? a12 += t12
h += 0 + carry
(uint128) t13 t12 = minv * mem64[ table + 256 ]
carry? t12 += a12
t13 += h + carry
inplace stack_FVGS11[2] = t12
a13 = mem64[input_0 + 104]
h = 0
carry? a13 += t13
h += 0 + carry
(uint128) t14 t13 = minv * mem64[ table + 264 ]
carry? t13 += a13
t14 += h + carry
inplace stack_FVGS12[2] = t13
a14 = mem64[input_0 + 112]
h = 0
carry? a14 += t14
h += 0 + carry
(uint128) t15 t14 = minv * mem64[ table + 272 ]
carry? t14 += a14
t15 += h + carry
inplace stack_FVGS13[2] = t14
a15 = mem64[input_0 + 120]
h = 0
carry? a15 += t15
h += 0 + carry
(uint128) t16 t15 = minv * mem64[ table + 280 ]
carry? t15 += a15
t16 += h + carry
inplace stack_FVGS14[2] = t15
inplace stack_FVGS15[2] = t16
# then a sub of p
a0 = stack_FVGS0[2]
carry? a0 -= mem64[ table + 160]
inplace stack_FVGS19[2] = a0
a1 = stack_FVGS1[2]
carry? a1 -= mem64[ table + 168] - carry
inplace stack_FVGS20[2] = a1
a2 = stack_FVGS2[2]
carry? a2 -= mem64[ table + 176] - carry
inplace stack_FVGS21[2] = a2
a3 = stack_FVGS3[2]
carry? a3 -= mem64[ table + 184] - carry
inplace stack_FVGS22[2] = a3
a4 = stack_FVGS4[2]
carry? a4 -= mem64[ table + 192] - carry
inplace stack_FVGS23[2] = a4
a5 = stack_FVGS5[2]
carry? a5 -= mem64[ table + 200] - carry
inplace stack_FVGS24[2] = a5
a6 = stack_FVGS6[2]
carry? a6 -= mem64[ table + 208] - carry
inplace stack_FVGS25[2] = a6
a7 = stack_FVGS7[2]
carry? a7 -= mem64[ table + 216] - carry
inplace stack_FVGS26[2] = a7
a8 = stack_FVGS8[2]
carry? a8 -= mem64[ table + 224] - carry
inplace stack_FVGS27[2] = a8
a9 = stack_FVGS9[2]
carry? a9 -= mem64[ table + 232] - carry
inplace stack_FVGS28[2] = a9
a10 = stack_FVGS10[2]
carry? a10 -= mem64[ table + 240] - carry
inplace stack_FVGS29[2] = a10
a11 = stack_FVGS11[2]
carry? a11 -= mem64[ table + 248] - carry
inplace stack_FVGS30[2] = a11
a12 = stack_FVGS12[2]
carry? a12 -= mem64[ table + 256] - carry
inplace stack_FVGS31[2] = a12
a13 = stack_FVGS13[2]
carry? a13 -= mem64[ table + 264] - carry
inplace stack_FVGS32[2] = a13
a14 = stack_FVGS14[2]
carry? a14 -= mem64[ table + 272] - carry
inplace stack_FVGS33[2] = a14
a15 = stack_FVGS15[2]
carry? a15 -= mem64[ table + 280] - carry
inplace stack_FVGS34[2] = a15
# then a conditional move
a15 = stack_FVGS34[2]
a15 = stack_FVGS15[2] if carry
inplace stack_FVGS34[2] = a15
a14 = stack_FVGS33[2]
a14 = stack_FVGS14[2] if carry
inplace stack_FVGS33[2] = a14
a13 = stack_FVGS32[2]
a13 = stack_FVGS13[2] if carry
inplace stack_FVGS32[2] = a13
a12 = stack_FVGS31[2]
a12 = stack_FVGS12[2] if carry
inplace stack_FVGS31[2] = a12
a11 = stack_FVGS30[2]
a11 = stack_FVGS11[2] if carry
inplace stack_FVGS30[2] = a11
a10 = stack_FVGS29[2]
a10 = stack_FVGS10[2] if carry
inplace stack_FVGS29[2] = a10
a9 = stack_FVGS28[2]
a9 = stack_FVGS9[2] if carry
inplace stack_FVGS28[2] = a9
a8 = stack_FVGS27[2]
a8 = stack_FVGS8[2] if carry
inplace stack_FVGS27[2] = a8
a7 = stack_FVGS26[2]
a7 = stack_FVGS7[2] if carry
inplace stack_FVGS26[2] = a7
a6 = stack_FVGS25[2]
a6 = stack_FVGS6[2] if carry
inplace stack_FVGS25[2] = a6
a5 = stack_FVGS24[2]
a5 = stack_FVGS5[2] if carry
inplace stack_FVGS24[2] = a5
a4 = stack_FVGS23[2]
a4 = stack_FVGS4[2] if carry
inplace stack_FVGS23[2] = a4
a3 = stack_FVGS22[2]
a3 = stack_FVGS3[2] if carry
inplace stack_FVGS22[2] = a3
a2 = stack_FVGS21[2]
a2 = stack_FVGS2[2] if carry
inplace stack_FVGS21[2] = a2
a1 = stack_FVGS20[2]
a1 = stack_FVGS1[2] if carry
inplace stack_FVGS20[2] = a1
a0 = stack_FVGS19[2]
a0 = stack_FVGS0[2] if carry
inplace stack_FVGS19[2] = a0

# now a19 ... a34 should be a reduced mod p result of input/2^64
t0 = -1152921504606846976
g = a0 & ~ t0

# split up the a's into 30-bit chunks
a0 = stack_FVGS19[2]
t0 = a0
t0 &= 1073741823
inplace stack_FVGS0[2] = t0
t0 = a0
(uint64) t0 >>= 30
t0 &= 1073741823
inplace stack_FVGS1[2] = t0
a1 = stack_FVGS20[2]
a0 = (a1 a0) >> 60
a0 &= 1073741823
inplace stack_FVGS2[2] = a0
t0 = a1
(uint64) t0 >>= 26
t0 &= 1073741823
inplace stack_FVGS3[2] = t0
a2 = stack_FVGS21[2]
a1 = (a2 a1) >> 56
a1 &= 1073741823
inplace stack_FVGS4[2] = a1
t0 = a2
(uint64) t0 >>= 22
t0 &= 1073741823
inplace stack_FVGS5[2] = t0
a3 = stack_FVGS22[2]
a2 = (a3 a2) >> 52
a2 &= 1073741823
inplace stack_FVGS6[2] = a2
t0 = a3
(uint64) t0 >>= 18
t0 &= 1073741823
inplace stack_FVGS7[2] = t0
a4 = stack_FVGS23[2]
a3 = (a4 a3) >> 48
a3 &= 1073741823
inplace stack_FVGS8[2] = a3
t0 = a4
(uint64) t0 >>= 14
t0 &= 1073741823
inplace stack_FVGS9[2] = t0
a5 = stack_FVGS24[2]
a4 = (a5 a4) >> 44
a4 &= 1073741823
inplace stack_FVGS10[2] = a4
t0 = a5
(uint64) t0 >>= 10
t0 &= 1073741823
inplace stack_FVGS11[2] = t0
a6 = stack_FVGS25[2]
a5 = (a6 a5) >> 40
a5 &= 1073741823
inplace stack_FVGS12[2] = a5
t0 = a6
(uint64) t0 >>= 6
t0 &= 1073741823
inplace stack_FVGS13[2] = t0
a7 = stack_FVGS26[2]
a6 = (a7 a6) >> 36
a6 &= 1073741823
inplace stack_FVGS14[2] = a6
t0 = a7
(uint64) t0 >>= 2
t0 &= 1073741823
inplace stack_FVGS15[2] = t0
t0 = a7
(uint64) t0 >>= 32
t0 &= 1073741823
inplace stack_FVGS16[2] = t0
a8 = stack_FVGS27[2]
a7 = (a8 a7) >> 62
a7 &= 1073741823
inplace stack_FVGS17[2] = a7
t0 = a8
(uint64) t0 >>= 28
t0 &= 1073741823
inplace stack_FVGS18[2] = t0
a9 = stack_FVGS28[2]
a8 = (a9 a8) >> 58
a8 &= 1073741823
inplace stack_FVGS19[2] = a8
t0 = a9
(uint64) t0 >>= 24
t0 &= 1073741823
inplace stack_FVGS20[2] = t0
a10 = stack_FVGS29[2]
a9 = (a10 a9) >> 54
a9 &= 1073741823
inplace stack_FVGS21[2] = a9
t0 = a10
(uint64) t0 >>= 20
t0 &= 1073741823
inplace stack_FVGS22[2] = t0
a11 = stack_FVGS30[2]
a10 = (a11 a10) >> 50
a10 &= 1073741823
inplace stack_FVGS23[2] = a10
t0 = a11
(uint64) t0 >>= 16
t0 &= 1073741823
inplace stack_FVGS24[2] = t0
a12 = stack_FVGS31[2]
a11 = (a12 a11) >> 46
a11 &= 1073741823
inplace stack_FVGS25[2] = a11
t0 = a12
(uint64) t0 >>= 12
t0 &= 1073741823
inplace stack_FVGS26[2] = t0
a13 = stack_FVGS32[2]
a12 = (a13 a12) >> 42
a12 &= 1073741823
inplace stack_FVGS27[2] = a12
t0 = a13
(uint64) t0 >>= 8
t0 &= 1073741823
inplace stack_FVGS28[2] = t0
a14 = stack_FVGS33[2]
a13 = (a14 a13) >> 38
a13 &= 1073741823
inplace stack_FVGS29[2] = a13
t0 = a14
(uint64) t0 >>= 4
t0 &= 1073741823
inplace stack_FVGS30[2] = t0
t0 = a14
(uint64) t0 >>= 34
t0 &= 1073741823
inplace stack_FVGS31[2] = t0
a15 = stack_FVGS34[2]
t0 = a15
t0 &= 1073741823
inplace stack_FVGS32[2] = t0
t0 = a15
(uint64) t0 >>= 30
t0 &= 1073741823
inplace stack_FVGS33[2] = t0
(uint64) a15 >>= 60
inplace stack_FVGS34[2] = a15

f = stack_FVGS0[0]
f0 = stack_FVGS1[0]
f0 <<= 30
f += f0 

#                 m = -1
#                  z = 0
                  m = 0
                  z = -1
inplace stack_m1[0] = m
inplace stack_m1[1] = z

             _m2p20 = -1048576
        stack_m2p20 = _m2p20
              _2p20 = 1048576
         stack_2p20 = _2p20
             _m2p41 = -2199023255552
        stack_m2p41 = _m2p41
             _m2p62 = -4611686018427387904
        stack_m2p62 = _m2p62
         _2p20a2p41 = 2199024304128
    stack_2p20a2p41 = _2p20a2p41

          _2p30m1x4 = mem256[ table +   0 ]
     stack_2p30m1x4 = _2p30m1x4
            _2p33x4 = mem256[ table +  32 ]
       stack_2p33x4 = _2p33x4
            _2p63x4 = mem256[ table +  64 ]
       stack_2p63x4 = _2p63x4
       _2p63m2p33x4 = mem256[ table +  96 ]
  stack_2p63m2p33x4 = _2p63m2p33x4
            _2p29x4 = mem256[ table + 128 ]
       stack_2p29x4 = _2p29x4
          _prime0x4 = mem256[ table + 160 ]
     stack_prime0x4 = _prime0x4
          _prime1x4 = mem256[ table + 192 ]
     stack_prime1x4 = _prime1x4
          _prime2x4 = mem256[ table + 224 ]
     stack_prime2x4 = _prime2x4
# idle loop
i = 40
u = 1152921504606846976
v = 0
s = u
r = 0


nop
nop
bigloop:

# transition portion

      rax = g
      (int128) rdx rax = rax * s
      t2 = rax
      t1 = rdx

      rax = f
      (int128) rdx rax = rax * r
      carry? t2 += rax
             t1 += rdx + carry
      t2 = (t1 t2) >> 60	 

      rax = f
      (int128) rdx rax = rax * u
      f = rax
      t0 = rdx
      rax = g
      (int128) rdx rax = rax * v
      carry? f += rax
             t0 += rdx + carry
      f = (t0 f) >> 60

new vvrr
vvrr = v,vvrr[1],0,0
vvrr = vvrr[0],r,0,0

      v *= g0
      g0 *= s

      r *= f0
      f0 *= u
      f0 += v
      g0 += r

      f += f0
      g = t2+g0

# at this point new f and g are computed.

# startswap
loop20_init:
  fuv = f & ~ _m2p20
FVGS0 = stack_FVGS0
new uuss
uuss = u,uuss[1],0,0
uuss = uuss[0],s,0,0
GSFV0 = FVGS0[1,0]
  grs = g & ~ _m2p20
uuss = uuss[0,0,1,1]
vvrr = vvrr[0,0,1,1]
  fuv += stack_m2p41
_2p30m1x4 = stack_2p30m1x4
  grs += stack_m2p62
uuss0 = uuss & _2p30m1x4
vvrr0 = vvrr & _2p30m1x4 
  z = stack_m1[1]
_2p63x4 = stack_2p63x4
uuss1 = uuss ^ _2p63x4
  oldg = grs
vvrr1 = vvrr ^ _2p63x4
4x uuss1 unsigned>>= 30
4x vvrr1 unsigned>>= 30
  h = grs + fuv
_2p33x4 = stack_2p33x4
4x uuss1 -= _2p33x4
              =? grs & 1
4x vvrr1 -= _2p33x4
4x ta = int32 uuss0 * int32 FVGS0
  z = m   if !=
4x tb = int32 vvrr0 * int32 GSFV0
4x out0 = ta + tb
  h = grs if  =
minvx4 = 4x stack_minv
mod0 = stack_mod0
  mnew = m + 1
4x d0 = int32 minvx4 * int32 out0
d0 &= _2p30m1x4
4x ta = int32 mod0 * int32 d0
  grs -= fuv
4x out0 += ta
4x carryy = out0 +_2p63x4
  (int64) grs >>= 1
4x carryy unsigned>>= 30
  (int64) h >>= 1
FVGS1 = stack_FVGS1
GSFV1 = FVGS1[1,0]
mod1 = stack_mod1
  m = -m
4x ta = int32 uuss1 * int32 FVGS0
4x tb = int32 vvrr1 * int32 GSFV0
4x out1plus = ta + tb
                 signed<? z - 0
4x ta = int32 uuss0 * int32 FVGS1
  fuv = oldg if !signed<
4x tb = int32 vvrr0 * int32 GSFV1
  grs = h    if  signed<
4x out1 = ta + tb
4x out1 += out1plus
4x ta = int32 d0 * int32 mod1
  m = mnew   if  signed<
4x ta += carryy
4x out1 += ta
  z = -1
4x d1 = int32 minvx4 * int32 out1
d1 &= _2p30m1x4
  oldg = grs
4x ta = int32 mod0 * int32 d1
4x out1 += ta
  h = grs + fuv
_2p63m2p33x4 = stack_2p63m2p33x4
4x carryy = out1 + _2p63m2p33x4 
4x carryy unsigned>>= 30
              =? grs & 1
FVGS2 = stack_FVGS2
GSFV2 = FVGS2[1,0]
  z = m   if !=
mod2 = stack_mod2
  h = grs if  =
4x ta = int32 uuss1 * int32 FVGS1
4x tb = int32 vvrr1 * int32 GSFV1
4x out2plus = ta + tb
  mnew = m + 1
4x ta = int32 uuss0 * int32 FVGS2
4x tb = int32 vvrr0 * int32 GSFV2
  grs -= fuv
4x out2 = ta + tb
4x out2 += out2plus
  (int64) grs >>= 1
4x ta = int32 d0 * int32 mod2
4x tb = int32 d1 * int32 mod1
  (int64) h >>= 1
4x out2plus2 = ta + tb
4x out2plus2 += carryy
  m = -m
4x out2 += out2plus2
4x carryy = out2 + _2p63m2p33x4 
                 signed<? z - 0
4x carryy unsigned>>= 30
out2 &= _2p30m1x4
stack_FVGS0 = out2
  fuv = oldg if !signed<
  grs = h    if  signed<
FVGS3 = stack_FVGS3
GSFV3 = FVGS3[1,0]
mod3 = stack_mod3
4x ta = int32 uuss1 * int32 FVGS2
  m = mnew   if  signed<
4x tb = int32 vvrr1 * int32 GSFV2
4x out3plus = ta + tb
  z = -1
4x ta = int32 uuss0 * int32 FVGS3
4x tb = int32 vvrr0 * int32 GSFV3
  oldg = grs
4x out3 = ta + tb
4x out3 += out3plus
  h = grs + fuv
4x ta = int32 d0 * int32 mod3
4x tb = int32 d1 * int32 mod2
              =? grs & 1
4x out3plus2 = ta + tb
4x out3plus2 += carryy
4x out3 += out3plus2
  z = m   if !=
4x carryy = out3 + _2p63m2p33x4 
  h = grs if  =
4x carryy unsigned>>= 30
out3 &= _2p30m1x4
  mnew = m + 1
stack_FVGS1 = out3
FVGS4 = stack_FVGS4
  grs -= fuv
GSFV4 = FVGS4[1,0]
mod4 = stack_mod4
  (int64) grs >>= 1
4x ta = int32 uuss1 * int32 FVGS3
4x tb = int32 vvrr1 * int32 GSFV3
  (int64) h >>= 1
4x out4plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS4
4x tb = int32 vvrr0 * int32 GSFV4
  m = -m
4x out4 = ta + tb
4x out4 += out4plus
                 signed<? z - 0
4x ta = int32 d0 * int32 mod4
4x tb = int32 d1 * int32 mod3
  fuv = oldg if !signed<
4x out4plus2 = ta + tb
4x out4plus2 += carryy
  grs = h    if  signed<
4x out4 += out4plus2
4x carryy = out4 + _2p63m2p33x4 
  m = mnew   if  signed<
4x carryy unsigned>>= 30
out4 &= _2p30m1x4
  z = -1
stack_FVGS2 = out4
FVGS5 = stack_FVGS5
  oldg = grs
GSFV5 = FVGS5[1,0]
mod5 = stack_mod5
  h = grs + fuv
4x ta = int32 uuss1 * int32 FVGS4
4x tb = int32 vvrr1 * int32 GSFV4
              =? grs & 1
4x out5plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS5
  z = m   if !=
4x tb = int32 vvrr0 * int32 GSFV5
4x out5 = ta + tb
  h = grs if  =
4x out5 += out5plus
4x ta = int32 d0 * int32 mod5
4x tb = int32 d1 * int32 mod4
  mnew = m + 1
4x out5plus2 = ta + tb
4x out5plus2 += carryy
  grs -= fuv
4x out5 += out5plus2
4x carryy = out5 + _2p63m2p33x4 
  (int64) grs >>= 1
4x carryy unsigned>>= 30
out5 &= _2p30m1x4
  (int64) h >>= 1
stack_FVGS3 = out5
FVGS6 = stack_FVGS6
  m = -m
GSFV6 = FVGS6[1,0]
mod6 = stack_mod6
                 signed<? z - 0
4x ta = int32 uuss1 * int32 FVGS5
4x tb = int32 vvrr1 * int32 GSFV5
  fuv = oldg if !signed<
4x out6plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS6
  grs = h    if  signed<
4x tb = int32 vvrr0 * int32 GSFV6
4x out6 = ta + tb
  m = mnew   if  signed<
4x out6 += out6plus
4x ta = int32 d0 * int32 mod6
  z = stack_m1[1]
4x tb = int32 d1 * int32 mod5
4x out6plus2 = ta + tb
  oldg = grs
4x out6plus2 += carryy
4x out6 += out6plus2
4x carryy = out6 + _2p63m2p33x4 
  h = grs + fuv
4x carryy unsigned>>= 30
out6 &= _2p30m1x4
              =? grs & 1
stack_FVGS4 = out6
  z = m   if !=
FVGS7 = stack_FVGS7
GSFV7 = FVGS7[1,0]
mod7 = stack_mod7
  h = grs if  =
4x ta = int32 uuss1 * int32 FVGS6
4x tb = int32 vvrr1 * int32 GSFV6
  mnew = m + 1
4x out7plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS7
  grs -= fuv
4x tb = int32 vvrr0 * int32 GSFV7
4x out7 = ta + tb
  (int64) grs >>= 1
4x out7 += out7plus
4x ta = int32 d0 * int32 mod7
  (int64) h >>= 1
4x tb = int32 d1 * int32 mod6
4x out7plus2 = ta + tb
  m = -m
4x out7plus2 += carryy
4x out7 += out7plus2
                 signed<? z - 0
4x carryy = out7 + _2p63m2p33x4 
4x carryy unsigned>>= 30
  fuv = oldg if !signed<
out7 &= _2p30m1x4
stack_FVGS5 = out7
FVGS8 = stack_FVGS8
  grs = h    if  signed<
GSFV8 = FVGS8[1,0]
  m = mnew   if  signed<
mod8 = stack_mod8
4x ta = int32 uuss1 * int32 FVGS7
4x tb = int32 vvrr1 * int32 GSFV7
  z = -1
4x out8plus = ta + tb
  oldg = grs
4x ta = int32 uuss0 * int32 FVGS8
4x tb = int32 vvrr0 * int32 GSFV8
4x out8 = ta + tb
  h = grs + fuv
4x out8 += out8plus
4x ta = int32 d0 * int32 mod8
              =? grs & 1
4x tb = int32 d1 * int32 mod7
4x out8plus2 = ta + tb
  z = m   if !=
4x out8plus2 += carryy
4x out8 += out8plus2
  h = grs if  =
4x carryy = out8 + _2p63m2p33x4 
4x carryy unsigned>>= 30
  mnew = m + 1
out8 &= _2p30m1x4
  grs -= fuv
stack_FVGS6 = out8
FVGS9 = stack_FVGS9
GSFV9 = FVGS9[1,0]
  (int64) grs >>= 1
mod9 = stack_mod9
4x ta = int32 uuss1 * int32 FVGS8
4x tb = int32 vvrr1 * int32 GSFV8
  (int64) h >>= 1
4x out9plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS9
  m = -m
4x tb = int32 vvrr0 * int32 GSFV9
4x out9 = ta + tb
                 signed<? z - 0
4x out9 += out9plus
4x ta = int32 d0 * int32 mod9
  fuv = oldg if !signed<
4x tb = int32 d1 * int32 mod8
4x out9plus2 = ta + tb
4x out9plus2 += carryy
  grs = h    if  signed<
4x out9 += out9plus2
  m = mnew   if  signed<
4x carryy = out9 + _2p63m2p33x4 
4x carryy unsigned>>= 30
  z = -1
out9 &= _2p30m1x4
stack_FVGS7 = out9
  oldg = grs
FVGS10 = stack_FVGS10
GSFV10 = FVGS10[1,0]
  h = grs + fuv
mod10 = stack_mod10
4x ta = int32 uuss1 * int32 FVGS9
              =? grs & 1
4x tb = int32 vvrr1 * int32 GSFV9
4x out10plus = ta + tb
  z = m   if !=
4x ta = int32 uuss0 * int32 FVGS10
4x tb = int32 vvrr0 * int32 GSFV10
4x out10 = ta + tb
  h = grs if  =
4x out10 += out10plus
4x ta = int32 d0 * int32 mod10
  mnew = m + 1
4x tb = int32 d1 * int32 mod9
4x out10plus2 = ta + tb
  grs -= fuv
4x out10plus2 += carryy
4x out10 += out10plus2
  (int64) grs >>= 1
4x carryy = out10 + _2p63m2p33x4 
4x carryy unsigned>>= 30
  (int64) h >>= 1
out10 &= _2p30m1x4
  m = -m
stack_FVGS8 = out10
FVGS11 = stack_FVGS11
GSFV11 = FVGS11[1,0]
                 signed<? z - 0
mod11 = stack_mod11
4x ta = int32 uuss1 * int32 FVGS10
4x tb = int32 vvrr1 * int32 GSFV10
  fuv = oldg if !signed<
4x out11plus = ta + tb
  grs = h    if  signed<
4x ta = int32 uuss0 * int32 FVGS11
4x tb = int32 vvrr0 * int32 GSFV11
  m = mnew   if  signed<
4x out11 = ta + tb
4x out11 += out11plus
  z = -1
4x ta = int32 d0 * int32 mod11
4x tb = int32 d1 * int32 mod10
  oldg = grs
4x out11plus2 = ta + tb
4x out11plus2 += carryy
4x out11 += out11plus2
  h = grs + fuv
4x carryy = out11 + _2p63m2p33x4 
4x carryy unsigned>>= 30
              =? grs & 1
out11 &= _2p30m1x4
stack_FVGS9 = out11
FVGS12 = stack_FVGS12
  z = m   if !=
GSFV12 = FVGS12[1,0]
  h = grs if  =
mod12 = stack_mod12
4x ta = int32 uuss1 * int32 FVGS11
4x tb = int32 vvrr1 * int32 GSFV11
  mnew = m + 1
4x out12plus = ta + tb
  grs -= fuv
4x ta = int32 uuss0 * int32 FVGS12
4x tb = int32 vvrr0 * int32 GSFV12
  (int64) grs >>= 1
4x out12 = ta + tb
4x out12 += out12plus
  (int64) h >>= 1
4x ta = int32 d0 * int32 mod12
4x tb = int32 d1 * int32 mod11
  m = -m
4x out12plus2 = ta + tb
4x out12plus2 += carryy
                 signed<? z - 0
4x out12 += out12plus2
4x carryy = out12 + _2p63m2p33x4 
4x carryy unsigned>>= 30
  fuv = oldg if !signed<
out12 &= _2p30m1x4
stack_FVGS10 = out12
  grs = h    if  signed<
FVGS13 = stack_FVGS13
GSFV13 = FVGS13[1,0]
  m = mnew   if  signed<
mod13 = stack_mod13
4x ta = int32 uuss1 * int32 FVGS12
  z = -1
4x tb = int32 vvrr1 * int32 GSFV12
4x out13plus = ta + tb
  oldg = grs
4x ta = int32 uuss0 * int32 FVGS13
4x tb = int32 vvrr0 * int32 GSFV13
  h = grs + fuv
4x out13 = ta + tb
4x out13 += out13plus
              =? grs & 1
4x ta = int32 d0 * int32 mod13
4x tb = int32 d1 * int32 mod12
  z = m   if !=
4x out13plus2 = ta + tb
4x out13plus2 += carryy
  h = grs if  =
4x out13 += out13plus2
4x carryy = out13 + _2p63m2p33x4 
  mnew = m + 1
4x carryy unsigned>>= 30
out13 &= _2p30m1x4
  grs -= fuv
stack_FVGS11 = out13
FVGS14 = stack_FVGS14
GSFV14 = FVGS14[1,0]
  (int64) grs >>= 1
mod14 = stack_mod14
4x ta = int32 uuss1 * int32 FVGS13
  (int64) h >>= 1
4x tb = int32 vvrr1 * int32 GSFV13
4x out14plus = ta + tb
  m = -m
4x ta = int32 uuss0 * int32 FVGS14
4x tb = int32 vvrr0 * int32 GSFV14
4x out14 = ta + tb
                 signed<? z - 0
4x out14 += out14plus
  fuv = oldg if !signed<
4x ta = int32 d0 * int32 mod14
4x tb = int32 d1 * int32 mod13
  grs = h    if  signed<
4x out14plus2 = ta + tb
4x out14plus2 += carryy
  m = mnew   if  signed<
4x out14 += out14plus2
4x carryy = out14 + _2p63m2p33x4 
  z = -1
4x carryy unsigned>>= 30
out14 &= _2p30m1x4
  oldg = grs
stack_FVGS12 = out14
FVGS15 = stack_FVGS15
  h = grs + fuv
GSFV15 = FVGS15[1,0]
mod15 = stack_mod15
              =? grs & 1
4x ta = int32 uuss1 * int32 FVGS14
4x tb = int32 vvrr1 * int32 GSFV14
4x out15plus = ta + tb
  z = m   if !=
4x ta = int32 uuss0 * int32 FVGS15
4x tb = int32 vvrr0 * int32 GSFV15
  h = grs if  =
4x out15 = ta + tb
4x out15 += out15plus
  mnew = m + 1
4x ta = int32 d0 * int32 mod15
4x tb = int32 d1 * int32 mod14
  grs -= fuv
4x out15plus2 = ta + tb
  (int64) grs >>= 1
4x out15plus2 += carryy
4x out15 += out15plus2
4x carryy = out15 + _2p63m2p33x4 
  (int64) h >>= 1
4x carryy unsigned>>= 30
out15 &= _2p30m1x4
stack_FVGS13 = out15
  m = -m
FVGS16 = stack_FVGS16
                 signed<? z - 0
GSFV16 = FVGS16[1,0]
mod16 = stack_mod16
  fuv = oldg if !signed<
4x ta = int32 uuss1 * int32 FVGS15
4x tb = int32 vvrr1 * int32 GSFV15
  grs = h    if  signed<
4x out16plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS16
  m = mnew   if  signed<
4x tb = int32 vvrr0 * int32 GSFV16
4x out16 = ta + tb
4x out16 += out16plus
  z = -1
4x ta = int32 d0 * int32 mod16
4x tb = int32 d1 * int32 mod15
  oldg = grs
4x out16plus2 = ta + tb
4x out16plus2 += carryy
  h = grs + fuv
4x out16 += out16plus2
4x carryy = out16 + _2p63m2p33x4 
              =? grs & 1
4x carryy unsigned>>= 30
out16 &= _2p30m1x4
stack_FVGS14 = out16
  z = m   if !=
FVGS17 = stack_FVGS17
  h = grs if  =
GSFV17 = FVGS17[1,0]
mod17 = stack_mod17
  mnew = m + 1
4x ta = int32 uuss1 * int32 FVGS16
4x tb = int32 vvrr1 * int32 GSFV16
  grs -= fuv
4x out17plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS17
  (int64) grs >>= 1
4x tb = int32 vvrr0 * int32 GSFV17
4x out17 = ta + tb
  (int64) h >>= 1
4x out17 += out17plus
4x ta = int32 d0 * int32 mod17
  m = -m
4x tb = int32 d1 * int32 mod16
4x out17plus2 = ta + tb
4x out17plus2 += carryy
                 signed<? z - 0
4x out17 += out17plus2
4x carryy = out17 + _2p63m2p33x4 
4x carryy unsigned>>= 30
  fuv = oldg if !signed<
out17 &= _2p30m1x4
  grs = h    if  signed<
stack_FVGS15 = out17
FVGS18 = stack_FVGS18
  m = mnew   if  signed<
GSFV18 = FVGS18[1,0]
mod18 = stack_mod18
  z = stack_m1[1]
4x ta = int32 uuss1 * int32 FVGS17
4x tb = int32 vvrr1 * int32 GSFV17
4x out18plus = ta + tb
  oldg = grs
4x ta = int32 uuss0 * int32 FVGS18
  h = grs + fuv
4x tb = int32 vvrr0 * int32 GSFV18
4x out18 = ta + tb
              =? grs & 1
4x out18 += out18plus
4x ta = int32 d0 * int32 mod18
  z = m   if !=
4x tb = int32 d1 * int32 mod17
4x out18plus2 = ta + tb
  h = grs if  =
4x out18plus2 += carryy
4x out18 += out18plus2
  mnew = m + 1
4x carryy = out18 + _2p63m2p33x4 
4x carryy unsigned>>= 30
out18 &= _2p30m1x4
  grs -= fuv
stack_FVGS16 = out18
FVGS19 = stack_FVGS19
  (int64) grs >>= 1
GSFV19 = FVGS19[1,0]
mod19 = stack_mod19
  (int64) h >>= 1
4x ta = int32 uuss1 * int32 FVGS18
4x tb = int32 vvrr1 * int32 GSFV18
  m = -m
4x out19plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS19
                 signed<? z - 0
4x tb = int32 vvrr0 * int32 GSFV19
4x out19 = ta + tb
  fuv = oldg if !signed<
4x out19 += out19plus
4x ta = int32 d0 * int32 mod19
  grs = h    if  signed<
4x tb = int32 d1 * int32 mod18
4x out19plus2 = ta + tb
  m = mnew   if  signed<
4x out19plus2 += carryy
  z = stack_m1[1]
4x out19 += out19plus2
4x carryy = out19 + _2p63m2p33x4 
  oldg = grs
4x carryy unsigned>>= 30
out19 &= _2p30m1x4
stack_FVGS17 = out19
  h = grs + fuv
FVGS20 = stack_FVGS20
GSFV20 = FVGS20[1,0]
mod20 = stack_mod20
              =? grs & 1
4x ta = int32 uuss1 * int32 FVGS19
4x tb = int32 vvrr1 * int32 GSFV19
  z = m   if !=
4x out20plus = ta + tb
  h = grs if  =
4x ta = int32 uuss0 * int32 FVGS20
4x tb = int32 vvrr0 * int32 GSFV20
4x out20 = ta + tb
  mnew = m + 1
4x out20 += out20plus
4x ta = int32 d0 * int32 mod20
  grs -= fuv
4x tb = int32 d1 * int32 mod19
4x out20plus2 = ta + tb
  (int64) grs >>= 1
4x out20plus2 += carryy
4x out20 += out20plus2
  (int64) h >>= 1
4x carryy = out20 + _2p63m2p33x4 
4x carryy unsigned>>= 30
  m = -m
out20 &= _2p30m1x4
stack_FVGS18 = out20
                 signed<? z - 0
FVGS21 = stack_FVGS21
GSFV21 = FVGS21[1,0]
  fuv = oldg if !signed<
mod21 = stack_mod21
4x ta = int32 uuss1 * int32 FVGS20
  grs = h    if  signed<
4x tb = int32 vvrr1 * int32 GSFV20
4x out21plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS21
  m = mnew   if  signed<
4x tb = int32 vvrr0 * int32 GSFV21
4x out21 = ta + tb
  z = stack_m1[1]
4x out21 += out21plus
4x ta = int32 d0 * int32 mod21
  oldg = grs
4x tb = int32 d1 * int32 mod20
4x out21plus2 = ta + tb
4x out21plus2 += carryy
  h = grs + fuv
4x out21 += out21plus2
4x carryy = out21 + _2p63m2p33x4 
              =? grs & 1
4x carryy unsigned>>= 30
  z = m   if !=
out21 &= _2p30m1x4
stack_FVGS19 = out21
  h = grs if  =
FVGS22 = stack_FVGS22
GSFV22 = FVGS22[1,0]
  mnew = m + 1
mod22 = stack_mod22
4x ta = int32 uuss1 * int32 FVGS21
  grs -= fuv
4x tb = int32 vvrr1 * int32 GSFV21
4x out22plus = ta + tb
  (int64) grs >>= 1
4x ta = int32 uuss0 * int32 FVGS22
4x tb = int32 vvrr0 * int32 GSFV22
  (int64) h >>= 1
4x out22 = ta + tb
4x out22 += out22plus
4x ta = int32 d0 * int32 mod22
  m = -m
4x tb = int32 d1 * int32 mod21
4x out22plus2 = ta + tb
                 signed<? z - 0
4x out22plus2 += carryy
4x out22 += out22plus2
  fuv = oldg if !signed<
4x carryy = out22 + _2p63m2p33x4 
4x carryy unsigned>>= 30
  grs = h    if  signed<
out22 &= _2p30m1x4
stack_FVGS20 = out22
  m = mnew   if  signed<
FVGS23 = stack_FVGS23
GSFV23 = FVGS23[1,0]
  z = stack_m1[1]
mod23 = stack_mod23
4x ta = int32 uuss1 * int32 FVGS22
  oldg = grs
4x tb = int32 vvrr1 * int32 GSFV22
4x out23plus = ta + tb
  h = grs + fuv
4x ta = int32 uuss0 * int32 FVGS23
4x tb = int32 vvrr0 * int32 GSFV23
              =? grs & 1
4x out23 = ta + tb
4x out23 += out23plus
  z = m   if !=
4x ta = int32 d0 * int32 mod23
4x tb = int32 d1 * int32 mod22
4x out23plus2 = ta + tb
  h = grs if  =
4x out23plus2 += carryy
4x out23 += out23plus2
  mnew = m + 1
4x carryy = out23 + _2p63m2p33x4 
4x carryy unsigned>>= 30
  grs -= fuv
out23 &= _2p30m1x4
stack_FVGS21 = out23
  (int64) grs >>= 1
FVGS24 = stack_FVGS24
GSFV24 = FVGS24[1,0]
  (int64) h >>= 1
mod24 = stack_mod24
4x ta = int32 uuss1 * int32 FVGS23
  m = -m
4x tb = int32 vvrr1 * int32 GSFV23
4x out24plus = ta + tb
                 signed<? z - 0
4x ta = int32 uuss0 * int32 FVGS24
4x tb = int32 vvrr0 * int32 GSFV24
  fuv = oldg if !signed<
4x out24 = ta + tb
4x out24 += out24plus
  grs = h    if  signed<
4x ta = int32 d0 * int32 mod24
4x tb = int32 d1 * int32 mod23
4x out24plus2 = ta + tb
  m = mnew   if  signed<
4x out24plus2 += carryy
  z = stack_m1[1]
4x out24 += out24plus2
4x carryy = out24 + _2p63m2p33x4 
  oldg = grs
4x carryy unsigned>>= 30
out24 &= _2p30m1x4
stack_FVGS22 = out24
  h = grs + fuv
FVGS25 = stack_FVGS25
              =? grs & 1
GSFV25 = FVGS25[1,0]
mod25 = stack_mod25
4x ta = int32 uuss1 * int32 FVGS24
  z = m   if !=
4x tb = int32 vvrr1 * int32 GSFV24
4x out25plus = ta + tb
  h = grs if  =
4x ta = int32 uuss0 * int32 FVGS25
4x tb = int32 vvrr0 * int32 GSFV25
  mnew = m + 1
4x out25 = ta + tb
4x out25 += out25plus
  grs -= fuv
4x ta = int32 d0 * int32 mod25
4x tb = int32 d1 * int32 mod24
  (int64) grs >>= 1
4x out25plus2 = ta + tb
4x out25plus2 += carryy
  (int64) h >>= 1
4x out25 += out25plus2
4x carryy = out25 + _2p63m2p33x4 
  m = -m
4x carryy unsigned>>= 30
out25 &= _2p30m1x4
                 signed<? z - 0
stack_FVGS23 = out25
FVGS26 = stack_FVGS26
  fuv = oldg if !signed<
GSFV26 = FVGS26[1,0]
mod26 = stack_mod26
4x ta = int32 uuss1 * int32 FVGS25
  grs = h    if  signed<
4x tb = int32 vvrr1 * int32 GSFV25
4x out26plus = ta + tb
  m = mnew   if  signed<
4x ta = int32 uuss0 * int32 FVGS26
  z = -1
4x tb = int32 vvrr0 * int32 GSFV26
4x out26 = ta + tb
4x out26 += out26plus
  oldg = grs
4x ta = int32 d0 * int32 mod26
4x tb = int32 d1 * int32 mod25
  h = grs + fuv
4x out26plus2 = ta + tb
4x out26plus2 += carryy
              =? grs & 1
4x out26 += out26plus2
4x carryy = out26 + _2p63m2p33x4 
  z = m   if !=
4x carryy unsigned>>= 30
  h = grs if  =
out26 &= _2p30m1x4
stack_FVGS24 = out26
FVGS27 = stack_FVGS27
GSFV27 = FVGS27[1,0]
  mnew = m + 1
mod27 = stack_mod27
  grs -= fuv
4x ta = int32 uuss1 * int32 FVGS26
4x tb = int32 vvrr1 * int32 GSFV26
4x out27plus = ta + tb
  (int64) grs >>= 1
4x ta = int32 uuss0 * int32 FVGS27
4x tb = int32 vvrr0 * int32 GSFV27
  (int64) h >>= 1
4x out27 = ta + tb
4x out27 += out27plus
  m = -m
4x ta = int32 d0 * int32 mod27
4x tb = int32 d1 * int32 mod26
                 signed<? z - 0
4x out27plus2 = ta + tb
4x out27plus2 += carryy
  fuv = oldg if !signed<
4x out27 += out27plus2
4x carryy = out27 + _2p63m2p33x4 
  grs = h    if  signed<
4x carryy unsigned>>= 30
out27 &= _2p30m1x4
  m = mnew   if  signed<
stack_FVGS25 = out27
FVGS28 = stack_FVGS28
  z = stack_m1[1]
GSFV28 = FVGS28[1,0]
mod28 = stack_mod28
  oldg = grs
4x ta = int32 uuss1 * int32 FVGS27
4x tb = int32 vvrr1 * int32 GSFV27
  h = grs + fuv
4x out28plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS28
              =? grs & 1
4x tb = int32 vvrr0 * int32 GSFV28
4x out28 = ta + tb
  z = m   if !=
4x out28 += out28plus
4x ta = int32 d0 * int32 mod28
4x tb = int32 d1 * int32 mod27
  h = grs if  =
4x out28plus2 = ta + tb
4x out28plus2 += carryy
  mnew = m + 1
4x out28 += out28plus2
4x carryy = out28 + _2p63m2p33x4 
  grs -= fuv
4x carryy unsigned>>= 30
out28 &= _2p30m1x4
  (int64) grs >>= 1
stack_FVGS26 = out28
FVGS29 = stack_FVGS29
  (int64) h >>= 1
GSFV29 = FVGS29[1,0]
mod29 = stack_mod29
  m = -m
4x ta = int32 uuss1 * int32 FVGS28
4x tb = int32 vvrr1 * int32 GSFV28
                 signed<? z - 0
4x out29plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS29
  fuv = oldg if !signed<
4x tb = int32 vvrr0 * int32 GSFV29
4x out29 = ta + tb
  grs = h    if  signed<
4x out29 += out29plus
4x ta = int32 d0 * int32 mod29
  m = mnew   if  signed<
4x tb = int32 d1 * int32 mod28
4x out29plus2 = ta + tb
  z = -1
4x out29plus2 += carryy
4x out29 += out29plus2
4x carryy = out29 + _2p63m2p33x4 
  oldg = grs
4x carryy unsigned>>= 30
out29 &= _2p30m1x4
stack_FVGS27 = out29
  h = grs + fuv
FVGS30 = stack_FVGS30
              =? grs & 1
GSFV30 = FVGS30[1,0]
mod30 = stack_mod30
  z = m   if !=
4x ta = int32 uuss1 * int32 FVGS29
4x tb = int32 vvrr1 * int32 GSFV29
  h = grs if  =
4x out30plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS30
  mnew = m + 1
4x tb = int32 vvrr0 * int32 GSFV30
4x out30 = ta + tb
  grs -= fuv
4x out30 += out30plus
4x ta = int32 d0 * int32 mod30
  (int64) grs >>= 1
4x tb = int32 d1 * int32 mod29
4x out30plus2 = ta + tb
  (int64) h >>= 1
4x out30plus2 += carryy
4x out30 += out30plus2
  m = -m
4x carryy = out30 + _2p63m2p33x4 
4x carryy unsigned>>= 30
                 signed<? z - 0
out30 &= _2p30m1x4
stack_FVGS28 = out30
FVGS31 = stack_FVGS31
  fuv = oldg if !signed<
GSFV31 = FVGS31[1,0]
mod31 = stack_mod31
4x ta = int32 uuss1 * int32 FVGS30
  grs = h    if  signed<
4x tb = int32 vvrr1 * int32 GSFV30
  m = mnew   if  signed<
4x out31plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS31
  z = -1
4x tb = int32 vvrr0 * int32 GSFV31
4x out31 = ta + tb
  oldg = grs
4x out31 += out31plus
4x ta = int32 d0 * int32 mod31
  h = grs + fuv
4x tb = int32 d1 * int32 mod30
4x out31plus2 = ta + tb
              =? grs & 1
4x out31plus2 += carryy
4x out31 += out31plus2
  z = m   if !=
4x carryy = out31 + _2p63m2p33x4 
4x carryy unsigned>>= 30
  h = grs if  =
out31 &= _2p30m1x4
stack_FVGS29 = out31
  mnew = m + 1
FVGS32 = stack_FVGS32
GSFV32 = FVGS32[1,0]
  grs -= fuv
mod32 = stack_mod32
4x ta = int32 uuss1 * int32 FVGS31
  (int64) grs >>= 1
4x tb = int32 vvrr1 * int32 GSFV31
4x out32plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS32
  (int64) h >>= 1
4x tb = int32 vvrr0 * int32 GSFV32
4x out32 = ta + tb
  m = -m
4x out32 += out32plus
4x ta = int32 d0 * int32 mod32
                 signed<? z - 0
4x tb = int32 d1 * int32 mod31
4x out32plus2 = ta + tb
  fuv = oldg if !signed<
4x out32plus2 += carryy
4x out32 += out32plus2
4x carryy = out32 + _2p63m2p33x4 
  grs = h    if  signed<
4x carryy unsigned>>= 30
  m = mnew   if  signed<
out32 &= _2p30m1x4
stack_FVGS30 = out32
extract_init:
  _2p20a2p41 = stack_2p20a2p41
FVGS33 = stack_FVGS33
GSFV33 = FVGS33[1,0]
mod33 = stack_mod33
4x ta = int32 uuss1 * int32 FVGS32
  s = grs + _2p20a2p41
4x tb = int32 vvrr1 * int32 GSFV32
4x out33plus = ta + tb
  (int64) s >>= 42
4x ta = int32 uuss0 * int32 FVGS33
4x tb = int32 vvrr0 * int32 GSFV33
4x out33 = ta + tb
  t2 = g
4x out33 += out33plus
  g *= s  
4x ta = int32 d0 * int32 mod33
4x tb = int32 d1 * int32 mod32
4x out33plus2 = ta + tb
  v = fuv + _2p20a2p41
4x out33plus2 += carryy
4x out33 += out33plus2
  (int64) v >>= 42
4x carryy = out33 + _2p63m2p33x4 
4x carryy unsigned>>= 30
  t2 *= v
out33 &= _2p30m1x4
stack_FVGS31 = out33
  _2p20 = stack_2p20
FVGS34 = stack_FVGS34
GSFV34 = FVGS34[1,0]
  r = grs + _2p20
mod34 = stack_mod34
4x ta = int32 uuss1 * int32 FVGS33
  r <<= 22
4x tb = int32 vvrr1 * int32 GSFV33
4x out34plus = ta + tb
  (int64) r >>= 43
4x ta = int32 uuss0 * int32 FVGS34
4x tb = int32 vvrr0 * int32 GSFV34
      rax = f
4x out34 = ta + tb
4x out34 += out34plus
      rax *= r
4x ta = int32 d0 * int32 mod34
4x tb = int32 d1 * int32 mod33
4x out34plus2 = ta + tb
  u = fuv + _2p20
4x out34plus2 += carryy
4x out34 += out34plus2
  u <<= 22
4x carryy = out34 + _2p63m2p33x4 
4x carryy unsigned>>= 30
  (int64) u >>= 43
out34 &= _2p30m1x4
stack_FVGS32 = out34
       f *= u
_2p33x4 = stack_2p33x4
4x ta = int32 uuss1 * int32 FVGS34
       f += t2
4x tb = int32 vvrr1 * int32 GSFV34
4x out35plus = ta + tb
       g += rax
4x ta = int32 mod34 * int32 d1
4x out35 = ta + carryy
  (int64) f >>= 20
4x out35 += out35plus
4x out36 = out35 + _2p63m2p33x4
  (int64) g >>= 20
4x out36 unsigned >>= 30
4x out36 -= _2p33x4
  inplace stack_vvrr[0] = v
out35 &= _2p30m1x4
stack_FVGS33 = out35
  inplace stack_uuss[0] = u
stack_FVGS34 = out36
  inplace stack_uuss[2] = s
  inplace stack_vvrr[2] = r
  loop = 2
# endswap

loop20:

  fuv = f & ~ _m2p20
  grs = g & ~ _m2p20
  #fuv = f
  #grs = g
  #fuv <<= 44
  #grs <<= 44
  #(int64) fuv >>= 44
  #(int64) grs >>= 44
  fuv += stack_m2p41
  grs += stack_m2p62

j = 4
loop2:
# Rep #0
  z = stack_m1[1]
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #1
  z = stack_m1[1]
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #2
  z = stack_m1[1]
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #3
  z = stack_m1[1]
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #4
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

 =? j -= 1
goto loop2 if !=

  =? loop -= 1		
goto lastloop if =

# extract u,v,r,s
extract:

  _2p20a2p41 = stack_2p20a2p41
  s = grs + _2p20a2p41
  (int64) s >>= 42

  t2 = g
  g *= s  
  # g = gs

  v = fuv + _2p20a2p41
  (int64) v >>= 42

  t2 *= v
  # t2 = gv

  _2p20 = stack_2p20
  r = grs + _2p20
  r <<= 22
  (int64) r >>= 43

      rax = f
      rax *= r
      # rax = fr

  u = fuv + _2p20
  u <<= 22
  (int64) u >>= 43

       f *= u
       f += t2
       g += rax

  (int64) f >>= 20
  (int64) g >>= 20

#first loops iteration has NOT been removed
#=? loop - 2  
#goto first_loop if =

  t0 = stack_uuss[0]
  t0 *= u
  t1 = stack_vvrr[2]
  t1 *= v

  rtimesoldv = stack_vvrr[0]
  u *= rtimesoldv
  stimesolds = stack_uuss[2]
  v *= stimesolds
  rtimesoldv *= r
  stimesolds *= s
  r *= stack_uuss[0]
  s *= stack_vvrr[2]

  v += u
  u = t0 + t1

  r += s
  s = rtimesoldv + stimesolds

first_loop:


  inplace stack_vvrr[0] = v
  inplace stack_uuss[0] = u
  inplace stack_uuss[2] = s
  inplace stack_vvrr[2] = r


goto loop20 

lastloop:

  _2p20a2p41 = stack_2p20a2p41
  s = grs + _2p20a2p41
  (int64) s >>= 42
  v = fuv + _2p20a2p41
  (int64) v >>= 42

  t1 = stack_vvrr[2]
  t1 *= v
  stimesolds = stack_uuss[2]
  v *= stimesolds
  stimesolds *= s

  _2p20 = stack_2p20
  r = grs + _2p20
  r <<= 22
  (int64) r >>= 43
  u = fuv + _2p20
  u <<= 22
  (int64) u >>= 43

  t0 = stack_uuss[0]
  t0 *= u
  rtimesoldv = stack_vvrr[0]
  u *= rtimesoldv
  rtimesoldv *= r

  s *= stack_vvrr[2]
  r *= stack_uuss[0]

  v += u
  u = t0 + t1
  r += s
  s = rtimesoldv + stimesolds

  #f = stack_fxgx[0]
  #g = stack_fxgx[2]
  #f0 = stack_fygy[0]
  #g0 = stack_fygy[2]

  t0 = stack_FVGS0[0]
  t1 = stack_FVGS1[0]
  t1 <<= 30
  f = t0 + t1
 
  t0 = stack_FVGS0[2]
  t1 = stack_FVGS1[2]
  t1 <<= 30
  g = t0 + t1

  t0 = stack_FVGS2[0]
  t1 = stack_FVGS3[0]
  t1 <<= 30
  f0 = t0 + t1
 
  t0 = stack_FVGS2[2]
  t1 = stack_FVGS3[2]
  t1 <<= 30
  g0 = t0 + t1

=? i -= 1
goto bigloop if !=



last_transition:

fuv &= 2
t0 = fuv - 1
# t0 should be +1 or -1, depending on fuv was -1 or +1
u *= t0
v *= t0

# transition portion


new vvrr
vvrr = v,vvrr[1],0,0
vvrr = vvrr[0],r,0,0

FVGS0 = stack_FVGS0

new uuss
uuss = u,uuss[1],0,0
uuss = uuss[0],s,0,0

GSFV0 = FVGS0[1,0]

uuss = uuss[0,0,1,1]
vvrr = vvrr[0,0,1,1]


_2p30m1x4 = stack_2p30m1x4

uuss0 = uuss & _2p30m1x4
vvrr0 = vvrr & _2p30m1x4 

_2p63x4 = stack_2p63x4

uuss1 = uuss ^ _2p63x4
vvrr1 = vvrr ^ _2p63x4
4x uuss1 unsigned>>= 30
4x vvrr1 unsigned>>= 30

_2p33x4 = stack_2p33x4

4x uuss1 -= _2p33x4
4x vvrr1 -= _2p33x4

4x ta = int32 uuss0 * int32 FVGS0
4x tb = int32 vvrr0 * int32 GSFV0
4x out0 = ta + tb

minvx4 = 4x stack_minv
mod0 = stack_mod0

4x d0 = int32 minvx4 * int32 out0
d0 &= _2p30m1x4
4x ta = int32 mod0 * int32 d0
4x out0 += ta

4x carryy = out0 +_2p63x4
4x carryy unsigned>>= 30


FVGS1 = stack_FVGS1
GSFV1 = FVGS1[1,0]
mod1 = stack_mod1
4x ta = int32 uuss1 * int32 FVGS0
4x tb = int32 vvrr1 * int32 GSFV0
4x out1plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS1
4x tb = int32 vvrr0 * int32 GSFV1
4x out1 = ta + tb
4x out1 += out1plus
4x ta = int32 d0 * int32 mod1
4x ta += carryy
4x out1 += ta
4x d1 = int32 minvx4 * int32 out1
d1 &= _2p30m1x4
4x ta = int32 mod0 * int32 d1
4x out1 += ta
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out1 + _2p63m2p33x4 
4x carryy unsigned>>= 30

FVGS2 = stack_FVGS2
GSFV2 = FVGS2[1,0]
4x ta = int32 uuss1 * int32 FVGS1
4x out2 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV1
4x out2 += tb
4x ta = int32 uuss0 * int32 FVGS2
4x out2 += ta
4x tb = int32 vvrr0 * int32 GSFV2
4x out2 += tb
4x tb = int32 d1 * int32 mod1
4x out2 += tb
mod2 = stack_mod2
4x ta = int32 d0 * int32 mod2
4x out2 += ta
_2p30m1x4 = stack_2p30m1x4
_2p29x4 = stack_2p29x4
4x d2 = int32 minvx4 * int32 out2
d2 &= _2p30m1x4
d2 ^= _2p29x4
4x d2 -=  _2p29x4
4x ta = int32 mod0 * int32 d2
4x out2 += ta
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out2 + _2p63m2p33x4 
4x carryy unsigned>>= 30


FVGS3 = stack_FVGS3
GSFV3 = FVGS3[1,0]
4x ta = int32 uuss1 * int32 FVGS2
4x out3 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV2
4x out3 += tb
4x ta = int32 uuss0 * int32 FVGS3
4x out3 += ta
4x tb = int32 vvrr0 * int32 GSFV3
4x out3 += tb
mod3 = stack_mod3
4x ta = int32 d2 * int32 mod1
4x out3 += ta
4x tb = int32 d1 * int32 mod2
4x out3 += tb
4x ta = int32 d0 * int32 mod3
4x out3 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out3 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out3 &= _2p30m1x4
stack_FVGS0 = out3

FVGS4 = stack_FVGS4
GSFV4 = FVGS4[1,0]
4x ta = int32 uuss1 * int32 FVGS3
4x out4 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV3
4x out4 += tb
4x ta = int32 uuss0 * int32 FVGS4
4x out4 += ta
4x tb = int32 vvrr0 * int32 GSFV4
4x out4 += tb
mod4 = stack_mod4
4x ta = int32 d2 * int32 mod2
4x out4 += ta
4x tb = int32 d1 * int32 mod3
4x out4 += tb
4x ta = int32 d0 * int32 mod4
4x out4 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out4 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out4 &= _2p30m1x4
stack_FVGS1 = out4

FVGS5 = stack_FVGS5
GSFV5 = FVGS5[1,0]
4x ta = int32 uuss1 * int32 FVGS4
4x out5 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV4
4x out5 += tb
4x ta = int32 uuss0 * int32 FVGS5
4x out5 += ta
4x tb = int32 vvrr0 * int32 GSFV5
4x out5 += tb
mod5 = stack_mod5
4x ta = int32 d2 * int32 mod3
4x out5 += ta
4x tb = int32 d1 * int32 mod4
4x out5 += tb
4x ta = int32 d0 * int32 mod5
4x out5 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out5 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out5 &= _2p30m1x4
stack_FVGS2 = out5

FVGS6 = stack_FVGS6
GSFV6 = FVGS6[1,0]
4x ta = int32 uuss1 * int32 FVGS5
4x out6 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV5
4x out6 += tb
4x ta = int32 uuss0 * int32 FVGS6
4x out6 += ta
4x tb = int32 vvrr0 * int32 GSFV6
4x out6 += tb
mod6 = stack_mod6
4x ta = int32 d2 * int32 mod4
4x out6 += ta
4x tb = int32 d1 * int32 mod5
4x out6 += tb
4x ta = int32 d0 * int32 mod6
4x out6 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out6 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out6 &= _2p30m1x4
stack_FVGS3 = out6

FVGS7 = stack_FVGS7
GSFV7 = FVGS7[1,0]
4x ta = int32 uuss1 * int32 FVGS6
4x out7 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV6
4x out7 += tb
4x ta = int32 uuss0 * int32 FVGS7
4x out7 += ta
4x tb = int32 vvrr0 * int32 GSFV7
4x out7 += tb
mod7 = stack_mod7
4x ta = int32 d2 * int32 mod5
4x out7 += ta
4x tb = int32 d1 * int32 mod6
4x out7 += tb
4x ta = int32 d0 * int32 mod7
4x out7 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out7 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out7 &= _2p30m1x4
stack_FVGS4 = out7

FVGS8 = stack_FVGS8
GSFV8 = FVGS8[1,0]
4x ta = int32 uuss1 * int32 FVGS7
4x out8 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV7
4x out8 += tb
4x ta = int32 uuss0 * int32 FVGS8
4x out8 += ta
4x tb = int32 vvrr0 * int32 GSFV8
4x out8 += tb
mod8 = stack_mod8
4x ta = int32 d2 * int32 mod6
4x out8 += ta
4x tb = int32 d1 * int32 mod7
4x out8 += tb
4x ta = int32 d0 * int32 mod8
4x out8 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out8 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out8 &= _2p30m1x4
stack_FVGS5 = out8

FVGS9 = stack_FVGS9
GSFV9 = FVGS9[1,0]
4x ta = int32 uuss1 * int32 FVGS8
4x out9 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV8
4x out9 += tb
4x ta = int32 uuss0 * int32 FVGS9
4x out9 += ta
4x tb = int32 vvrr0 * int32 GSFV9
4x out9 += tb
mod9 = stack_mod9
4x ta = int32 d2 * int32 mod7
4x out9 += ta
4x tb = int32 d1 * int32 mod8
4x out9 += tb
4x ta = int32 d0 * int32 mod9
4x out9 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out9 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out9 &= _2p30m1x4
stack_FVGS6 = out9

FVGS10 = stack_FVGS10
GSFV10 = FVGS10[1,0]
4x ta = int32 uuss1 * int32 FVGS9
4x out10 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV9
4x out10 += tb
4x ta = int32 uuss0 * int32 FVGS10
4x out10 += ta
4x tb = int32 vvrr0 * int32 GSFV10
4x out10 += tb
mod10 = stack_mod10
4x ta = int32 d2 * int32 mod8
4x out10 += ta
4x tb = int32 d1 * int32 mod9
4x out10 += tb
4x ta = int32 d0 * int32 mod10
4x out10 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out10 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out10 &= _2p30m1x4
stack_FVGS7 = out10

FVGS11 = stack_FVGS11
GSFV11 = FVGS11[1,0]
4x ta = int32 uuss1 * int32 FVGS10
4x out11 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV10
4x out11 += tb
4x ta = int32 uuss0 * int32 FVGS11
4x out11 += ta
4x tb = int32 vvrr0 * int32 GSFV11
4x out11 += tb
mod11 = stack_mod11
4x ta = int32 d2 * int32 mod9
4x out11 += ta
4x tb = int32 d1 * int32 mod10
4x out11 += tb
4x ta = int32 d0 * int32 mod11
4x out11 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out11 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out11 &= _2p30m1x4
stack_FVGS8 = out11

FVGS12 = stack_FVGS12
GSFV12 = FVGS12[1,0]
4x ta = int32 uuss1 * int32 FVGS11
4x out12 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV11
4x out12 += tb
4x ta = int32 uuss0 * int32 FVGS12
4x out12 += ta
4x tb = int32 vvrr0 * int32 GSFV12
4x out12 += tb
mod12 = stack_mod12
4x ta = int32 d2 * int32 mod10
4x out12 += ta
4x tb = int32 d1 * int32 mod11
4x out12 += tb
4x ta = int32 d0 * int32 mod12
4x out12 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out12 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out12 &= _2p30m1x4
stack_FVGS9 = out12

FVGS13 = stack_FVGS13
GSFV13 = FVGS13[1,0]
4x ta = int32 uuss1 * int32 FVGS12
4x out13 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV12
4x out13 += tb
4x ta = int32 uuss0 * int32 FVGS13
4x out13 += ta
4x tb = int32 vvrr0 * int32 GSFV13
4x out13 += tb
mod13 = stack_mod13
4x ta = int32 d2 * int32 mod11
4x out13 += ta
4x tb = int32 d1 * int32 mod12
4x out13 += tb
4x ta = int32 d0 * int32 mod13
4x out13 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out13 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out13 &= _2p30m1x4
stack_FVGS10 = out13

FVGS14 = stack_FVGS14
GSFV14 = FVGS14[1,0]
4x ta = int32 uuss1 * int32 FVGS13
4x out14 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV13
4x out14 += tb
4x ta = int32 uuss0 * int32 FVGS14
4x out14 += ta
4x tb = int32 vvrr0 * int32 GSFV14
4x out14 += tb
mod14 = stack_mod14
4x ta = int32 d2 * int32 mod12
4x out14 += ta
4x tb = int32 d1 * int32 mod13
4x out14 += tb
4x ta = int32 d0 * int32 mod14
4x out14 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out14 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out14 &= _2p30m1x4
stack_FVGS11 = out14

FVGS15 = stack_FVGS15
GSFV15 = FVGS15[1,0]
4x ta = int32 uuss1 * int32 FVGS14
4x out15 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV14
4x out15 += tb
4x ta = int32 uuss0 * int32 FVGS15
4x out15 += ta
4x tb = int32 vvrr0 * int32 GSFV15
4x out15 += tb
mod15 = stack_mod15
4x ta = int32 d2 * int32 mod13
4x out15 += ta
4x tb = int32 d1 * int32 mod14
4x out15 += tb
4x ta = int32 d0 * int32 mod15
4x out15 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out15 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out15 &= _2p30m1x4
stack_FVGS12 = out15

FVGS16 = stack_FVGS16
GSFV16 = FVGS16[1,0]
4x ta = int32 uuss1 * int32 FVGS15
4x out16 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV15
4x out16 += tb
4x ta = int32 uuss0 * int32 FVGS16
4x out16 += ta
4x tb = int32 vvrr0 * int32 GSFV16
4x out16 += tb
mod16 = stack_mod16
4x ta = int32 d2 * int32 mod14
4x out16 += ta
4x tb = int32 d1 * int32 mod15
4x out16 += tb
4x ta = int32 d0 * int32 mod16
4x out16 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out16 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out16 &= _2p30m1x4
stack_FVGS13 = out16

FVGS17 = stack_FVGS17
GSFV17 = FVGS17[1,0]
4x ta = int32 uuss1 * int32 FVGS16
4x out17 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV16
4x out17 += tb
4x ta = int32 uuss0 * int32 FVGS17
4x out17 += ta
4x tb = int32 vvrr0 * int32 GSFV17
4x out17 += tb
mod17 = stack_mod17
4x ta = int32 d2 * int32 mod15
4x out17 += ta
4x tb = int32 d1 * int32 mod16
4x out17 += tb
4x ta = int32 d0 * int32 mod17
4x out17 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out17 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out17 &= _2p30m1x4
stack_FVGS14 = out17

FVGS18 = stack_FVGS18
GSFV18 = FVGS18[1,0]
4x ta = int32 uuss1 * int32 FVGS17
4x out18 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV17
4x out18 += tb
4x ta = int32 uuss0 * int32 FVGS18
4x out18 += ta
4x tb = int32 vvrr0 * int32 GSFV18
4x out18 += tb
mod18 = stack_mod18
4x ta = int32 d2 * int32 mod16
4x out18 += ta
4x tb = int32 d1 * int32 mod17
4x out18 += tb
4x ta = int32 d0 * int32 mod18
4x out18 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out18 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out18 &= _2p30m1x4
stack_FVGS15 = out18

FVGS19 = stack_FVGS19
GSFV19 = FVGS19[1,0]
4x ta = int32 uuss1 * int32 FVGS18
4x out19 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV18
4x out19 += tb
4x ta = int32 uuss0 * int32 FVGS19
4x out19 += ta
4x tb = int32 vvrr0 * int32 GSFV19
4x out19 += tb
mod19 = stack_mod19
4x ta = int32 d2 * int32 mod17
4x out19 += ta
4x tb = int32 d1 * int32 mod18
4x out19 += tb
4x ta = int32 d0 * int32 mod19
4x out19 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out19 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out19 &= _2p30m1x4
stack_FVGS16 = out19

FVGS20 = stack_FVGS20
GSFV20 = FVGS20[1,0]
4x ta = int32 uuss1 * int32 FVGS19
4x out20 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV19
4x out20 += tb
4x ta = int32 uuss0 * int32 FVGS20
4x out20 += ta
4x tb = int32 vvrr0 * int32 GSFV20
4x out20 += tb
mod20 = stack_mod20
4x ta = int32 d2 * int32 mod18
4x out20 += ta
4x tb = int32 d1 * int32 mod19
4x out20 += tb
4x ta = int32 d0 * int32 mod20
4x out20 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out20 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out20 &= _2p30m1x4
stack_FVGS17 = out20

FVGS21 = stack_FVGS21
GSFV21 = FVGS21[1,0]
4x ta = int32 uuss1 * int32 FVGS20
4x out21 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV20
4x out21 += tb
4x ta = int32 uuss0 * int32 FVGS21
4x out21 += ta
4x tb = int32 vvrr0 * int32 GSFV21
4x out21 += tb
mod21 = stack_mod21
4x ta = int32 d2 * int32 mod19
4x out21 += ta
4x tb = int32 d1 * int32 mod20
4x out21 += tb
4x ta = int32 d0 * int32 mod21
4x out21 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out21 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out21 &= _2p30m1x4
stack_FVGS18 = out21

FVGS22 = stack_FVGS22
GSFV22 = FVGS22[1,0]
4x ta = int32 uuss1 * int32 FVGS21
4x out22 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV21
4x out22 += tb
4x ta = int32 uuss0 * int32 FVGS22
4x out22 += ta
4x tb = int32 vvrr0 * int32 GSFV22
4x out22 += tb
mod22 = stack_mod22
4x ta = int32 d2 * int32 mod20
4x out22 += ta
4x tb = int32 d1 * int32 mod21
4x out22 += tb
4x ta = int32 d0 * int32 mod22
4x out22 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out22 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out22 &= _2p30m1x4
stack_FVGS19 = out22

FVGS23 = stack_FVGS23
GSFV23 = FVGS23[1,0]
4x ta = int32 uuss1 * int32 FVGS22
4x out23 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV22
4x out23 += tb
4x ta = int32 uuss0 * int32 FVGS23
4x out23 += ta
4x tb = int32 vvrr0 * int32 GSFV23
4x out23 += tb
mod23 = stack_mod23
4x ta = int32 d2 * int32 mod21
4x out23 += ta
4x tb = int32 d1 * int32 mod22
4x out23 += tb
4x ta = int32 d0 * int32 mod23
4x out23 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out23 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out23 &= _2p30m1x4
stack_FVGS20 = out23

FVGS24 = stack_FVGS24
GSFV24 = FVGS24[1,0]
4x ta = int32 uuss1 * int32 FVGS23
4x out24 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV23
4x out24 += tb
4x ta = int32 uuss0 * int32 FVGS24
4x out24 += ta
4x tb = int32 vvrr0 * int32 GSFV24
4x out24 += tb
mod24 = stack_mod24
4x ta = int32 d2 * int32 mod22
4x out24 += ta
4x tb = int32 d1 * int32 mod23
4x out24 += tb
4x ta = int32 d0 * int32 mod24
4x out24 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out24 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out24 &= _2p30m1x4
stack_FVGS21 = out24

FVGS25 = stack_FVGS25
GSFV25 = FVGS25[1,0]
4x ta = int32 uuss1 * int32 FVGS24
4x out25 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV24
4x out25 += tb
4x ta = int32 uuss0 * int32 FVGS25
4x out25 += ta
4x tb = int32 vvrr0 * int32 GSFV25
4x out25 += tb
mod25 = stack_mod25
4x ta = int32 d2 * int32 mod23
4x out25 += ta
4x tb = int32 d1 * int32 mod24
4x out25 += tb
4x ta = int32 d0 * int32 mod25
4x out25 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out25 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out25 &= _2p30m1x4
stack_FVGS22 = out25

FVGS26 = stack_FVGS26
GSFV26 = FVGS26[1,0]
4x ta = int32 uuss1 * int32 FVGS25
4x out26 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV25
4x out26 += tb
4x ta = int32 uuss0 * int32 FVGS26
4x out26 += ta
4x tb = int32 vvrr0 * int32 GSFV26
4x out26 += tb
mod26 = stack_mod26
4x ta = int32 d2 * int32 mod24
4x out26 += ta
4x tb = int32 d1 * int32 mod25
4x out26 += tb
4x ta = int32 d0 * int32 mod26
4x out26 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out26 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out26 &= _2p30m1x4
stack_FVGS23 = out26

FVGS27 = stack_FVGS27
GSFV27 = FVGS27[1,0]
4x ta = int32 uuss1 * int32 FVGS26
4x out27 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV26
4x out27 += tb
4x ta = int32 uuss0 * int32 FVGS27
4x out27 += ta
4x tb = int32 vvrr0 * int32 GSFV27
4x out27 += tb
mod27 = stack_mod27
4x ta = int32 d2 * int32 mod25
4x out27 += ta
4x tb = int32 d1 * int32 mod26
4x out27 += tb
4x ta = int32 d0 * int32 mod27
4x out27 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out27 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out27 &= _2p30m1x4
stack_FVGS24 = out27

FVGS28 = stack_FVGS28
GSFV28 = FVGS28[1,0]
4x ta = int32 uuss1 * int32 FVGS27
4x out28 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV27
4x out28 += tb
4x ta = int32 uuss0 * int32 FVGS28
4x out28 += ta
4x tb = int32 vvrr0 * int32 GSFV28
4x out28 += tb
mod28 = stack_mod28
4x ta = int32 d2 * int32 mod26
4x out28 += ta
4x tb = int32 d1 * int32 mod27
4x out28 += tb
4x ta = int32 d0 * int32 mod28
4x out28 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out28 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out28 &= _2p30m1x4
stack_FVGS25 = out28

FVGS29 = stack_FVGS29
GSFV29 = FVGS29[1,0]
4x ta = int32 uuss1 * int32 FVGS28
4x out29 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV28
4x out29 += tb
4x ta = int32 uuss0 * int32 FVGS29
4x out29 += ta
4x tb = int32 vvrr0 * int32 GSFV29
4x out29 += tb
mod29 = stack_mod29
4x ta = int32 d2 * int32 mod27
4x out29 += ta
4x tb = int32 d1 * int32 mod28
4x out29 += tb
4x ta = int32 d0 * int32 mod29
4x out29 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out29 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out29 &= _2p30m1x4
stack_FVGS26 = out29

FVGS30 = stack_FVGS30
GSFV30 = FVGS30[1,0]
4x ta = int32 uuss1 * int32 FVGS29
4x out30 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV29
4x out30 += tb
4x ta = int32 uuss0 * int32 FVGS30
4x out30 += ta
4x tb = int32 vvrr0 * int32 GSFV30
4x out30 += tb
mod30 = stack_mod30
4x ta = int32 d2 * int32 mod28
4x out30 += ta
4x tb = int32 d1 * int32 mod29
4x out30 += tb
4x ta = int32 d0 * int32 mod30
4x out30 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out30 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out30 &= _2p30m1x4
stack_FVGS27 = out30

FVGS31 = stack_FVGS31
GSFV31 = FVGS31[1,0]
4x ta = int32 uuss1 * int32 FVGS30
4x out31 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV30
4x out31 += tb
4x ta = int32 uuss0 * int32 FVGS31
4x out31 += ta
4x tb = int32 vvrr0 * int32 GSFV31
4x out31 += tb
mod31 = stack_mod31
4x ta = int32 d2 * int32 mod29
4x out31 += ta
4x tb = int32 d1 * int32 mod30
4x out31 += tb
4x ta = int32 d0 * int32 mod31
4x out31 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out31 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out31 &= _2p30m1x4
stack_FVGS28 = out31

FVGS32 = stack_FVGS32
GSFV32 = FVGS32[1,0]
4x ta = int32 uuss1 * int32 FVGS31
4x out32 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV31
4x out32 += tb
4x ta = int32 uuss0 * int32 FVGS32
4x out32 += ta
4x tb = int32 vvrr0 * int32 GSFV32
4x out32 += tb
mod32 = stack_mod32
4x ta = int32 d2 * int32 mod30
4x out32 += ta
4x tb = int32 d1 * int32 mod31
4x out32 += tb
4x ta = int32 d0 * int32 mod32
4x out32 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out32 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out32 &= _2p30m1x4
stack_FVGS29 = out32

FVGS33 = stack_FVGS33
GSFV33 = FVGS33[1,0]
4x ta = int32 uuss1 * int32 FVGS32
4x out33 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV32
4x out33 += tb
4x ta = int32 uuss0 * int32 FVGS33
4x out33 += ta
4x tb = int32 vvrr0 * int32 GSFV33
4x out33 += tb
mod33 = stack_mod33
4x ta = int32 d2 * int32 mod31
4x out33 += ta
4x tb = int32 d1 * int32 mod32
4x out33 += tb
4x ta = int32 d0 * int32 mod33
4x out33 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out33 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out33 &= _2p30m1x4
stack_FVGS30 = out33

FVGS34 = stack_FVGS34
GSFV34 = FVGS34[1,0]
4x ta = int32 uuss1 * int32 FVGS33
4x out34 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV33
4x out34 += tb
4x ta = int32 uuss0 * int32 FVGS34
4x out34 += ta
4x tb = int32 vvrr0 * int32 GSFV34
4x out34 += tb
mod34 = stack_mod34
4x ta = int32 d2 * int32 mod32
4x out34 += ta
4x tb = int32 d1 * int32 mod33
4x out34 += tb
4x ta = int32 d0 * int32 mod34
4x out34 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out34 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out34 &= _2p30m1x4
stack_FVGS31 = out34
4x ta = int32 uuss1 * int32 FVGS34
4x tb = int32 vvrr1 * int32 GSFV34
4x out35plus = ta + tb
4x ta = int32 mod34 * int32 d1
4x tb = int32 mod33 * int32 d2
4x tb += carryy
4x out35 = ta + tb
4x out35 += out35plus

4x carryy = out35 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out35 &= _2p30m1x4
stack_FVGS32 = out35
_2p33x4 = stack_2p33x4
4x tb = int32 mod34 * int32 d2
4x out36 = tb + carryy
4x out37 = out36 + _2p63m2p33x4
4x out37 unsigned >>= 30
4x out37 -= _2p33x4
out36 &= _2p30m1x4
stack_FVGS34 = out37
z = stack_FVGS34[1]
(int64) z >>= 63
stack_FVGS33 = out36
# now V is between +- p, conditionally add a p into V using z
# each V is theoretically then from 0 to 2^31, except the top
# THEN need to collapse the V's into the answer
table = stack_out
a0 = stack_FVGS0[1]
h = z
h &= stack_mod0[0]
a0 += h
t1 = stack_FVGS1[1]
h = z
h &= stack_mod1[0]
t1 += h
t1 <<= 30
a0 += t1
t2 = stack_FVGS2[1]
h = z
h &= stack_mod2[0]
t2 += h
a1 = t2
t2 <<= 60
(int64) a1 >>= 4
carry? a0 += t2
a1 += 0 + carry
mem64[table +  0] = a0
t3 = stack_FVGS3[1]
h = z
h &= stack_mod3[0]
t3 += h
t3 <<= 26
a1 += t3
t4 = stack_FVGS4[1]
h = z
h &= stack_mod4[0]
t4 += h
a2 = t4
t4 <<= 56
(int64) a2 >>= 8
carry? a1 += t4
a2 += 0 + carry
mem64[table +  8] = a1
t5 = stack_FVGS5[1]
h = z
h &= stack_mod5[0]
t5 += h
t5 <<= 22
a2 += t5
t6 = stack_FVGS6[1]
h = z
h &= stack_mod6[0]
t6 += h
a3 = t6
t6 <<= 52
(int64) a3 >>= 12
carry? a2 += t6
a3 += 0 + carry
mem64[table + 16] = a2
t7 = stack_FVGS7[1]
h = z
h &= stack_mod7[0]
t7 += h
t7 <<= 18
a3 += t7
t8 = stack_FVGS8[1]
h = z
h &= stack_mod8[0]
t8 += h
a4 = t8
t8 <<= 48
(int64) a4 >>= 16
carry? a3 += t8
a4 += 0 + carry
mem64[table + 24] = a3
t9 = stack_FVGS9[1]
h = z
h &= stack_mod9[0]
t9 += h
t9 <<= 14
a4 += t9
t10 = stack_FVGS10[1]
h = z
h &= stack_mod10[0]
t10 += h
a5 = t10
t10 <<= 44
(int64) a5 >>= 20
carry? a4 += t10
a5 += 0 + carry
mem64[table + 32] = a4
t11 = stack_FVGS11[1]
h = z
h &= stack_mod11[0]
t11 += h
t11 <<= 10
a5 += t11
t12 = stack_FVGS12[1]
h = z
h &= stack_mod12[0]
t12 += h
a6 = t12
t12 <<= 40
(int64) a6 >>= 24
carry? a5 += t12
a6 += 0 + carry
mem64[table + 40] = a5
t13 = stack_FVGS13[1]
h = z
h &= stack_mod13[0]
t13 += h
t13 <<= 6
a6 += t13
t14 = stack_FVGS14[1]
h = z
h &= stack_mod14[0]
t14 += h
a7 = t14
t14 <<= 36
(int64) a7 >>= 28
carry? a6 += t14
a7 += 0 + carry
mem64[table + 48] = a6
t15 = stack_FVGS15[1]
h = z
h &= stack_mod15[0]
t15 += h
t15 <<= 2
a7 += t15
t16 = stack_FVGS16[1]
h = z
h &= stack_mod16[0]
t16 += h
t16 <<= 32
a7 += t16
t17 = stack_FVGS17[1]
h = z
h &= stack_mod17[0]
t17 += h
a8 = t17
t17 <<= 62
(int64) a8 >>= 2
carry? a7 += t17
a8 += 0 + carry
mem64[table + 56] = a7
t18 = stack_FVGS18[1]
h = z
h &= stack_mod18[0]
t18 += h
t18 <<= 28
a8 += t18
t19 = stack_FVGS19[1]
h = z
h &= stack_mod19[0]
t19 += h
a9 = t19
t19 <<= 58
(int64) a9 >>= 6
carry? a8 += t19
a9 += 0 + carry
mem64[table + 64] = a8
t20 = stack_FVGS20[1]
h = z
h &= stack_mod20[0]
t20 += h
t20 <<= 24
a9 += t20
t21 = stack_FVGS21[1]
h = z
h &= stack_mod21[0]
t21 += h
a10 = t21
t21 <<= 54
(int64) a10 >>= 10
carry? a9 += t21
a10 += 0 + carry
mem64[table + 72] = a9
t22 = stack_FVGS22[1]
h = z
h &= stack_mod22[0]
t22 += h
t22 <<= 20
a10 += t22
t23 = stack_FVGS23[1]
h = z
h &= stack_mod23[0]
t23 += h
a11 = t23
t23 <<= 50
(int64) a11 >>= 14
carry? a10 += t23
a11 += 0 + carry
mem64[table + 80] = a10
t24 = stack_FVGS24[1]
h = z
h &= stack_mod24[0]
t24 += h
t24 <<= 16
a11 += t24
t25 = stack_FVGS25[1]
h = z
h &= stack_mod25[0]
t25 += h
a12 = t25
t25 <<= 46
(int64) a12 >>= 18
carry? a11 += t25
a12 += 0 + carry
mem64[table + 88] = a11
t26 = stack_FVGS26[1]
h = z
h &= stack_mod26[0]
t26 += h
t26 <<= 12
a12 += t26
t27 = stack_FVGS27[1]
h = z
h &= stack_mod27[0]
t27 += h
a13 = t27
t27 <<= 42
(int64) a13 >>= 22
carry? a12 += t27
a13 += 0 + carry
mem64[table + 96] = a12
t28 = stack_FVGS28[1]
h = z
h &= stack_mod28[0]
t28 += h
t28 <<= 8
a13 += t28
t29 = stack_FVGS29[1]
h = z
h &= stack_mod29[0]
t29 += h
a14 = t29
t29 <<= 38
(int64) a14 >>= 26
carry? a13 += t29
a14 += 0 + carry
mem64[table + 104] = a13
t30 = stack_FVGS30[1]
h = z
h &= stack_mod30[0]
t30 += h
t30 <<= 4
a14 += t30
t31 = stack_FVGS31[1]
h = z
h &= stack_mod31[0]
t31 += h
a15 = t31
t31 <<= 34
(int64) a15 >>= 30
carry? a14 += t31
a15 += 0 + carry
mem64[table + 112] = a14
t32 = stack_FVGS32[1]
h = z
h &= stack_mod32[0]
t32 += h
a15 += t32
t33 = stack_FVGS33[1]
h = z
h &= stack_mod33[0]
t33 += h
t33 <<= 30
a15 += t33
t34 = stack_FVGS34[1]
h = z
h &= stack_mod34[0]
t34 += h
t34 <<= 60
a15 += t34
mem64[table + 120] = a15

caller_r11 = stack_r11
caller_r12 = stack_r12
caller_r13 = stack_r13
caller_r14 = stack_r14
caller_r15 = stack_r15
caller_rbx = stack_rbx
caller_rbp = stack_rbp
return
