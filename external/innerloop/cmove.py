#!/usr/bin/python3
import sys
import re
from math import log,ceil,floor,sqrt

def loadx4(s) :
    #print("%sx4 = 4x %s" % (s,s))
    print("%sx4 = stack%sx4" % (s,s))

def innerloop15 () :
    print
    for i in range(15) :
        print('''# Rep #%d
  z = 0

  h = grs + fuv
  mnew = stack_m1
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew ^= m
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m -= 1
                 signed<? z - 0

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1
''' % (i))
    
def next_fvgs(i) :
    print('''
FVGS%d = mem256[ FVGS +  %d ]
GSFV%d = FVGS%d[1,0]
4x ta = int32 uuss1 * int32 FVGS%d
4x tb = int32 vvrr1 * int32 GSFV%d
4x out%dplus = ta + tb
4x ta = int32 uuss0 * int32 FVGS%d
4x tb = int32 vvrr0 * int32 GSFV%d
4x out%d = ta + tb
4x out%d += out%dplus
4x out%d += carryy
''' % (i,32*i,i,i,i-1,i-1,i,i,i,i,i,i,i))

def carry_01(i,s) :
    print('''
4x d%d = int32 out%d * int32 _inv19_2p30x4
d%d &= _2p30m1x4
4x %s = d%d << 15
4x d%d = int32 d%d * int32 _19x4
4x out%d -= d%d
''' % (i,i,i,s,i,i,i,i,i))

def m2p33_srl30_p2p33(a,b) :
    print('''
4x %s = %s + stack_2p63m2p33x4 
4x %s unsigned>>= 30
''' % (b,a,b))

def m2p33_srl30_p2p33_mask30(a,b) :
    m2p33_srl30_p2p33(a,b)
    print("%s &= _2p30m1x4" % a)

print('''# Generated by cmove.py
int64 m
int64 f
int64 g
int64 u
int64 v
int64 r
int64 s
int64 FVGS
int64 uvrs
int64 fuv
int64 grs
int64 mnew
int64 z
int64 loop
int64 _m2p15
int64 _2p16
int64 _2p31
int64 _m2p32
int64 _m2p48
int64 _2p16a2p32
int64 rax
int64 rdx
int64 t0
int64 t1
int64 t2
int64 h
int64 oldg
int64 i
stack64 stack_r11
stack64 stack_r12
stack64 stack_r13
stack64 stack_r14
stack64 stack_r15
stack64 stack_rbx
stack64 stack_rbp

stack64 stack_m1
#stack64 stack_f   #inplace stack_fxgx[0] = f
#stack64 stack_g   #inplace stack_fxgx[2] = g
#stack64 stack_u   #inplace stack_uuss[0] = u
#stack64 stack_v   #inplace stack_vvrr[0] = v
#stack64 stack_r   #inplace stack_vvrr[2] = r
#stack64 stack_s   #inplace stack_uuss[2] = s
stack64 stack_m
stack64 stack_2p16a2p32
stack64 stack_m2p15
stack64 stack_2p16
stack64 stack_2p31
stack64 stack_m2p32
stack64 stack_m2p48
stack64 stack_FVGS

stack256 stack_fxgx
stack256 stack_uuss
stack256 stack_vvrr

reg256 carryy
reg256 d0
reg256 d1
reg256 out0
''')
for i in range(9) :
    print("reg256 FVGS%d\nreg256 GSFV%d" % (i,i))
    print("reg256 out%d\nreg256 out%dplus" % (i+1,i+1))
print('''
reg256 out8plus2
reg256 out10
reg256 ta
reg256 tb
reg256 uuss
reg256 uuss0
reg256 uuss1
reg256 vvrr
reg256 vvrr0
reg256 vvrr1
''')

constants = ["_19","_0_19","_32767","_inv19_2p30","_2p30m1","_2p33","_2p48","_2p63","_2p63m2p33"]
for i in range(len(constants)) : print("reg256 %sx4" % (constants[i]))
for i in range(len(constants)) : print("stack256 stack%sx4" % (constants[i]))

print('''enter innerloop60_transition
# input_0 = FVGS
# input_1 = table of constants

stack_r11 = caller_r11
stack_r12 = caller_r12
stack_r13 = caller_r13
stack_r14 = caller_r14
stack_r15 = caller_r15
stack_rbx = caller_rbx
stack_rbp = caller_rbp

stack_FVGS = input_0
f = mem64[ input_0 + 32]
g = mem64[ input_0 + 48]
f <<= 30
g <<= 30
f += mem64[ input_0 + 0]
g += mem64[ input_0 +16]
#inplace stack_fxgx[0] = f
#inplace stack_fxgx[2] = g

# set up stack values
                m = -1
         stack_m1 = m
           _m2p15 = -32768
#      stack_m2p15 = _m2p15
            _2p16 = 65536
       stack_2p16 = _2p16
            _2p31 = 2147483648
       stack_2p31 = _2p31     
           _m2p32 = -4294967296
      stack_m2p32 = _m2p32
           _m2p48 = -281474976710656
      stack_m2p48 = _m2p48
       _2p16a2p32 = 4295032832
  stack_2p16a2p32 = _2p16a2p32
''')
for i in range(len(constants)) :
    print("%sx4 = mem256[ input_1 + %3d ]" % (constants[i],32*i))
    print("stack%sx4 = %sx4" % (constants[i],constants[i]))

print('''i = 12
bigloop:
# entering condition: f and g are 60-bit signed ints

  loop = 4

loop15:

  fuv = f & ~ _m2p15
  grs = g & ~ _m2p15
  fuv |= stack_m2p32
  grs |= stack_m2p48
''')

innerloop15()
print('''
# extract u,v,r,s
extract:

  _2p16a2p32 = stack_2p16a2p32
  s = grs + _2p16a2p32
  (int64) s >>= 33

      rax = g
      (int128) rdx rax = rax * s
      t2 = rax
      t1 = rdx

  _2p16 = stack_2p16
  grs += _2p16
  (int64) grs >>= 17
  r = (int16) grs
  # s = grs

      rax = f
      (int128) rdx rax = rax * r
      carry? t2 += rax
             t1 += rdx + carry
      t2 = (t1 t2) >> 15	 
    
  v = fuv + _2p16a2p32
  (int64) v >>= 33

  fuv += _2p16
  (int64) fuv >>= 17
  u = (int16) fuv
  # v = fuv

      rax = f
      (int128) rdx rax = rax * u
      f = rax
      t0 = rdx
      rax = g
      (int128) rdx rax = rax * v
      carry? f += rax
             t0 += rdx + carry
      f = (t0 f) >> 15
      g = t2

  =? loop - 4  
  goto first_loop if =

  t0 = u
  t0 *= stack_uuss[0]
  t1 = v
  t1 *= stack_vvrr[2]

  u *= stack_vvrr[0]
  v *= stack_uuss[2]
  v += u
  u = t0 + t1

  t0 = r
  t0 *= stack_uuss[0]
  t1 = s
  t1 *= stack_vvrr[2]

  r *= stack_vvrr[0]
  s *= stack_uuss[2]
  s += r
  r = t0 + t1

first_loop:

  inplace stack_uuss[0] = u
  inplace stack_vvrr[0] = v
  inplace stack_vvrr[2] = r
  inplace stack_uuss[2] = s

  =? loop -= 1		

goto loop15 if !=
#stack_m = m

# going into transition
FVGS = stack_FVGS
''')


print('''
# transition portion
#inplace stack_uuss[0] = u
#inplace stack_vvrr[0] = v
#inplace stack_vvrr[2] = r
#inplace stack_uuss[2] = s

uuss = stack_uuss[0,0,2,2]
vvrr = stack_vvrr[0,0,2,2]
''')
loadx4("_2p30m1")
print('''
uuss0 = uuss & _2p30m1x4
vvrr0 = vvrr & _2p30m1x4 
''')
loadx4("_2p63")
print('''
uuss1 = uuss ^ _2p63x4
vvrr1 = vvrr ^ _2p63x4
4x uuss1 unsigned>>= 30
4x vvrr1 unsigned>>= 30
''')
loadx4("_2p33")
print('''
4x uuss1 -= _2p33x4
4x vvrr1 -= _2p33x4

FVGS0 = mem256[ FVGS +   0 ]
GSFV0 = FVGS0[1,0]
4x ta = int32 uuss0 * int32 FVGS0
4x tb = int32 vvrr0 * int32 GSFV0
4x out0 = ta + tb
''')
loadx4("_inv19_2p30")
loadx4("_19")
carry_01(0,"out8plus2")
print('''
4x carryy = out0 +_2p63x4
4x carryy unsigned>>= 30
''')
next_fvgs(1)
carry_01(1,"out9")
#loadx4("_2p63m2p33")
m2p33_srl30_p2p33("out1","carryy")

next_fvgs(2)
m2p33_srl30_p2p33_mask30("out2","carryy")

next_fvgs(3)
m2p33_srl30_p2p33_mask30("out3","carryy")
print("mem256[ FVGS + 32 ] = out3")

print('''# store-ahead for f0 and g0
4x ta = out3 << 30
4x ta += out2
stack_fxgx = ta
''')

next_fvgs(4)
m2p33_srl30_p2p33_mask30("out4","carryy")
print("mem256[ FVGS + 64 ] = out4")

next_fvgs(5)
m2p33_srl30_p2p33_mask30("out5","carryy")
print("mem256[ FVGS + 96 ] = out5")

next_fvgs(6)
m2p33_srl30_p2p33_mask30("out6","carryy")
print("mem256[ FVGS +128 ] = out6")

next_fvgs(7)
m2p33_srl30_p2p33_mask30("out7","carryy")
print("mem256[ FVGS +160 ] = out7")

next_fvgs(8)
print("4x out8 += out8plus2")
m2p33_srl30_p2p33_mask30("out8","carryy")
print('''mem256[ FVGS +192 ] = out8

4x ta = int32 uuss1 * int32 FVGS8
4x tb = int32 vvrr1 * int32 GSFV8
4x out9plus = ta + tb
4x out9 += out9plus
4x out9 += carryy
''')
m2p33_srl30_p2p33_mask30("out9","out10")
print("mem256[ FVGS +224 ] = out9")
loadx4("_32767")
loadx4("_2p48")
print('''
4x carryy = out10 + stack_2p63m2p33x4
4x carryy unsigned>>= 15
4x carryy -= _2p48x4
4x out10 -= _2p33x4
out10 &= _32767x4
4x carryy = int32 carryy * int32 stack_0_19x4
4x out2 += carryy
mem256[ FVGS +256 ] = out10
mem256[ FVGS +  0 ] = out2

#m = stack_m	     
#_m2p15 = stack_m2p15	

f = stack_fxgx[0]
g = stack_fxgx[2] 

=? i -= 1
goto bigloop if !=




caller_r11 = stack_r11
caller_r12 = stack_r12
caller_r13 = stack_r13
caller_r14 = stack_r14
caller_r15 = stack_r15
caller_rbx = stack_rbx
caller_rbp = stack_rbp

return 
''')



