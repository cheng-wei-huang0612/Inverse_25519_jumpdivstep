FVGS0 = stack_FVGS0
loop20_init:
  fuv = f & ~ _m2p20
new uuss
uuss = u,uuss[1],0,0
  grs = g & ~ _m2p20
  fuv += stack_m2p41
  grs += stack_m2p62
  z = -1
uuss = uuss[0],s,0,0
  oldg = grs
  h = grs + fuv
GSFV0 = FVGS0[1,0]
              =? grs & 1
  z = m   if !=
uuss = uuss[0,0,1,1]
  h = grs if  =
  mnew = m + 1
vvrr = vvrr[0,0,1,1]
  grs -= fuv
  (int64) grs >>= 1
_2p30m1x4 = stack_2p30m1x4
  (int64) h >>= 1
  m = -m
uuss0 = uuss & _2p30m1x4
                 signed<? z - 0
  fuv = oldg if !signed<
vvrr0 = vvrr & _2p30m1x4 
  grs = h    if  signed<
  m = mnew   if  signed<
_2p63x4 = stack_2p63x4
  z = -1
  oldg = grs
uuss1 = uuss ^ _2p63x4
  h = grs + fuv
              =? grs & 1
vvrr1 = vvrr ^ _2p63x4
  z = m   if !=
  h = grs if  =
4x uuss1 unsigned>>= 30
  mnew = m + 1
  grs -= fuv
4x vvrr1 unsigned>>= 30
  (int64) grs >>= 1
  (int64) h >>= 1
_2p33x4 = stack_2p33x4
  m = -m
                 signed<? z - 0
4x uuss1 -= _2p33x4
  fuv = oldg if !signed<
  grs = h    if  signed<
4x vvrr1 -= _2p33x4
  m = mnew   if  signed<
  z = -1
4x ta = int32 uuss0 * int32 FVGS0
  oldg = grs
  h = grs + fuv
4x tb = int32 vvrr0 * int32 GSFV0
              =? grs & 1
  z = m   if !=
4x out0 = ta + tb
  h = grs if  =
  mnew = m + 1
minvx4 = 4x stack_minv
  grs -= fuv
  (int64) grs >>= 1
mod0 = stack_mod0
  (int64) h >>= 1
  m = -m
4x d0 = int32 minvx4 * int32 out0
                 signed<? z - 0
  fuv = oldg if !signed<
d0 &= _2p30m1x4
  grs = h    if  signed<
  m = mnew   if  signed<
4x ta = int32 mod0 * int32 d0
  z = -1
  oldg = grs
4x out0 += ta
  h = grs + fuv
              =? grs & 1
4x carryy = out0 +_2p63x4
  z = m   if !=
  h = grs if  =
4x carryy unsigned>>= 30
  mnew = m + 1
  grs -= fuv
FVGS1 = stack_FVGS1
  (int64) grs >>= 1
  (int64) h >>= 1
GSFV1 = FVGS1[1,0]
  m = -m
                 signed<? z - 0
mod1 = stack_mod1
  fuv = oldg if !signed<
  grs = h    if  signed<
4x ta = int32 uuss1 * int32 FVGS0
  m = mnew   if  signed<
  z = -1
4x tb = int32 vvrr1 * int32 GSFV0
  oldg = grs
  h = grs + fuv
4x out1plus = ta + tb
              =? grs & 1
  z = m   if !=
4x ta = int32 uuss0 * int32 FVGS1
  h = grs if  =
  mnew = m + 1
4x tb = int32 vvrr0 * int32 GSFV1
  grs -= fuv
  (int64) grs >>= 1
4x out1 = ta + tb
  (int64) h >>= 1
  m = -m
4x out1 += out1plus
                 signed<? z - 0
  fuv = oldg if !signed<
4x ta = int32 d0 * int32 mod1
  grs = h    if  signed<
  m = mnew   if  signed<
4x ta += carryy
  z = -1
  oldg = grs
4x out1 += ta
  h = grs + fuv
              =? grs & 1
4x d1 = int32 minvx4 * int32 out1
  z = m   if !=
  h = grs if  =
d1 &= _2p30m1x4
  mnew = m + 1
  grs -= fuv
4x ta = int32 mod0 * int32 d1
  (int64) grs >>= 1
  (int64) h >>= 1
4x out1 += ta
  m = -m
                 signed<? z - 0
_2p63m2p33x4 = stack_2p63m2p33x4
  fuv = oldg if !signed<
  grs = h    if  signed<
4x carryy = out1 + _2p63m2p33x4 
  m = mnew   if  signed<
  z = -1
4x carryy unsigned>>= 30
  oldg = grs
  h = grs + fuv
FVGS2 = stack_FVGS2
              =? grs & 1
  z = m   if !=
GSFV2 = FVGS2[1,0]
  h = grs if  =
  mnew = m + 1
mod2 = stack_mod2
  grs -= fuv
  (int64) grs >>= 1
4x ta = int32 uuss1 * int32 FVGS1
  (int64) h >>= 1
  m = -m
4x tb = int32 vvrr1 * int32 GSFV1
                 signed<? z - 0
  fuv = oldg if !signed<
4x out2plus = ta + tb
  grs = h    if  signed<
  m = mnew   if  signed<
4x ta = int32 uuss0 * int32 FVGS2
  z = -1
  oldg = grs
4x tb = int32 vvrr0 * int32 GSFV2
  h = grs + fuv
              =? grs & 1
4x out2 = ta + tb
  z = m   if !=
  h = grs if  =
4x out2 += out2plus
  mnew = m + 1
  grs -= fuv
4x ta = int32 d0 * int32 mod2
  (int64) grs >>= 1
  (int64) h >>= 1
4x tb = int32 d1 * int32 mod1
  m = -m
                 signed<? z - 0
4x out2plus2 = ta + tb
  fuv = oldg if !signed<
  grs = h    if  signed<
4x out2plus2 += carryy
  m = mnew   if  signed<
  z = -1
4x out2 += out2plus2
  oldg = grs
  h = grs + fuv
4x carryy = out2 + _2p63m2p33x4 
              =? grs & 1
  z = m   if !=
4x carryy unsigned>>= 30
  h = grs if  =
  mnew = m + 1
out2 &= _2p30m1x4
  grs -= fuv
  (int64) grs >>= 1
stack_FVGS0 = out2
  (int64) h >>= 1
  m = -m
FVGS3 = stack_FVGS3
                 signed<? z - 0
  fuv = oldg if !signed<
GSFV3 = FVGS3[1,0]
  grs = h    if  signed<
  m = mnew   if  signed<
mod3 = stack_mod3
  z = -1
  oldg = grs
4x ta = int32 uuss1 * int32 FVGS2
  h = grs + fuv
              =? grs & 1
4x tb = int32 vvrr1 * int32 GSFV2
  z = m   if !=
  h = grs if  =
4x out3plus = ta + tb
  mnew = m + 1
  grs -= fuv
4x ta = int32 uuss0 * int32 FVGS3
  (int64) grs >>= 1
  (int64) h >>= 1
4x tb = int32 vvrr0 * int32 GSFV3
  m = -m
                 signed<? z - 0
4x out3 = ta + tb
  fuv = oldg if !signed<
  grs = h    if  signed<
4x out3 += out3plus
  m = mnew   if  signed<
  z = -1
4x ta = int32 d0 * int32 mod3
  oldg = grs
  h = grs + fuv
4x tb = int32 d1 * int32 mod2
              =? grs & 1
  z = m   if !=
4x out3plus2 = ta + tb
  h = grs if  =
  mnew = m + 1
4x out3plus2 += carryy
  grs -= fuv
  (int64) grs >>= 1
4x out3 += out3plus2
  (int64) h >>= 1
  m = -m
4x carryy = out3 + _2p63m2p33x4 
                 signed<? z - 0
  fuv = oldg if !signed<
4x carryy unsigned>>= 30
  grs = h    if  signed<
  m = mnew   if  signed<
out3 &= _2p30m1x4
  z = -1
  oldg = grs
stack_FVGS1 = out3
  h = grs + fuv
              =? grs & 1
FVGS4 = stack_FVGS4
  z = m   if !=
  h = grs if  =
GSFV4 = FVGS4[1,0]
  mnew = m + 1
  grs -= fuv
mod4 = stack_mod4
  (int64) grs >>= 1
  (int64) h >>= 1
4x ta = int32 uuss1 * int32 FVGS3
  m = -m
                 signed<? z - 0
4x tb = int32 vvrr1 * int32 GSFV3
  fuv = oldg if !signed<
  grs = h    if  signed<
4x out4plus = ta + tb
  m = mnew   if  signed<
  z = -1
4x ta = int32 uuss0 * int32 FVGS4
  oldg = grs
  h = grs + fuv
4x tb = int32 vvrr0 * int32 GSFV4
              =? grs & 1
  z = m   if !=
4x out4 = ta + tb
  h = grs if  =
  mnew = m + 1
4x out4 += out4plus
  grs -= fuv
  (int64) grs >>= 1
4x ta = int32 d0 * int32 mod4
  (int64) h >>= 1
  m = -m
4x tb = int32 d1 * int32 mod3
                 signed<? z - 0
  fuv = oldg if !signed<
4x out4plus2 = ta + tb
  grs = h    if  signed<
  m = mnew   if  signed<
4x out4plus2 += carryy
  z = -1
  oldg = grs
4x out4 += out4plus2
  h = grs + fuv
              =? grs & 1
4x carryy = out4 + _2p63m2p33x4 
  z = m   if !=
  h = grs if  =
4x carryy unsigned>>= 30
  mnew = m + 1
  grs -= fuv
out4 &= _2p30m1x4
  (int64) grs >>= 1
  (int64) h >>= 1
stack_FVGS2 = out4
  m = -m
                 signed<? z - 0
FVGS5 = stack_FVGS5
  fuv = oldg if !signed<
  grs = h    if  signed<
GSFV5 = FVGS5[1,0]
  m = mnew   if  signed<
  z = -1
mod5 = stack_mod5
  oldg = grs
  h = grs + fuv
4x ta = int32 uuss1 * int32 FVGS4
              =? grs & 1
  z = m   if !=
4x tb = int32 vvrr1 * int32 GSFV4
  h = grs if  =
  mnew = m + 1
4x out5plus = ta + tb
  grs -= fuv
  (int64) grs >>= 1
4x ta = int32 uuss0 * int32 FVGS5
  (int64) h >>= 1
  m = -m
4x tb = int32 vvrr0 * int32 GSFV5
                 signed<? z - 0
  fuv = oldg if !signed<
4x out5 = ta + tb
  grs = h    if  signed<
  m = mnew   if  signed<
4x out5 += out5plus
  z = -1
  oldg = grs
4x ta = int32 d0 * int32 mod5
  h = grs + fuv
              =? grs & 1
4x tb = int32 d1 * int32 mod4
  z = m   if !=
  h = grs if  =
4x out5plus2 = ta + tb
  mnew = m + 1
  grs -= fuv
4x out5plus2 += carryy
  (int64) grs >>= 1
  (int64) h >>= 1
4x out5 += out5plus2
  m = -m
                 signed<? z - 0
4x carryy = out5 + _2p63m2p33x4 
  fuv = oldg if !signed<
  grs = h    if  signed<
4x carryy unsigned>>= 30
  m = mnew   if  signed<
  z = -1
out5 &= _2p30m1x4
  oldg = grs
  h = grs + fuv
stack_FVGS3 = out5
              =? grs & 1
  z = m   if !=
FVGS6 = stack_FVGS6
  h = grs if  =
  mnew = m + 1
GSFV6 = FVGS6[1,0]
  grs -= fuv
  (int64) grs >>= 1
mod6 = stack_mod6
  (int64) h >>= 1
  m = -m
4x ta = int32 uuss1 * int32 FVGS5
                 signed<? z - 0
  fuv = oldg if !signed<
4x tb = int32 vvrr1 * int32 GSFV5
  grs = h    if  signed<
  m = mnew   if  signed<
4x out6plus = ta + tb
  z = -1
  oldg = grs
4x ta = int32 uuss0 * int32 FVGS6
  h = grs + fuv
              =? grs & 1
4x tb = int32 vvrr0 * int32 GSFV6
  z = m   if !=
  h = grs if  =
4x out6 = ta + tb
  mnew = m + 1
  grs -= fuv
4x out6 += out6plus
  (int64) grs >>= 1
  (int64) h >>= 1
4x ta = int32 d0 * int32 mod6
  m = -m
                 signed<? z - 0
4x tb = int32 d1 * int32 mod5
  fuv = oldg if !signed<
  grs = h    if  signed<
4x out6plus2 = ta + tb
  m = mnew   if  signed<
  z = -1
4x out6plus2 += carryy
  oldg = grs
  h = grs + fuv
4x out6 += out6plus2
              =? grs & 1
  z = m   if !=
4x carryy = out6 + _2p63m2p33x4 
  h = grs if  =
  mnew = m + 1
4x carryy unsigned>>= 30
  grs -= fuv
  (int64) grs >>= 1
out6 &= _2p30m1x4
  (int64) h >>= 1
  m = -m
stack_FVGS4 = out6
                 signed<? z - 0
  fuv = oldg if !signed<
_2p33x4 = stack_2p33x4
  grs = h    if  signed<
  m = mnew   if  signed<
4x ta = int32 uuss1 * int32 FVGS6
  z = -1
  oldg = grs
4x tb = int32 vvrr1 * int32 GSFV6
  h = grs + fuv
              =? grs & 1
4x out7plus = ta + tb
  z = m   if !=
  h = grs if  =
4x ta = int32 mod6 * int32 d1
  mnew = m + 1
  grs -= fuv
4x out7 = ta + carryy
  (int64) grs >>= 1
  (int64) h >>= 1
4x out7 += out7plus
  m = -m
                 signed<? z - 0
4x out8 = out7 + _2p63m2p33x4
  fuv = oldg if !signed<
  grs = h    if  signed<
4x out8 unsigned >>= 30
  m = mnew   if  signed<
extract_init:
  _2p20a2p41 = stack_2p20a2p41
4x out8 -= _2p33x4
  s = grs + _2p20a2p41
out7 &= _2p30m1x4
  (int64) s >>= 42
  t2 = g
stack_FVGS5 = out7
  g *= s  
  v = fuv + _2p20a2p41
stack_FVGS6 = out8
  (int64) v >>= 42
  t2 *= v
  _2p20 = stack_2p20
  r = grs + _2p20
  r <<= 22
  (int64) r >>= 43
      rax = f
      rax *= r
  u = fuv + _2p20
  u <<= 22
  (int64) u >>= 43
       f *= u
       f += t2
       g += rax
  (int64) f >>= 20
  (int64) g >>= 20
  inplace stack_vvrr[0] = v
  inplace stack_uuss[0] = u
  inplace stack_uuss[2] = s
  inplace stack_vvrr[2] = r
  loop = 2
