# Generated by cmov-mont0.py
int64 m
int64 f
int64 g
int64 u
int64 v
int64 r
int64 s
int64 uvrs
int64 fuv
int64 grs
int64 mnew
int64 z
int64 loop
int64 rax
int64 rdx
int64 t0
int64 t1
int64 t2
int64 h
int64 oldg
int64 i
int64 j
int64 f0
int64 g0
int64 minv
stack64 stack_minv

int64 rtimesoldv
int64 stimesolds

stack64 stack_out

stack256 stack_m1
#inplace stack_fxgx[0] = f
#inplace stack_fxgx[2] = g
#inplace stack_uuss[0] = u
#inplace stack_vvrr[0] = v
#inplace stack_vvrr[2] = r
#inplace stack_uuss[2] = s
stack64 stack_m

stack256 stack_fxgx
stack256 stack_uuss
stack256 stack_vvrr
stack256 stack_fygy

stack64 stack_fuv
stack64 stack_f

reg256 carryy
reg256 minvx4
reg256 d0
reg256 d1
reg256 out0

int64 a0
reg256 mod0
stack256 stack_mod0
reg256 FVGS0
reg256 GSFV0
stack256 stack_FVGS0
reg256 out1
reg256 out1plus
reg256 out2plus2
int64 a1
reg256 mod1
stack256 stack_mod1
reg256 FVGS1
reg256 GSFV1
stack256 stack_FVGS1
reg256 out2
reg256 out2plus
reg256 out3plus2
int64 a2
reg256 mod2
stack256 stack_mod2
reg256 FVGS2
reg256 GSFV2
stack256 stack_FVGS2
reg256 out3
reg256 out3plus
reg256 out4plus2
int64 a3
reg256 mod3
stack256 stack_mod3
reg256 FVGS3
reg256 GSFV3
stack256 stack_FVGS3
reg256 out4
reg256 out4plus
reg256 out5plus2
int64 a4
reg256 mod4
stack256 stack_mod4
reg256 FVGS4
reg256 GSFV4
stack256 stack_FVGS4
reg256 out5
reg256 out5plus
reg256 out6plus2
int64 a5
reg256 mod5
stack256 stack_mod5
reg256 FVGS5
reg256 GSFV5
stack256 stack_FVGS5
reg256 out6
reg256 out6plus
reg256 out7plus2
int64 a6
reg256 mod6
stack256 stack_mod6
reg256 FVGS6
reg256 GSFV6
stack256 stack_FVGS6
reg256 out7
reg256 out7plus
reg256 out8plus2
int64 a7
reg256 mod7
stack256 stack_mod7
reg256 FVGS7
reg256 GSFV7
stack256 stack_FVGS7
reg256 out8
reg256 out8plus
int64 a8
reg256 mod8
stack256 stack_mod8
reg256 FVGS8
reg256 GSFV8
stack256 stack_FVGS8
reg256 out9
reg256 out9plus

reg256 out10
reg256 ta
reg256 tb
reg256 uuss
reg256 uuss0
reg256 uuss1
reg256 vvrr
reg256 vvrr0
reg256 vvrr1


int64            _m2p20
stack64     stack_m2p20
int64             _2p20
stack64      stack_2p20
int64            _m2p41
stack64     stack_m2p41
int64            _m2p62
stack64     stack_m2p62
int64        _2p20a2p41
stack64 stack_2p20a2p41
reg256 _2p30m1x4
reg256 _2p33x4
reg256 _2p63x4
reg256 _2p63m2p33x4
stack256 stack_2p30m1x4
stack256 stack_2p33x4
stack256 stack_2p63x4
stack256 stack_2p63m2p33x4

enter inverse_256
# input_0 = input
# input_1 = output
# input_2 = table of constants

new stack_m1
stack_out = input_1

stack64 stack_r11
stack_r11 = caller_r11
stack64 stack_r12
stack_r12 = caller_r12
stack64 stack_r13
stack_r13 = caller_r13
stack64 stack_r14
stack_r14 = caller_r14
stack64 stack_r15
stack_r15 = caller_r15
stack64 stack_rbx
stack_rbx = caller_rbx
stack64 stack_rbp
stack_rbp = caller_rbp
a0 = mem64[input_0 +  0]
a1 = mem64[input_0 +  8]
a2 = mem64[input_0 + 16]
a3 = mem64[input_0 + 24]

t0 = -1152921504606846976
g = a0 & ~ t0
d1 = mem256[ input_2 + 128 ]
d0 = 4x d1[0]
stack_mod0 = d0
stack_FVGS0 = d1
t0 = a0
t0 &= 1073741823
inplace stack_FVGS0[2] = t0
d1 = mem256[ input_2 + 160 ]
d0 = 4x d1[0]
stack_mod1 = d0
stack_FVGS1 = d1
t0 = a0
(uint64) t0 >>= 30
t0 &= 1073741823
inplace stack_FVGS1[2] = t0
d1 = mem256[ input_2 + 192 ]
d0 = 4x d1[0]
stack_mod2 = d0
stack_FVGS2 = d1
a0 = (a1 a0) >> 60
a0 &= 1073741823
inplace stack_FVGS2[2] = a0
d1 = mem256[ input_2 + 224 ]
d0 = 4x d1[0]
stack_mod3 = d0
stack_FVGS3 = d1
t0 = a1
(uint64) t0 >>= 26
t0 &= 1073741823
inplace stack_FVGS3[2] = t0
d1 = mem256[ input_2 + 256 ]
d0 = 4x d1[0]
stack_mod4 = d0
stack_FVGS4 = d1
a1 = (a2 a1) >> 56
a1 &= 1073741823
inplace stack_FVGS4[2] = a1
d1 = mem256[ input_2 + 288 ]
d0 = 4x d1[0]
stack_mod5 = d0
stack_FVGS5 = d1
t0 = a2
(uint64) t0 >>= 22
t0 &= 1073741823
inplace stack_FVGS5[2] = t0
d1 = mem256[ input_2 + 320 ]
d0 = 4x d1[0]
stack_mod6 = d0
stack_FVGS6 = d1
a2 = (a3 a2) >> 52
a2 &= 1073741823
inplace stack_FVGS6[2] = a2
d1 = mem256[ input_2 + 352 ]
d0 = 4x d1[0]
stack_mod7 = d0
stack_FVGS7 = d1
t0 = a3
(uint64) t0 >>= 18
t0 &= 1073741823
inplace stack_FVGS7[2] = t0
d1 = mem256[ input_2 + 384]
d0 = 4x d1[0]
stack_mod8 = d0
stack_FVGS8 = d1
(uint64) a3 >>= 48
inplace stack_FVGS8[2] = a3
minv = mem64[ input_2 + 416]
stack_minv = minv

f = stack_FVGS0[0]
f0 = stack_FVGS1[0]
f0 <<= 30
f += f0 

#                 m = -1
#                  z = 0
                  m = 0
                  z = -1
inplace stack_m1[0] = m
inplace stack_m1[1] = z

             _m2p20 = -1048576
        stack_m2p20 = _m2p20
              _2p20 = 1048576
         stack_2p20 = _2p20
             _m2p41 = -2199023255552
        stack_m2p41 = _m2p41
             _m2p62 = -4611686018427387904
        stack_m2p62 = _m2p62
         _2p20a2p41 = 2199024304128
    stack_2p20a2p41 = _2p20a2p41

          _2p30m1x4 = mem256[ input_2 +   0 ]
     stack_2p30m1x4 = _2p30m1x4
            _2p33x4 = mem256[ input_2 +  32 ]
       stack_2p33x4 = _2p33x4
            _2p63x4 = mem256[ input_2 +  64 ]
       stack_2p63x4 = _2p63x4
       _2p63m2p33x4 = mem256[ input_2 +  96 ]
  stack_2p63m2p33x4 = _2p63m2p33x4
# idle loop
i = 10
u = 1152921504606846976
v = 0
s = u
r = 0


bigloop:

# transition portion

      rax = g
      (int128) rdx rax = rax * s
      t2 = rax
      t1 = rdx

      rax = f
      (int128) rdx rax = rax * r
      carry? t2 += rax
             t1 += rdx + carry
      t2 = (t1 t2) >> 60	 

      rax = f
      (int128) rdx rax = rax * u
      f = rax
      t0 = rdx
      rax = g
      (int128) rdx rax = rax * v
      carry? f += rax
             t0 += rdx + carry
      f = (t0 f) >> 60

new vvrr
vvrr = v,vvrr[1],0,0
vvrr = vvrr[0],r,0,0

      v *= g0
      g0 *= s

      r *= f0
      f0 *= u
      f0 += v
      g0 += r

      f += f0
      g = t2+g0

# at this point new f and g are computed.

# startswap
FVGS0 = stack_FVGS0
loop20_init:
  fuv = f & ~ _m2p20
new uuss
uuss = u,uuss[1],0,0
  grs = g & ~ _m2p20
  fuv += stack_m2p41
  grs += stack_m2p62
  z = -1
uuss = uuss[0],s,0,0
  oldg = grs
GSFV0 = FVGS0[1,0]
  h = grs + fuv
              =? grs & 1
uuss = uuss[0,0,1,1]
  z = m   if !=
  h = grs if  =
vvrr = vvrr[0,0,1,1]
  mnew = m + 1
  grs -= fuv
_2p30m1x4 = stack_2p30m1x4
  (int64) grs >>= 1
uuss0 = uuss & _2p30m1x4
  (int64) h >>= 1
  m = -m
vvrr0 = vvrr & _2p30m1x4 
                 signed<? z - 0
  fuv = oldg if !signed<
_2p63x4 = stack_2p63x4
  grs = h    if  signed<
  m = mnew   if  signed<
uuss1 = uuss ^ _2p63x4
  z = -1
vvrr1 = vvrr ^ _2p63x4
  oldg = grs
  h = grs + fuv
4x uuss1 unsigned>>= 30
              =? grs & 1
  z = m   if !=
4x vvrr1 unsigned>>= 30
  h = grs if  =
  mnew = m + 1
_2p33x4 = stack_2p33x4
  grs -= fuv
4x uuss1 -= _2p33x4
  (int64) grs >>= 1
  (int64) h >>= 1
4x vvrr1 -= _2p33x4
  m = -m
                 signed<? z - 0
4x ta = int32 uuss0 * int32 FVGS0
  fuv = oldg if !signed<
  grs = h    if  signed<
4x tb = int32 vvrr0 * int32 GSFV0
  m = mnew   if  signed<
4x out0 = ta + tb
  z = -1
  oldg = grs
minvx4 = 4x stack_minv
  h = grs + fuv
              =? grs & 1
mod0 = stack_mod0
  z = m   if !=
  h = grs if  =
4x d0 = int32 minvx4 * int32 out0
  mnew = m + 1
d0 &= _2p30m1x4
  grs -= fuv
  (int64) grs >>= 1
4x ta = int32 mod0 * int32 d0
  (int64) h >>= 1
  m = -m
4x out0 += ta
                 signed<? z - 0
  fuv = oldg if !signed<
4x carryy = out0 +_2p63x4
  grs = h    if  signed<
4x carryy unsigned>>= 30
  m = mnew   if  signed<
  z = -1
FVGS1 = stack_FVGS1
  oldg = grs
  h = grs + fuv
GSFV1 = FVGS1[1,0]
              =? grs & 1
  z = m   if !=
mod1 = stack_mod1
  h = grs if  =
4x ta = int32 uuss1 * int32 FVGS0
  mnew = m + 1
  grs -= fuv
4x tb = int32 vvrr1 * int32 GSFV0
  (int64) grs >>= 1
  (int64) h >>= 1
4x out1plus = ta + tb
  m = -m
                 signed<? z - 0
4x ta = int32 uuss0 * int32 FVGS1
  fuv = oldg if !signed<
4x tb = int32 vvrr0 * int32 GSFV1
  grs = h    if  signed<
  m = mnew   if  signed<
4x out1 = ta + tb
  z = -1
  oldg = grs
4x out1 += out1plus
  h = grs + fuv
              =? grs & 1
4x ta = int32 d0 * int32 mod1
  z = m   if !=
4x ta += carryy
  h = grs if  =
  mnew = m + 1
4x out1 += ta
  grs -= fuv
  (int64) grs >>= 1
4x d1 = int32 minvx4 * int32 out1
  (int64) h >>= 1
  m = -m
d1 &= _2p30m1x4
                 signed<? z - 0
4x ta = int32 mod0 * int32 d1
  fuv = oldg if !signed<
  grs = h    if  signed<
4x out1 += ta
  m = mnew   if  signed<
  z = -1
_2p63m2p33x4 = stack_2p63m2p33x4
  oldg = grs
  h = grs + fuv
4x carryy = out1 + _2p63m2p33x4 
              =? grs & 1
4x carryy unsigned>>= 30
  z = m   if !=
  h = grs if  =
FVGS2 = stack_FVGS2
  mnew = m + 1
  grs -= fuv
GSFV2 = FVGS2[1,0]
  (int64) grs >>= 1
  (int64) h >>= 1
mod2 = stack_mod2
  m = -m
4x ta = int32 uuss1 * int32 FVGS1
                 signed<? z - 0
  fuv = oldg if !signed<
4x tb = int32 vvrr1 * int32 GSFV1
  grs = h    if  signed<
  m = mnew   if  signed<
4x out2plus = ta + tb
  z = -1
  oldg = grs
4x ta = int32 uuss0 * int32 FVGS2
  h = grs + fuv
4x tb = int32 vvrr0 * int32 GSFV2
              =? grs & 1
  z = m   if !=
4x out2 = ta + tb
  h = grs if  =
  mnew = m + 1
4x out2 += out2plus
  grs -= fuv
  (int64) grs >>= 1
4x ta = int32 d0 * int32 mod2
  (int64) h >>= 1
4x tb = int32 d1 * int32 mod1
  m = -m
                 signed<? z - 0
4x out2plus2 = ta + tb
  fuv = oldg if !signed<
  grs = h    if  signed<
4x out2plus2 += carryy
  m = mnew   if  signed<
  z = -1
4x out2 += out2plus2
  oldg = grs
4x carryy = out2 + _2p63m2p33x4 
  h = grs + fuv
              =? grs & 1
4x carryy unsigned>>= 30
  z = m   if !=
  h = grs if  =
out2 &= _2p30m1x4
  mnew = m + 1
  grs -= fuv
stack_FVGS0 = out2
  (int64) grs >>= 1
FVGS3 = stack_FVGS3
  (int64) h >>= 1
  m = -m
GSFV3 = FVGS3[1,0]
                 signed<? z - 0
  fuv = oldg if !signed<
mod3 = stack_mod3
  grs = h    if  signed<
  m = mnew   if  signed<
4x ta = int32 uuss1 * int32 FVGS2
  z = -1
4x tb = int32 vvrr1 * int32 GSFV2
  oldg = grs
  h = grs + fuv
4x out3plus = ta + tb
              =? grs & 1
  z = m   if !=
4x ta = int32 uuss0 * int32 FVGS3
  h = grs if  =
  mnew = m + 1
4x tb = int32 vvrr0 * int32 GSFV3
  grs -= fuv
4x out3 = ta + tb
  (int64) grs >>= 1
  (int64) h >>= 1
4x out3 += out3plus
  m = -m
                 signed<? z - 0
4x ta = int32 d0 * int32 mod3
  fuv = oldg if !signed<
  grs = h    if  signed<
4x tb = int32 d1 * int32 mod2
  m = mnew   if  signed<
4x out3plus2 = ta + tb
  z = -1
  oldg = grs
4x out3plus2 += carryy
  h = grs + fuv
              =? grs & 1
4x out3 += out3plus2
  z = m   if !=
  h = grs if  =
4x carryy = out3 + _2p63m2p33x4 
  mnew = m + 1
4x carryy unsigned>>= 30
  grs -= fuv
  (int64) grs >>= 1
out3 &= _2p30m1x4
  (int64) h >>= 1
  m = -m
stack_FVGS1 = out3
                 signed<? z - 0
  fuv = oldg if !signed<
FVGS4 = stack_FVGS4
  grs = h    if  signed<
GSFV4 = FVGS4[1,0]
  m = mnew   if  signed<
  z = -1
mod4 = stack_mod4
  oldg = grs
  h = grs + fuv
4x ta = int32 uuss1 * int32 FVGS3
              =? grs & 1
  z = m   if !=
4x tb = int32 vvrr1 * int32 GSFV3
  h = grs if  =
4x out4plus = ta + tb
  mnew = m + 1
  grs -= fuv
4x ta = int32 uuss0 * int32 FVGS4
  (int64) grs >>= 1
  (int64) h >>= 1
4x tb = int32 vvrr0 * int32 GSFV4
  m = -m
                 signed<? z - 0
4x out4 = ta + tb
  fuv = oldg if !signed<
4x out4 += out4plus
  grs = h    if  signed<
  m = mnew   if  signed<
4x ta = int32 d0 * int32 mod4
  z = -1
  oldg = grs
4x tb = int32 d1 * int32 mod3
  h = grs + fuv
              =? grs & 1
4x out4plus2 = ta + tb
  z = m   if !=
4x out4plus2 += carryy
  h = grs if  =
  mnew = m + 1
4x out4 += out4plus2
  grs -= fuv
  (int64) grs >>= 1
4x carryy = out4 + _2p63m2p33x4 
  (int64) h >>= 1
  m = -m
4x carryy unsigned>>= 30
                 signed<? z - 0
out4 &= _2p30m1x4
  fuv = oldg if !signed<
  grs = h    if  signed<
stack_FVGS2 = out4
  m = mnew   if  signed<
  z = -1
FVGS5 = stack_FVGS5
  oldg = grs
  h = grs + fuv
GSFV5 = FVGS5[1,0]
              =? grs & 1
mod5 = stack_mod5
  z = m   if !=
  h = grs if  =
4x ta = int32 uuss1 * int32 FVGS4
  mnew = m + 1
  grs -= fuv
4x tb = int32 vvrr1 * int32 GSFV4
  (int64) grs >>= 1
  (int64) h >>= 1
4x out5plus = ta + tb
  m = -m
4x ta = int32 uuss0 * int32 FVGS5
                 signed<? z - 0
  fuv = oldg if !signed<
4x tb = int32 vvrr0 * int32 GSFV5
  grs = h    if  signed<
  m = mnew   if  signed<
4x out5 = ta + tb
  z = -1
  oldg = grs
4x out5 += out5plus
  h = grs + fuv
4x ta = int32 d0 * int32 mod5
              =? grs & 1
  z = m   if !=
4x tb = int32 d1 * int32 mod4
  h = grs if  =
  mnew = m + 1
4x out5plus2 = ta + tb
  grs -= fuv
  (int64) grs >>= 1
4x out5plus2 += carryy
  (int64) h >>= 1
4x out5 += out5plus2
  m = -m
                 signed<? z - 0
4x carryy = out5 + _2p63m2p33x4 
  fuv = oldg if !signed<
  grs = h    if  signed<
4x carryy unsigned>>= 30
  m = mnew   if  signed<
  z = -1
out5 &= _2p30m1x4
  oldg = grs
stack_FVGS3 = out5
  h = grs + fuv
              =? grs & 1
FVGS6 = stack_FVGS6
  z = m   if !=
  h = grs if  =
GSFV6 = FVGS6[1,0]
  mnew = m + 1
  grs -= fuv
mod6 = stack_mod6
  (int64) grs >>= 1
4x ta = int32 uuss1 * int32 FVGS5
  (int64) h >>= 1
  m = -m
4x tb = int32 vvrr1 * int32 GSFV5
                 signed<? z - 0
  fuv = oldg if !signed<
4x out6plus = ta + tb
  grs = h    if  signed<
  m = mnew   if  signed<
4x ta = int32 uuss0 * int32 FVGS6
  z = -1
4x tb = int32 vvrr0 * int32 GSFV6
  oldg = grs
  h = grs + fuv
4x out6 = ta + tb
              =? grs & 1
  z = m   if !=
4x out6 += out6plus
  h = grs if  =
  mnew = m + 1
4x ta = int32 d0 * int32 mod6
  grs -= fuv
4x tb = int32 d1 * int32 mod5
  (int64) grs >>= 1
  (int64) h >>= 1
4x out6plus2 = ta + tb
  m = -m
                 signed<? z - 0
4x out6plus2 += carryy
  fuv = oldg if !signed<
  grs = h    if  signed<
4x out6 += out6plus2
  m = mnew   if  signed<
4x carryy = out6 + _2p63m2p33x4 
  z = -1
  oldg = grs
4x carryy unsigned>>= 30
  h = grs + fuv
              =? grs & 1
out6 &= _2p30m1x4
  z = m   if !=
  h = grs if  =
stack_FVGS4 = out6
  mnew = m + 1
FVGS7 = stack_FVGS7
  grs -= fuv
  (int64) grs >>= 1
GSFV7 = FVGS7[1,0]
  (int64) h >>= 1
  m = -m
mod7 = stack_mod7
                 signed<? z - 0
  fuv = oldg if !signed<
4x ta = int32 uuss1 * int32 FVGS6
  grs = h    if  signed<
4x tb = int32 vvrr1 * int32 GSFV6
  m = mnew   if  signed<
  z = -1
4x out7plus = ta + tb
  oldg = grs
  h = grs + fuv
4x ta = int32 uuss0 * int32 FVGS7
              =? grs & 1
  z = m   if !=
4x tb = int32 vvrr0 * int32 GSFV7
  h = grs if  =
4x out7 = ta + tb
  mnew = m + 1
  grs -= fuv
4x out7 += out7plus
  (int64) grs >>= 1
  (int64) h >>= 1
4x ta = int32 d0 * int32 mod7
  m = -m
                 signed<? z - 0
4x tb = int32 d1 * int32 mod6
  fuv = oldg if !signed<
4x out7plus2 = ta + tb
  grs = h    if  signed<
  m = mnew   if  signed<
4x out7plus2 += carryy
  z = -1
  oldg = grs
4x out7 += out7plus2
  h = grs + fuv
              =? grs & 1
4x carryy = out7 + _2p63m2p33x4 
  z = m   if !=
4x carryy unsigned>>= 30
  h = grs if  =
  mnew = m + 1
out7 &= _2p30m1x4
  grs -= fuv
  (int64) grs >>= 1
stack_FVGS5 = out7
  (int64) h >>= 1
  m = -m
FVGS8 = stack_FVGS8
                 signed<? z - 0
GSFV8 = FVGS8[1,0]
  fuv = oldg if !signed<
  grs = h    if  signed<
mod8 = stack_mod8
  m = mnew   if  signed<
  z = -1
4x ta = int32 uuss1 * int32 FVGS7
  oldg = grs
  h = grs + fuv
4x tb = int32 vvrr1 * int32 GSFV7
              =? grs & 1
4x out8plus = ta + tb
  z = m   if !=
  h = grs if  =
4x ta = int32 uuss0 * int32 FVGS8
  mnew = m + 1
  grs -= fuv
4x tb = int32 vvrr0 * int32 GSFV8
  (int64) grs >>= 1
  (int64) h >>= 1
4x out8 = ta + tb
  m = -m
4x out8 += out8plus
                 signed<? z - 0
  fuv = oldg if !signed<
4x ta = int32 d0 * int32 mod8
  grs = h    if  signed<
  m = mnew   if  signed<
4x tb = int32 d1 * int32 mod7
extract_init:
  _2p20a2p41 = stack_2p20a2p41
4x out8plus2 = ta + tb
  s = grs + _2p20a2p41
4x out8plus2 += carryy
  (int64) s >>= 42
  t2 = g
4x out8 += out8plus2
  g *= s  
  v = fuv + _2p20a2p41
4x carryy = out8 + _2p63m2p33x4 
  (int64) v >>= 42
  t2 *= v
4x carryy unsigned>>= 30
  _2p20 = stack_2p20
out8 &= _2p30m1x4
  r = grs + _2p20
  r <<= 22
stack_FVGS6 = out8
  (int64) r >>= 43
      rax = f
_2p33x4 = stack_2p33x4
      rax *= r
  u = fuv + _2p20
4x ta = int32 uuss1 * int32 FVGS8
  u <<= 22
4x tb = int32 vvrr1 * int32 GSFV8
  (int64) u >>= 43
       f *= u
4x out9plus = ta + tb
       f += t2
       g += rax
4x ta = int32 mod8 * int32 d1
  (int64) f >>= 20
  (int64) g >>= 20
4x out9 = ta + carryy
  inplace stack_vvrr[0] = v
4x out9 += out9plus
  inplace stack_uuss[0] = u
  inplace stack_uuss[2] = s
4x out10 = out9 + _2p63m2p33x4
  inplace stack_vvrr[2] = r
  loop = 2
4x out10 unsigned >>= 30
4x out10 -= _2p33x4
out9 &= _2p30m1x4
stack_FVGS7 = out9
stack_FVGS8 = out10


# endswap

loop20:

  fuv = f & ~ _m2p20
  grs = g & ~ _m2p20
  #fuv = f
  #grs = g
  #fuv <<= 44
  #grs <<= 44
  #(int64) fuv >>= 44
  #(int64) grs >>= 44
  fuv += stack_m2p41
  grs += stack_m2p62

j = 2
loop2:
# Rep #0
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #1
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #2
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #3
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #4
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #5
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #6
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #7
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #8
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #9
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

 =? j -= 1
goto loop2 if !=

  =? loop -= 1		
goto lastloop if =

# extract u,v,r,s
extract:

  _2p20a2p41 = stack_2p20a2p41
  s = grs + _2p20a2p41
  (int64) s >>= 42

  t2 = g
  g *= s  
  # g = gs

  v = fuv + _2p20a2p41
  (int64) v >>= 42

  t2 *= v
  # t2 = gv

  _2p20 = stack_2p20
  r = grs + _2p20
  r <<= 22
  (int64) r >>= 43

      rax = f
      rax *= r
      # rax = fr

  u = fuv + _2p20
  u <<= 22
  (int64) u >>= 43

       f *= u
       f += t2
       g += rax

  (int64) f >>= 20
  (int64) g >>= 20

#first loops iteration has NOT been removed
#=? loop - 2  
#goto first_loop if =

  t0 = stack_uuss[0]
  t0 *= u
  t1 = stack_vvrr[2]
  t1 *= v

  rtimesoldv = stack_vvrr[0]
  u *= rtimesoldv
  stimesolds = stack_uuss[2]
  v *= stimesolds
  rtimesoldv *= r
  stimesolds *= s
  r *= stack_uuss[0]
  s *= stack_vvrr[2]

  v += u
  u = t0 + t1

  r += s
  s = rtimesoldv + stimesolds

first_loop:


  inplace stack_vvrr[0] = v
  inplace stack_uuss[0] = u
  inplace stack_uuss[2] = s
  inplace stack_vvrr[2] = r


goto loop20 

lastloop:

  _2p20a2p41 = stack_2p20a2p41
  s = grs + _2p20a2p41
  (int64) s >>= 42
  v = fuv + _2p20a2p41
  (int64) v >>= 42

  t1 = stack_vvrr[2]
  t1 *= v
  stimesolds = stack_uuss[2]
  v *= stimesolds
  stimesolds *= s

  _2p20 = stack_2p20
  r = grs + _2p20
  r <<= 22
  (int64) r >>= 43
  u = fuv + _2p20
  u <<= 22
  (int64) u >>= 43

  t0 = stack_uuss[0]
  t0 *= u
  rtimesoldv = stack_vvrr[0]
  u *= rtimesoldv
  rtimesoldv *= r

  s *= stack_vvrr[2]
  r *= stack_uuss[0]

  v += u
  u = t0 + t1
  r += s
  s = rtimesoldv + stimesolds

  #f = stack_fxgx[0]
  #g = stack_fxgx[2]
  #f0 = stack_fygy[0]
  #g0 = stack_fygy[2]

  t0 = stack_FVGS0[0]
  t1 = stack_FVGS1[0]
  t1 <<= 30
  f = t0 + t1
 
  t0 = stack_FVGS0[2]
  t1 = stack_FVGS1[2]
  t1 <<= 30
  g = t0 + t1

  t0 = stack_FVGS2[0]
  t1 = stack_FVGS3[0]
  t1 <<= 30
  f0 = t0 + t1
 
  t0 = stack_FVGS2[2]
  t1 = stack_FVGS3[2]
  t1 <<= 30
  g0 = t0 + t1

=? i -= 1
goto bigloop if !=



last_transition:

fuv &= 2
t0 = fuv - 1
u *= t0
v *= t0

# transition portion


new vvrr
vvrr = v,vvrr[1],0,0
vvrr = vvrr[0],r,0,0

FVGS0 = stack_FVGS0

new uuss
uuss = u,uuss[1],0,0
uuss = uuss[0],s,0,0

GSFV0 = FVGS0[1,0]

uuss = uuss[0,0,1,1]
vvrr = vvrr[0,0,1,1]


_2p30m1x4 = stack_2p30m1x4

uuss0 = uuss & _2p30m1x4
vvrr0 = vvrr & _2p30m1x4 

_2p63x4 = stack_2p63x4

uuss1 = uuss ^ _2p63x4
vvrr1 = vvrr ^ _2p63x4
4x uuss1 unsigned>>= 30
4x vvrr1 unsigned>>= 30

_2p33x4 = stack_2p33x4

4x uuss1 -= _2p33x4
4x vvrr1 -= _2p33x4

4x ta = int32 uuss0 * int32 FVGS0
4x tb = int32 vvrr0 * int32 GSFV0
4x out0 = ta + tb

minvx4 = 4x stack_minv
mod0 = stack_mod0

4x d0 = int32 minvx4 * int32 out0
d0 &= _2p30m1x4
4x ta = int32 mod0 * int32 d0
4x out0 += ta

4x carryy = out0 +_2p63x4
4x carryy unsigned>>= 30


FVGS1 = stack_FVGS1
GSFV1 = FVGS1[1,0]
mod1 = stack_mod1
4x ta = int32 uuss1 * int32 FVGS0
4x tb = int32 vvrr1 * int32 GSFV0
4x out1plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS1
4x tb = int32 vvrr0 * int32 GSFV1
4x out1 = ta + tb
4x out1 += out1plus
4x ta = int32 d0 * int32 mod1
4x ta += carryy
4x out1 += ta
4x d1 = int32 minvx4 * int32 out1
d1 &= _2p30m1x4
4x ta = int32 mod0 * int32 d1
4x out1 += ta
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out1 + _2p63m2p33x4 
4x carryy unsigned>>= 30


FVGS2 = stack_FVGS2
GSFV2 = FVGS2[1,0]
mod2 = stack_mod2
4x ta = int32 uuss1 * int32 FVGS1
4x tb = int32 vvrr1 * int32 GSFV1
4x out2plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS2
4x tb = int32 vvrr0 * int32 GSFV2
4x out2 = ta + tb
4x out2 += out2plus
4x ta = int32 d0 * int32 mod2
4x tb = int32 d1 * int32 mod1
4x out2plus2 = ta + tb
4x out2plus2 += carryy
4x out2 += out2plus2

4x carryy = out2 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out2 &= _2p30m1x4
stack_FVGS0 = out2

FVGS3 = stack_FVGS3
GSFV3 = FVGS3[1,0]
mod3 = stack_mod3
4x ta = int32 uuss1 * int32 FVGS2
4x tb = int32 vvrr1 * int32 GSFV2
4x out3plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS3
4x tb = int32 vvrr0 * int32 GSFV3
4x out3 = ta + tb
4x out3 += out3plus
4x ta = int32 d0 * int32 mod3
4x tb = int32 d1 * int32 mod2
4x out3plus2 = ta + tb
4x out3plus2 += carryy
4x out3 += out3plus2

4x carryy = out3 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out3 &= _2p30m1x4
stack_FVGS1 = out3

FVGS4 = stack_FVGS4
GSFV4 = FVGS4[1,0]
mod4 = stack_mod4
4x ta = int32 uuss1 * int32 FVGS3
4x tb = int32 vvrr1 * int32 GSFV3
4x out4plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS4
4x tb = int32 vvrr0 * int32 GSFV4
4x out4 = ta + tb
4x out4 += out4plus
4x ta = int32 d0 * int32 mod4
4x tb = int32 d1 * int32 mod3
4x out4plus2 = ta + tb
4x out4plus2 += carryy
4x out4 += out4plus2

4x carryy = out4 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out4 &= _2p30m1x4
stack_FVGS2 = out4

FVGS5 = stack_FVGS5
GSFV5 = FVGS5[1,0]
mod5 = stack_mod5
4x ta = int32 uuss1 * int32 FVGS4
4x tb = int32 vvrr1 * int32 GSFV4
4x out5plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS5
4x tb = int32 vvrr0 * int32 GSFV5
4x out5 = ta + tb
4x out5 += out5plus
4x ta = int32 d0 * int32 mod5
4x tb = int32 d1 * int32 mod4
4x out5plus2 = ta + tb
4x out5plus2 += carryy
4x out5 += out5plus2

4x carryy = out5 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out5 &= _2p30m1x4
stack_FVGS3 = out5

FVGS6 = stack_FVGS6
GSFV6 = FVGS6[1,0]
mod6 = stack_mod6
4x ta = int32 uuss1 * int32 FVGS5
4x tb = int32 vvrr1 * int32 GSFV5
4x out6plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS6
4x tb = int32 vvrr0 * int32 GSFV6
4x out6 = ta + tb
4x out6 += out6plus
4x ta = int32 d0 * int32 mod6
4x tb = int32 d1 * int32 mod5
4x out6plus2 = ta + tb
4x out6plus2 += carryy
4x out6 += out6plus2

4x carryy = out6 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out6 &= _2p30m1x4
stack_FVGS4 = out6

FVGS7 = stack_FVGS7
GSFV7 = FVGS7[1,0]
mod7 = stack_mod7
4x ta = int32 uuss1 * int32 FVGS6
4x tb = int32 vvrr1 * int32 GSFV6
4x out7plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS7
4x tb = int32 vvrr0 * int32 GSFV7
4x out7 = ta + tb
4x out7 += out7plus
4x ta = int32 d0 * int32 mod7
4x tb = int32 d1 * int32 mod6
4x out7plus2 = ta + tb
4x out7plus2 += carryy
4x out7 += out7plus2

4x carryy = out7 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out7 &= _2p30m1x4
stack_FVGS5 = out7

FVGS8 = stack_FVGS8
GSFV8 = FVGS8[1,0]
mod8 = stack_mod8
4x ta = int32 uuss1 * int32 FVGS7
4x tb = int32 vvrr1 * int32 GSFV7
4x out8plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS8
4x tb = int32 vvrr0 * int32 GSFV8
4x out8 = ta + tb
4x out8 += out8plus
4x ta = int32 d0 * int32 mod8
4x tb = int32 d1 * int32 mod7
4x out8plus2 = ta + tb
4x out8plus2 += carryy
4x out8 += out8plus2

4x carryy = out8 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out8 &= _2p30m1x4
stack_FVGS6 = out8
_2p33x4 = stack_2p33x4

4x ta = int32 uuss1 * int32 FVGS8
4x tb = int32 vvrr1 * int32 GSFV8
4x out9plus = ta + tb
4x ta = int32 mod8 * int32 d1
4x out9 = ta + carryy
4x out9 += out9plus

4x out10 = out9 + _2p63m2p33x4
4x out10 unsigned >>= 30
4x out10 -= _2p33x4
out9 &= _2p30m1x4
stack_FVGS7 = out9
stack_FVGS8 = out10
t2 = stack_out
a0 = stack_FVGS0[1]
mem64[t2 +  0] = a0
a1 = stack_FVGS1[1]
mem64[t2 +  8] = a1
a2 = stack_FVGS2[1]
mem64[t2 + 16] = a2
a3 = stack_FVGS3[1]
mem64[t2 + 24] = a3
a4 = stack_FVGS4[1]
mem64[t2 + 32] = a4
a5 = stack_FVGS5[1]
mem64[t2 + 40] = a5
a6 = stack_FVGS6[1]
mem64[t2 + 48] = a6
a7 = stack_FVGS7[1]
mem64[t2 + 56] = a7
a8 = stack_FVGS8[1]
mem64[t2 + 64] = a8
caller_r11 = stack_r11
caller_r12 = stack_r12
caller_r13 = stack_r13
caller_r14 = stack_r14
caller_r15 = stack_r15
caller_rbx = stack_rbx
caller_rbp = stack_rbp
return
