# Generated by cmovf.py
int64 m
int64 f
int64 g
int64 u
int64 v
int64 r
int64 s
int64 FVGS
int64 uvrs
int64 fuv
int64 grs
int64 mnew
int64 z
int64 loop
int64 _m2p15
int64 _2p16
int64 _2p31
int64 _m2p32
int64 _m2p48
int64 _2p16a2p32
int64 rax
int64 rdx
int64 t0
int64 t1
int64 t2
int64 h
int64 oldg
int64 i
stack64 stack_r11
stack64 stack_r12
stack64 stack_r13
stack64 stack_r14
stack64 stack_r15
stack64 stack_rbx
stack64 stack_rbp

stack256 stack_m1
#stack64 stack_f   #inplace stack_fxgx[0] = f
#stack64 stack_g   #inplace stack_fxgx[2] = g
#stack64 stack_u   #inplace stack_uuss[0] = u
#stack64 stack_v   #inplace stack_vvrr[0] = v
#stack64 stack_r   #inplace stack_vvrr[2] = r
#stack64 stack_s   #inplace stack_uuss[2] = s
stack64 stack_m
stack64 stack_2p16a2p32
stack64 stack_m2p15
stack64 stack_2p16
stack64 stack_2p31
stack64 stack_m2p32
stack64 stack_m2p48
stack64 stack_FVGS

stack256 stack_fxgx
stack256 stack_uuss
stack256 stack_vvrr
stack256 stack_fygy

reg256 carryy
reg256 carryz
reg256 d0
reg256 d1
reg256 out0

reg256 FVGS0
reg256 GSFV0
reg256 out1
reg256 out1plus
reg256 FVGS1
reg256 GSFV1
reg256 out2
reg256 out2plus
reg256 FVGS2
reg256 GSFV2
reg256 out3
reg256 out3plus
reg256 FVGS3
reg256 GSFV3
reg256 out4
reg256 out4plus
reg256 FVGS4
reg256 GSFV4
reg256 out5
reg256 out5plus
reg256 FVGS5
reg256 GSFV5
reg256 out6
reg256 out6plus
reg256 FVGS6
reg256 GSFV6
reg256 out7
reg256 out7plus
reg256 FVGS7
reg256 GSFV7
reg256 out8
reg256 out8plus
reg256 FVGS8
reg256 GSFV8
reg256 out9
reg256 out9plus

reg256 out8plus2
reg256 out10
reg256 ta
reg256 tb
reg256 uuss
reg256 uuss0
reg256 uuss1
reg256 vvrr
reg256 vvrr0
reg256 vvrr1

reg256 _19x4
reg256 _0_19x4
reg256 _32767x4
reg256 _inv19_2p30x4
reg256 _2p30m1x4
reg256 _2p33x4
reg256 _2p48x4
reg256 _2p63x4
reg256 _2p63m2p33x4
stack256 stack_19x4
stack256 stack_0_19x4
stack256 stack_32767x4
stack256 stack_inv19_2p30x4
stack256 stack_2p30m1x4
stack256 stack_2p33x4
stack256 stack_2p48x4
stack256 stack_2p63x4
stack256 stack_2p63m2p33x4
enter innerloop60_transition
# input_0 = FVGS
# input_1 = table of constants

stack_r11 = caller_r11
stack_r12 = caller_r12
stack_r13 = caller_r13
stack_r14 = caller_r14
stack_r15 = caller_r15
stack_rbx = caller_rbx
stack_rbp = caller_rbp

stack_FVGS = input_0
f = mem64[ input_0 + 32]
g = mem64[ input_0 + 48]
f <<= 30
g <<= 30
f += mem64[ input_0 + 0]
g += mem64[ input_0 +16]
#inplace stack_fxgx[0] = f
#inplace stack_fxgx[2] = g

# set up stack values
                 m = -1
inplace stack_m1[0] = m
                  z = 0
inplace stack_m1[1] = z

           _m2p15 = -32768
      stack_m2p15 = _m2p15
            _2p16 = 65536
       stack_2p16 = _2p16
            _2p31 = 2147483648
       stack_2p31 = _2p31     
           _m2p32 = -4294967296
      stack_m2p32 = _m2p32
           _m2p48 = -281474976710656
      stack_m2p48 = _m2p48
       _2p16a2p32 = 4295032832
  stack_2p16a2p32 = _2p16a2p32

_19x4 = mem256[ input_1 +   0 ]
stack_19x4 = _19x4
_0_19x4 = mem256[ input_1 +  32 ]
stack_0_19x4 = _0_19x4
_32767x4 = mem256[ input_1 +  64 ]
stack_32767x4 = _32767x4
_inv19_2p30x4 = mem256[ input_1 +  96 ]
stack_inv19_2p30x4 = _inv19_2p30x4
_2p30m1x4 = mem256[ input_1 + 128 ]
stack_2p30m1x4 = _2p30m1x4
_2p33x4 = mem256[ input_1 + 160 ]
stack_2p33x4 = _2p33x4
_2p48x4 = mem256[ input_1 + 192 ]
stack_2p48x4 = _2p48x4
_2p63x4 = mem256[ input_1 + 224 ]
stack_2p63x4 = _2p63x4
_2p63m2p33x4 = mem256[ input_1 + 256 ]
i = 12
nop
nop
bigloop:
# entering condition: f and g are 60-bit signed ints

  loop = 4

loop15:

  fuv = f & ~ _m2p15
  grs = g & ~ _m2p15
  fuv |= stack_m2p32
  grs |= stack_m2p48

# Rep #0
  z = stack_m1[1]
  
  h = grs + fuv
  mnew = -1
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew ^= m
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m -= 1
                 signed<? z - 0

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #1
  z = stack_m1[1]
  
  h = grs + fuv
  mnew = -1
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew ^= m
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m -= 1
                 signed<? z - 0

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #2
  z = 0
  
  h = grs + fuv
  mnew = -1
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew ^= m
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m -= 1
                 signed<? z - 0

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #3
  z = stack_m1[1]
  
  h = grs + fuv
  mnew = -1
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew ^= m
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m -= 1
                 signed<? z - 0

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #4
  z = stack_m1[1]
  
  h = grs + fuv
  mnew = -1
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew ^= m
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m -= 1
                 signed<? z - 0

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #5
  z = 0
  
  h = grs + fuv
  mnew = -1
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew ^= m
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m -= 1
                 signed<? z - 0

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #6
  z = stack_m1[1]
  
  h = grs + fuv
  mnew = -1
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew ^= m
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m -= 1
                 signed<? z - 0

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #7
  z = stack_m1[1]
  
  h = grs + fuv
  mnew = -1
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew ^= m
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m -= 1
                 signed<? z - 0

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #8
  z = 0
  
  h = grs + fuv
  mnew = -1
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew ^= m
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m -= 1
                 signed<? z - 0

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #9
  z = stack_m1[1]
  
  h = grs + fuv
  mnew = -1
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew ^= m
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m -= 1
                 signed<? z - 0

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #10
  z = stack_m1[1]
  
  h = grs + fuv
  mnew = -1
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew ^= m
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m -= 1
                 signed<? z - 0

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #11
  z = 0
  
  h = grs + fuv
  mnew = -1
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew ^= m
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m -= 1
                 signed<? z - 0

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #12
  z = stack_m1[1]
  
  h = grs + fuv
  mnew = -1
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew ^= m
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m -= 1
                 signed<? z - 0

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #13
  z = stack_m1[1]
  
  h = grs + fuv
  mnew = -1
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew ^= m
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m -= 1
                 signed<? z - 0

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #14
  z = 0
  
  h = grs + fuv
  mnew = -1
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew ^= m
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m -= 1
                 signed<? z - 0

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1


  =? loop -= 1		
goto lastloop if =

# extract u,v,r,s
extract:

  _2p16a2p32 = stack_2p16a2p32
  s = grs + _2p16a2p32
  (int64) s >>= 33

  t2 = g
  g *= s  
  # g = gs

  v = fuv + _2p16a2p32
  (int64) v >>= 33
  t2 *= v
  # t2 = gv

  _2p16 = stack_2p16
  grs += _2p16
  (int64) grs >>= 17
  r = (int16) grs

      rax = f
      rax *= r
      # rax = fr

  fuv += _2p16
  (int64) fuv >>= 17
  u = (int16) fuv

       f *= u
       f += t2
       g += rax
 
       (int64) f >>= 15
       (int64) g >>= 15

  =? loop - 3  
  goto first_loop if =

  t0 = stack_uuss[0]
  t0 *= u
  t1 = stack_vvrr[2]
  t1 *= v

int64 rtimesoldv
int64 stimesolds

  rtimesoldv = stack_vvrr[0]
  u *= rtimesoldv
  stimesolds = stack_uuss[2]
  v *= stimesolds
  rtimesoldv *= r
  stimesolds *= s
  r *= stack_uuss[0]
  s *= stack_vvrr[2]

  v += u
  u = t0 + t1

  r += s
  s = rtimesoldv + stimesolds

first_loop:

  inplace stack_vvrr[0] = v
  inplace stack_uuss[0] = u
  inplace stack_uuss[2] = s
  inplace stack_vvrr[2] = r

goto loop15 

lastloop:

  _2p16a2p32 = stack_2p16a2p32
  s = grs + _2p16a2p32
  (int64) s >>= 33

  v = fuv + _2p16a2p32
  (int64) v >>= 33

  t1 = stack_vvrr[2]
  t1 *= v
  stimesolds = stack_uuss[2]
  v *= stimesolds
  stimesolds *= s

  _2p16 = stack_2p16
  grs += _2p16
  (int64) grs >>= 17
  r = (int16) grs

  fuv += _2p16
  (int64) fuv >>= 17
  u = (int16) fuv

FVGS = stack_FVGS

  t0 = stack_uuss[0]
  t0 *= u
  rtimesoldv = stack_vvrr[0]
  u *= rtimesoldv
  rtimesoldv *= r

  s *= stack_vvrr[2]
  r *= stack_uuss[0]

FVGS0 = mem256[ FVGS +   0 ]

  v += u
  u = t0 + t1
  r += s
  s = rtimesoldv + stimesolds

new uuss
new vvrr
uuss = u,uuss[1],0,0
vvrr = v,vvrr[1],0,0
uuss = uuss[0],s,0,0
vvrr = vvrr[0],r,0,0

GSFV0 = FVGS0[1,0]

uuss = uuss[0,0,1,1]
vvrr = vvrr[0,0,1,1]



# transition portion

_2p30m1x4 = stack_2p30m1x4

uuss0 = uuss & _2p30m1x4
vvrr0 = vvrr & _2p30m1x4
4x ta = int32 uuss0 * int32 FVGS0

4x tb = int32 vvrr0 * int32 GSFV0
4x out0 = ta + tb

_inv19_2p30x4 = stack_inv19_2p30x4
_19x4 = stack_19x4

4x d0 = int32 out0 * int32 _inv19_2p30x4
d0 &= _2p30m1x4
#4x out8plus2 = d0 << 15
reg256 d0x19
4x d0x19 = int32 d0 * int32 _19x4
4x out0 -= d0x19


4x carryy = out0 + stack_2p63x4
4x carryy unsigned>>= 30

4x out8plus2 = d0 << 15

FVGS1 = mem256[ FVGS +  32 ]
GSFV1 = FVGS1[1,0]

4x ta = int32 uuss0 * int32 FVGS1
4x tb = int32 vvrr0 * int32 GSFV1
4x out1plus = ta + tb

4x uuss1 = uuss unsigned>> 30
4x vvrr1 = vvrr unsigned>> 30

4x ta = int32 uuss1 * int32 FVGS0
4x tb = int32 vvrr1 * int32 GSFV0
4x out1 = ta + tb
4x out1 += out1plus
4x out1 += carryy


4x d1 = int32 out1 * int32 _inv19_2p30x4
d1 &= _2p30m1x4
#4x out9 = d1 << 15
reg256 d1x19
4x d1x19 = int32 d1 * int32 _19x4
4x out1 -= d1x19


4x carryy = out1 + _2p63m2p33x4 
4x carryy unsigned>>= 30

4x out9 = d1 << 15

FVGS2 = mem256[ FVGS +  64 ]
GSFV2 = FVGS2[1,0]
4x ta = int32 uuss1 * int32 FVGS1
4x tb = int32 vvrr1 * int32 GSFV1
4x out2plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS2
4x tb = int32 vvrr0 * int32 GSFV2
4x out2 = ta + tb
4x out2 += out2plus
4x out2 += carryy


4x carryy = out2 + _2p63m2p33x4 
4x carryy unsigned>>= 30


FVGS3 = mem256[ FVGS +  96 ]
GSFV3 = FVGS3[1,0]
4x ta = int32 uuss1 * int32 FVGS2
4x tb = int32 vvrr1 * int32 GSFV2
4x out3plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS3
4x tb = int32 vvrr0 * int32 GSFV3
4x out3 = ta + tb
4x out3 += out3plus
4x out3 += carryy

out2 &= _2p30m1x4

4x carryy = out3 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out3 &= _2p30m1x4
mem256[ FVGS + 32 ] = out3
# store-ahead for f0 and g0
4x ta = out3 << 30
4x ta += out2
stack_fxgx = ta


FVGS4 = mem256[ FVGS +  128 ]
GSFV4 = FVGS4[1,0]
4x ta = int32 uuss1 * int32 FVGS3
4x tb = int32 vvrr1 * int32 GSFV3
4x out4plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS4
4x tb = int32 vvrr0 * int32 GSFV4
4x out4 = ta + tb
4x out4 += out4plus
4x out4 += carryy


4x carryy = out4 + _2p63m2p33x4 
4x carryy unsigned>>= 30


FVGS5 = mem256[ FVGS +  160 ]
GSFV5 = FVGS5[1,0]
4x ta = int32 uuss1 * int32 FVGS4
4x tb = int32 vvrr1 * int32 GSFV4
4x out5plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS5
4x tb = int32 vvrr0 * int32 GSFV5
4x out5 = ta + tb
4x out5 += out5plus
4x out5 += carryy


4x carryy = out5 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out5 &= _2p30m1x4
out4 &= _2p30m1x4
mem256[ FVGS +  64 ] = out4
# store-ahead for f1 and g1
4x ta = out5 << 30
4x ta += out4
stack_fygy = ta


FVGS6 = mem256[ FVGS +  192 ]
GSFV6 = FVGS6[1,0]
4x ta = int32 uuss1 * int32 FVGS5
4x tb = int32 vvrr1 * int32 GSFV5
4x out6plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS6
4x tb = int32 vvrr0 * int32 GSFV6
4x out6 = ta + tb
4x out6 += out6plus
4x out6 += carryy


4x carryz = out6 + _2p63m2p33x4 
4x carryz unsigned>>= 30

mem256[ FVGS + 96 ] = out5

FVGS7 = mem256[ FVGS +  224 ]
GSFV7 = FVGS7[1,0]
4x ta = int32 uuss1 * int32 FVGS6
4x tb = int32 vvrr1 * int32 GSFV6
4x out7plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS7
4x tb = int32 vvrr0 * int32 GSFV7
4x out7 = ta + tb
4x out7 += out7plus
4x out7 += carryz


4x carryz = out7 + _2p63m2p33x4 
4x carryz unsigned>>= 30

out6 &= _2p30m1x4
mem256[ FVGS + 128 ] = out6

FVGS8 = mem256[ FVGS +  256 ]
GSFV8 = FVGS8[1,0]
4x ta = int32 uuss1 * int32 FVGS7
4x tb = int32 vvrr1 * int32 GSFV7
4x out8plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS8
4x tb = int32 vvrr0 * int32 GSFV8
4x out8 = ta + tb
4x out8 += out8plus
4x out8 += carryz

4x out8 += out8plus2

4x carryz = out8 + _2p63m2p33x4 
4x carryz unsigned>>= 30

out7 &= _2p30m1x4
mem256[ FVGS + 160 ] = out7

4x ta = int32 uuss1 * int32 FVGS8
4x tb = int32 vvrr1 * int32 GSFV8
4x out9plus = ta + tb
4x out9 += out9plus
4x out9 += carryz


4x out10 = out9 + _2p63m2p33x4 
4x out10 unsigned>>= 30

out8 &= _2p30m1x4
mem256[ FVGS + 192 ] = out8
_32767x4 = stack_32767x4
_2p48x4 = stack_2p48x4

4x carryy = out10 + _2p63m2p33x4
4x carryy unsigned>>= 15
4x carryy -= _2p48x4
4x out10 -= stack_2p33x4

out9 &= _2p30m1x4

out10 &= _32767x4
4x carryy = int32 carryy * int32 stack_0_19x4

4x out2 += carryy
mem256[ FVGS +224 ] = out9
mem256[ FVGS +256 ] = out10
mem256[ FVGS +  0 ] = out2

#m = stack_m	     
#_m2p15 = stack_m2p15	

f = stack_fxgx[0]
g = stack_fxgx[2] 

=? i -= 1
goto bigloop if !=

caller_r11 = stack_r11
caller_r12 = stack_r12
caller_r13 = stack_r13
caller_r14 = stack_r14
caller_r15 = stack_r15
caller_rbx = stack_rbx
caller_rbp = stack_rbp

return 

