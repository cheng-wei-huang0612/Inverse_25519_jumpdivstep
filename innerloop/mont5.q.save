# Generated by mont5.py
int64 m
int64 f
int64 g
int64 u
int64 v
int64 r
int64 s
int64 uvrs
int64 fuv
int64 grs
int64 mnew
int64 z
int64 loop
int64 rax
int64 rdx
int64 h
int64 oldg
int64 i
int64 j
int64 f0
int64 g0
int64 table
int64 minv
stack64 stack_minv

int64 rtimesoldv
int64 stimesolds

stack64 stack_out

stack256 stack_m1
#inplace stack_fxgx[0] = f
#inplace stack_fxgx[2] = g
#inplace stack_uuss[0] = u
#inplace stack_vvrr[0] = v
#inplace stack_vvrr[2] = r
#inplace stack_uuss[2] = s
stack64 stack_m

stack256 stack_fxgx
stack256 stack_uuss
stack256 stack_vvrr
stack256 stack_fygy

stack64 stack_fuv
stack64 stack_f

reg256 carryy
reg256 minvx4
reg256 d0
reg256 d1
reg256 d2
reg256 out0

int64 a0
int64 t0
reg256 mod0
stack256 stack_mod0
reg256 FVGS0
reg256 GSFV0
stack256 stack_FVGS0
reg256 out1
reg256 out1plus
reg256 out2plus2
int64 a1
int64 t1
reg256 mod1
stack256 stack_mod1
reg256 FVGS1
reg256 GSFV1
stack256 stack_FVGS1
reg256 out2
reg256 out2plus
reg256 out3plus2
int64 a2
int64 t2
reg256 mod2
stack256 stack_mod2
reg256 FVGS2
reg256 GSFV2
stack256 stack_FVGS2
reg256 out3
reg256 out3plus
reg256 out4plus2
int64 a3
int64 t3
reg256 mod3
stack256 stack_mod3
reg256 FVGS3
reg256 GSFV3
stack256 stack_FVGS3
reg256 out4
reg256 out4plus
reg256 out5plus2
int64 a4
int64 t4
reg256 mod4
stack256 stack_mod4
reg256 FVGS4
reg256 GSFV4
stack256 stack_FVGS4
reg256 out5
reg256 out5plus
reg256 out6plus2
int64 a5
int64 t5
reg256 mod5
stack256 stack_mod5
reg256 FVGS5
reg256 GSFV5
stack256 stack_FVGS5
reg256 out6
reg256 out6plus
reg256 out7plus2
int64 a6
int64 t6
reg256 mod6
stack256 stack_mod6
reg256 FVGS6
reg256 GSFV6
stack256 stack_FVGS6
reg256 out7
reg256 out7plus
reg256 out8plus2
int64 a7
int64 t7
reg256 mod7
stack256 stack_mod7
reg256 FVGS7
reg256 GSFV7
stack256 stack_FVGS7
reg256 out8
reg256 out8plus
reg256 out9plus2
int64 a8
int64 t8
reg256 mod8
stack256 stack_mod8
reg256 FVGS8
reg256 GSFV8
stack256 stack_FVGS8
reg256 out9
reg256 out9plus
reg256 out10plus2
int64 a9
int64 t9
reg256 mod9
stack256 stack_mod9
reg256 FVGS9
reg256 GSFV9
stack256 stack_FVGS9
reg256 out10
reg256 out10plus
reg256 out11plus2
int64 a10
int64 t10
reg256 mod10
stack256 stack_mod10
reg256 FVGS10
reg256 GSFV10
stack256 stack_FVGS10
reg256 out11
reg256 out11plus
reg256 out12plus2
int64 a11
int64 t11
reg256 mod11
stack256 stack_mod11
reg256 FVGS11
reg256 GSFV11
stack256 stack_FVGS11
reg256 out12
reg256 out12plus
reg256 out13plus2
int64 a12
int64 t12
reg256 mod12
stack256 stack_mod12
reg256 FVGS12
reg256 GSFV12
stack256 stack_FVGS12
reg256 out13
reg256 out13plus
reg256 out14plus2
int64 a13
int64 t13
reg256 mod13
stack256 stack_mod13
reg256 FVGS13
reg256 GSFV13
stack256 stack_FVGS13
reg256 out14
reg256 out14plus
reg256 out15plus2
int64 a14
int64 t14
reg256 mod14
stack256 stack_mod14
reg256 FVGS14
reg256 GSFV14
stack256 stack_FVGS14
reg256 out15
reg256 out15plus
reg256 out16plus2
int64 a15
int64 t15
reg256 mod15
stack256 stack_mod15
reg256 FVGS15
reg256 GSFV15
stack256 stack_FVGS15
reg256 out16
reg256 out16plus
reg256 out17plus2
int64 a16
int64 t16
reg256 mod16
stack256 stack_mod16
reg256 FVGS16
reg256 GSFV16
stack256 stack_FVGS16
reg256 out17
reg256 out17plus
int64 a17
int64 t17
reg256 mod17
stack256 stack_mod17
reg256 FVGS17
reg256 GSFV17
stack256 stack_FVGS17
reg256 out18
reg256 out18plus

reg256 out19
reg256 out19plus
reg256 out20
reg256 ta
reg256 tb
reg256 uuss
reg256 uuss0
reg256 uuss1
reg256 vvrr
reg256 vvrr0
reg256 vvrr1


int64            _m2p20
stack64     stack_m2p20
int64             _2p20
stack64      stack_2p20
int64            _m2p41
stack64     stack_m2p41
int64            _m2p62
stack64     stack_m2p62
int64        _2p20a2p41
stack64 stack_2p20a2p41
reg256 _2p30m1x4
reg256 _2p33x4
reg256 _2p63x4
reg256 _2p63m2p33x4
reg256 _2p29x4
reg256 _prime0x4
reg256 _prime1x4
stack256 stack_2p30m1x4
stack256 stack_2p33x4
stack256 stack_2p63x4
stack256 stack_2p63m2p33x4
stack256 stack_2p29x4
stack256 stack_prime0x4
stack256 stack_prime1x4

enter inverse_511
# input_0 = input
# input_1 = output
# input_2 = table of constants

new stack_m1
stack_out = input_1
table = input_2


stack64 stack_r11
stack_r11 = caller_r11
stack64 stack_r12
stack_r12 = caller_r12
stack64 stack_r13
stack_r13 = caller_r13
stack64 stack_r14
stack_r14 = caller_r14
stack64 stack_r15
stack_r15 = caller_r15
stack64 stack_rbx
stack_rbx = caller_rbx
stack64 stack_rbp
stack_rbp = caller_rbp
# load and store the table
d1 = mem256[ table + 224 ]
stack_FVGS0 = d1
d1 = mem256[ table + 256 ]
stack_FVGS1 = d1
d1 = mem256[ table + 288 ]
stack_FVGS2 = d1
d1 = mem256[ table + 320 ]
stack_FVGS3 = d1
d1 = mem256[ table + 352 ]
stack_FVGS4 = d1
d1 = mem256[ table + 384 ]
stack_FVGS5 = d1
d1 = mem256[ table + 416 ]
stack_FVGS6 = d1
d1 = mem256[ table + 448 ]
stack_FVGS7 = d1
d1 = mem256[ table + 480 ]
stack_FVGS8 = d1
d1 = mem256[ table + 512 ]
stack_FVGS9 = d1
d1 = mem256[ table + 544 ]
stack_FVGS10 = d1
d1 = mem256[ table + 576 ]
stack_FVGS11 = d1
d1 = mem256[ table + 608 ]
stack_FVGS12 = d1
d1 = mem256[ table + 640 ]
stack_FVGS13 = d1
d1 = mem256[ table + 672 ]
stack_FVGS14 = d1
d1 = mem256[ table + 704 ]
stack_FVGS15 = d1
d1 = mem256[ table + 736 ]
stack_FVGS16 = d1
d1 = mem256[ table + 768 ]
stack_FVGS17 = d1
d1 = 4x stack_FVGS0[0]
stack_mod0 = d1
d1 = 4x stack_FVGS1[0]
stack_mod1 = d1
d1 = 4x stack_FVGS2[0]
stack_mod2 = d1
d1 = 4x stack_FVGS3[0]
stack_mod3 = d1
d1 = 4x stack_FVGS4[0]
stack_mod4 = d1
d1 = 4x stack_FVGS5[0]
stack_mod5 = d1
d1 = 4x stack_FVGS6[0]
stack_mod6 = d1
d1 = 4x stack_FVGS7[0]
stack_mod7 = d1
d1 = 4x stack_FVGS8[0]
stack_mod8 = d1
d1 = 4x stack_FVGS9[0]
stack_mod9 = d1
d1 = 4x stack_FVGS10[0]
stack_mod10 = d1
d1 = 4x stack_FVGS11[0]
stack_mod11 = d1
d1 = 4x stack_FVGS12[0]
stack_mod12 = d1
d1 = 4x stack_FVGS13[0]
stack_mod13 = d1
d1 = 4x stack_FVGS14[0]
stack_mod14 = d1
d1 = 4x stack_FVGS15[0]
stack_mod15 = d1
d1 = 4x stack_FVGS16[0]
stack_mod16 = d1
d1 = 4x stack_FVGS17[0]
stack_mod17 = d1
# start with a Montgomery reduction
minv = mem64[ table + 800]
stack_minv = minv
a0 = mem64[input_0 +  0]
minv *= a0
(uint128) t1 t0 = minv * mem64[ table + 160 ]
carry? t0 += a0
t1 += 0 + carry
a1 = mem64[input_0 +  8]
h = 0
carry? a1 += t1
h += 0 + carry
(uint128) t2 t1 = minv * mem64[ table + 168 ]
carry? t1 += a1
t2 += h + carry
inplace stack_FVGS0[2] = t1
a2 = mem64[input_0 + 16]
h = 0
carry? a2 += t2
h += 0 + carry
(uint128) t3 t2 = minv * mem64[ table + 176 ]
carry? t2 += a2
t3 += h + carry
inplace stack_FVGS1[2] = t2
a3 = mem64[input_0 + 24]
h = 0
carry? a3 += t3
h += 0 + carry
(uint128) t4 t3 = minv * mem64[ table + 184 ]
carry? t3 += a3
t4 += h + carry
inplace stack_FVGS2[2] = t3
a4 = mem64[input_0 + 32]
h = 0
carry? a4 += t4
h += 0 + carry
(uint128) t5 t4 = minv * mem64[ table + 192 ]
carry? t4 += a4
t5 += h + carry
inplace stack_FVGS3[2] = t4
a5 = mem64[input_0 + 40]
h = 0
carry? a5 += t5
h += 0 + carry
(uint128) t6 t5 = minv * mem64[ table + 200 ]
carry? t5 += a5
t6 += h + carry
inplace stack_FVGS4[2] = t5
a6 = mem64[input_0 + 48]
h = 0
carry? a6 += t6
h += 0 + carry
(uint128) t7 t6 = minv * mem64[ table + 208 ]
carry? t6 += a6
t7 += h + carry
inplace stack_FVGS5[2] = t6
a7 = mem64[input_0 + 56]
h = 0
carry? a7 += t7
h += 0 + carry
(uint128) t8 t7 = minv * mem64[ table + 216 ]
carry? t7 += a7
t8 += h + carry
inplace stack_FVGS6[2] = t7
inplace stack_FVGS7[2] = t8
# then a sub of p
a0 = stack_FVGS0[2]
carry? a0 -= mem64[ table + 160]
inplace stack_FVGS10[2] = a0
a1 = stack_FVGS1[2]
carry? a1 -= mem64[ table + 168] - carry
inplace stack_FVGS11[2] = a1
a2 = stack_FVGS2[2]
carry? a2 -= mem64[ table + 176] - carry
inplace stack_FVGS12[2] = a2
a3 = stack_FVGS3[2]
carry? a3 -= mem64[ table + 184] - carry
inplace stack_FVGS13[2] = a3
a4 = stack_FVGS4[2]
carry? a4 -= mem64[ table + 192] - carry
inplace stack_FVGS14[2] = a4
a5 = stack_FVGS5[2]
carry? a5 -= mem64[ table + 200] - carry
inplace stack_FVGS15[2] = a5
a6 = stack_FVGS6[2]
carry? a6 -= mem64[ table + 208] - carry
inplace stack_FVGS16[2] = a6
a7 = stack_FVGS7[2]
carry? a7 -= mem64[ table + 216] - carry
inplace stack_FVGS17[2] = a7
# then a conditional move
a7 = stack_FVGS17[2]
a7 = stack_FVGS7[2] if carry
inplace stack_FVGS17[2] = a7
a6 = stack_FVGS16[2]
a6 = stack_FVGS6[2] if carry
inplace stack_FVGS16[2] = a6
a5 = stack_FVGS15[2]
a5 = stack_FVGS5[2] if carry
inplace stack_FVGS15[2] = a5
a4 = stack_FVGS14[2]
a4 = stack_FVGS4[2] if carry
inplace stack_FVGS14[2] = a4
a3 = stack_FVGS13[2]
a3 = stack_FVGS3[2] if carry
inplace stack_FVGS13[2] = a3
a2 = stack_FVGS12[2]
a2 = stack_FVGS2[2] if carry
inplace stack_FVGS12[2] = a2
a1 = stack_FVGS11[2]
a1 = stack_FVGS1[2] if carry
inplace stack_FVGS11[2] = a1
a0 = stack_FVGS10[2]
a0 = stack_FVGS0[2] if carry
inplace stack_FVGS10[2] = a0

# now a0 ... should be reduced mod p
t0 = -1152921504606846976
g = a0 & ~ t0

# split up the a's into 30-bit chunks
a0 = stack_FVGS10[2]
t0 = a0
t0 &= 1073741823
inplace stack_FVGS0[2] = t0
t0 = a0
(uint64) t0 >>= 30
t0 &= 1073741823
inplace stack_FVGS1[2] = t0
a1 = stack_FVGS11[2]
a0 = (a1 a0) >> 60
a0 &= 1073741823
inplace stack_FVGS2[2] = a0
t0 = a1
(uint64) t0 >>= 26
t0 &= 1073741823
inplace stack_FVGS3[2] = t0
a2 = stack_FVGS12[2]
a1 = (a2 a1) >> 56
a1 &= 1073741823
inplace stack_FVGS4[2] = a1
t0 = a2
(uint64) t0 >>= 22
t0 &= 1073741823
inplace stack_FVGS5[2] = t0
a3 = stack_FVGS13[2]
a2 = (a3 a2) >> 52
a2 &= 1073741823
inplace stack_FVGS6[2] = a2
t0 = a3
(uint64) t0 >>= 18
t0 &= 1073741823
inplace stack_FVGS7[2] = t0
a4 = stack_FVGS14[2]
a3 = (a4 a3) >> 48
a3 &= 1073741823
inplace stack_FVGS8[2] = a3
t0 = a4
(uint64) t0 >>= 14
t0 &= 1073741823
inplace stack_FVGS9[2] = t0
a5 = stack_FVGS15[2]
a4 = (a5 a4) >> 44
a4 &= 1073741823
inplace stack_FVGS10[2] = a4
t0 = a5
(uint64) t0 >>= 10
t0 &= 1073741823
inplace stack_FVGS11[2] = t0
a6 = stack_FVGS16[2]
a5 = (a6 a5) >> 40
a5 &= 1073741823
inplace stack_FVGS12[2] = a5
t0 = a6
(uint64) t0 >>= 6
t0 &= 1073741823
inplace stack_FVGS13[2] = t0
a7 = stack_FVGS17[2]
a6 = (a7 a6) >> 36
a6 &= 1073741823
inplace stack_FVGS14[2] = a6
t0 = a7
(uint64) t0 >>= 2
t0 &= 1073741823
inplace stack_FVGS15[2] = t0
t0 = a7
(uint64) t0 >>= 32
t0 &= 1073741823
inplace stack_FVGS16[2] = t0
(uint64) a7 >>= 62
inplace stack_FVGS17[2] = a7

f = stack_FVGS0[0]
f0 = stack_FVGS1[0]
f0 <<= 30
f += f0 

#                 m = -1
#                  z = 0
                  m = 0
                  z = -1
inplace stack_m1[0] = m
inplace stack_m1[1] = z

             _m2p20 = -1048576
        stack_m2p20 = _m2p20
              _2p20 = 1048576
         stack_2p20 = _2p20
             _m2p41 = -2199023255552
        stack_m2p41 = _m2p41
             _m2p62 = -4611686018427387904
        stack_m2p62 = _m2p62
         _2p20a2p41 = 2199024304128
    stack_2p20a2p41 = _2p20a2p41

          _2p30m1x4 = mem256[ table +   0 ]
     stack_2p30m1x4 = _2p30m1x4
            _2p33x4 = mem256[ table +  32 ]
       stack_2p33x4 = _2p33x4
            _2p63x4 = mem256[ table +  64 ]
       stack_2p63x4 = _2p63x4
       _2p63m2p33x4 = mem256[ table +  96 ]
  stack_2p63m2p33x4 = _2p63m2p33x4
            _2p29x4 = mem256[ table + 128 ]
       stack_2p29x4 = _2p29x4
          _prime0x4 = mem256[ table + 160 ]
     stack_prime0x4 = _prime0x4
# idle loop
i = 20
u = 1152921504606846976
v = 0
s = u
r = 0


bigloop:

# transition portion

      rax = g
      (int128) rdx rax = rax * s
      t2 = rax
      t1 = rdx

      rax = f
      (int128) rdx rax = rax * r
      carry? t2 += rax
             t1 += rdx + carry
      t2 = (t1 t2) >> 60	 

      rax = f
      (int128) rdx rax = rax * u
      f = rax
      t0 = rdx
      rax = g
      (int128) rdx rax = rax * v
      carry? f += rax
             t0 += rdx + carry
      f = (t0 f) >> 60

new vvrr
vvrr = v,vvrr[1],0,0
vvrr = vvrr[0],r,0,0

      v *= g0
      g0 *= s

      r *= f0
      f0 *= u
      f0 += v
      g0 += r

      f += f0
      g = t2+g0

# at this point new f and g are computed.

# startswap
FVGS0 = stack_FVGS0

new uuss
uuss = u,uuss[1],0,0
uuss = uuss[0],s,0,0

GSFV0 = FVGS0[1,0]

uuss = uuss[0,0,1,1]
vvrr = vvrr[0,0,1,1]


_2p30m1x4 = stack_2p30m1x4

uuss0 = uuss & _2p30m1x4
vvrr0 = vvrr & _2p30m1x4 

_2p63x4 = stack_2p63x4

uuss1 = uuss ^ _2p63x4
vvrr1 = vvrr ^ _2p63x4
4x uuss1 unsigned>>= 30
4x vvrr1 unsigned>>= 30

_2p33x4 = stack_2p33x4

4x uuss1 -= _2p33x4
4x vvrr1 -= _2p33x4

4x ta = int32 uuss0 * int32 FVGS0
4x tb = int32 vvrr0 * int32 GSFV0
4x out0 = ta + tb

minvx4 = 4x stack_minv
mod0 = stack_mod0

4x d0 = int32 minvx4 * int32 out0
d0 &= _2p30m1x4
4x ta = int32 mod0 * int32 d0
4x out0 += ta

4x carryy = out0 +_2p63x4
4x carryy unsigned>>= 30


FVGS1 = stack_FVGS1
GSFV1 = FVGS1[1,0]
mod1 = stack_mod1
4x ta = int32 uuss1 * int32 FVGS0
4x tb = int32 vvrr1 * int32 GSFV0
4x out1plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS1
4x tb = int32 vvrr0 * int32 GSFV1
4x out1 = ta + tb
4x out1 += out1plus
4x ta = int32 d0 * int32 mod1
4x ta += carryy
4x out1 += ta
4x d1 = int32 minvx4 * int32 out1
d1 &= _2p30m1x4
4x ta = int32 mod0 * int32 d1
4x out1 += ta
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out1 + _2p63m2p33x4 
4x carryy unsigned>>= 30


FVGS2 = stack_FVGS2
GSFV2 = FVGS2[1,0]
mod2 = stack_mod2
4x ta = int32 uuss1 * int32 FVGS1
4x tb = int32 vvrr1 * int32 GSFV1
4x out2plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS2
4x tb = int32 vvrr0 * int32 GSFV2
4x out2 = ta + tb
4x out2 += out2plus
4x ta = int32 d0 * int32 mod2
4x tb = int32 d1 * int32 mod1
4x out2plus2 = ta + tb
4x out2plus2 += carryy
4x out2 += out2plus2

4x carryy = out2 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out2 &= _2p30m1x4
stack_FVGS0 = out2

FVGS3 = stack_FVGS3
GSFV3 = FVGS3[1,0]
mod3 = stack_mod3
4x ta = int32 uuss1 * int32 FVGS2
4x tb = int32 vvrr1 * int32 GSFV2
4x out3plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS3
4x tb = int32 vvrr0 * int32 GSFV3
4x out3 = ta + tb
4x out3 += out3plus
4x ta = int32 d0 * int32 mod3
4x tb = int32 d1 * int32 mod2
4x out3plus2 = ta + tb
4x out3plus2 += carryy
4x out3 += out3plus2

4x carryy = out3 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out3 &= _2p30m1x4
stack_FVGS1 = out3

FVGS4 = stack_FVGS4
GSFV4 = FVGS4[1,0]
mod4 = stack_mod4
4x ta = int32 uuss1 * int32 FVGS3
4x tb = int32 vvrr1 * int32 GSFV3
4x out4plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS4
4x tb = int32 vvrr0 * int32 GSFV4
4x out4 = ta + tb
4x out4 += out4plus
4x ta = int32 d0 * int32 mod4
4x tb = int32 d1 * int32 mod3
4x out4plus2 = ta + tb
4x out4plus2 += carryy
4x out4 += out4plus2

4x carryy = out4 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out4 &= _2p30m1x4
stack_FVGS2 = out4

FVGS5 = stack_FVGS5
GSFV5 = FVGS5[1,0]
mod5 = stack_mod5
4x ta = int32 uuss1 * int32 FVGS4
4x tb = int32 vvrr1 * int32 GSFV4
4x out5plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS5
4x tb = int32 vvrr0 * int32 GSFV5
4x out5 = ta + tb
4x out5 += out5plus
4x ta = int32 d0 * int32 mod5
4x tb = int32 d1 * int32 mod4
4x out5plus2 = ta + tb
4x out5plus2 += carryy
4x out5 += out5plus2

4x carryy = out5 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out5 &= _2p30m1x4
stack_FVGS3 = out5

FVGS6 = stack_FVGS6
GSFV6 = FVGS6[1,0]
mod6 = stack_mod6
4x ta = int32 uuss1 * int32 FVGS5
4x tb = int32 vvrr1 * int32 GSFV5
4x out6plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS6
4x tb = int32 vvrr0 * int32 GSFV6
4x out6 = ta + tb
4x out6 += out6plus
4x ta = int32 d0 * int32 mod6
4x tb = int32 d1 * int32 mod5
4x out6plus2 = ta + tb
4x out6plus2 += carryy
4x out6 += out6plus2

4x carryy = out6 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out6 &= _2p30m1x4
stack_FVGS4 = out6

FVGS7 = stack_FVGS7
GSFV7 = FVGS7[1,0]
mod7 = stack_mod7
4x ta = int32 uuss1 * int32 FVGS6
4x tb = int32 vvrr1 * int32 GSFV6
4x out7plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS7
4x tb = int32 vvrr0 * int32 GSFV7
4x out7 = ta + tb
4x out7 += out7plus
4x ta = int32 d0 * int32 mod7
4x tb = int32 d1 * int32 mod6
4x out7plus2 = ta + tb
4x out7plus2 += carryy
4x out7 += out7plus2

4x carryy = out7 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out7 &= _2p30m1x4
stack_FVGS5 = out7

FVGS8 = stack_FVGS8
GSFV8 = FVGS8[1,0]
mod8 = stack_mod8
4x ta = int32 uuss1 * int32 FVGS7
4x tb = int32 vvrr1 * int32 GSFV7
4x out8plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS8
4x tb = int32 vvrr0 * int32 GSFV8
4x out8 = ta + tb
4x out8 += out8plus
4x ta = int32 d0 * int32 mod8
4x tb = int32 d1 * int32 mod7
4x out8plus2 = ta + tb
4x out8plus2 += carryy
4x out8 += out8plus2

4x carryy = out8 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out8 &= _2p30m1x4
stack_FVGS6 = out8

FVGS9 = stack_FVGS9
GSFV9 = FVGS9[1,0]
mod9 = stack_mod9
4x ta = int32 uuss1 * int32 FVGS8
4x tb = int32 vvrr1 * int32 GSFV8
4x out9plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS9
4x tb = int32 vvrr0 * int32 GSFV9
4x out9 = ta + tb
4x out9 += out9plus
4x ta = int32 d0 * int32 mod9
4x tb = int32 d1 * int32 mod8
4x out9plus2 = ta + tb
4x out9plus2 += carryy
4x out9 += out9plus2

4x carryy = out9 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out9 &= _2p30m1x4
stack_FVGS7 = out9

FVGS10 = stack_FVGS10
GSFV10 = FVGS10[1,0]
mod10 = stack_mod10
4x ta = int32 uuss1 * int32 FVGS9
4x tb = int32 vvrr1 * int32 GSFV9
4x out10plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS10
4x tb = int32 vvrr0 * int32 GSFV10
4x out10 = ta + tb
4x out10 += out10plus
4x ta = int32 d0 * int32 mod10
4x tb = int32 d1 * int32 mod9
4x out10plus2 = ta + tb
4x out10plus2 += carryy
4x out10 += out10plus2

4x carryy = out10 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out10 &= _2p30m1x4
stack_FVGS8 = out10

FVGS11 = stack_FVGS11
GSFV11 = FVGS11[1,0]
mod11 = stack_mod11
4x ta = int32 uuss1 * int32 FVGS10
4x tb = int32 vvrr1 * int32 GSFV10
4x out11plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS11
4x tb = int32 vvrr0 * int32 GSFV11
4x out11 = ta + tb
4x out11 += out11plus
4x ta = int32 d0 * int32 mod11
4x tb = int32 d1 * int32 mod10
4x out11plus2 = ta + tb
4x out11plus2 += carryy
4x out11 += out11plus2

4x carryy = out11 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out11 &= _2p30m1x4
stack_FVGS9 = out11

FVGS12 = stack_FVGS12
GSFV12 = FVGS12[1,0]
mod12 = stack_mod12
4x ta = int32 uuss1 * int32 FVGS11
4x tb = int32 vvrr1 * int32 GSFV11
4x out12plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS12
4x tb = int32 vvrr0 * int32 GSFV12
4x out12 = ta + tb
4x out12 += out12plus
4x ta = int32 d0 * int32 mod12
4x tb = int32 d1 * int32 mod11
4x out12plus2 = ta + tb
4x out12plus2 += carryy
4x out12 += out12plus2

4x carryy = out12 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out12 &= _2p30m1x4
stack_FVGS10 = out12

FVGS13 = stack_FVGS13
GSFV13 = FVGS13[1,0]
mod13 = stack_mod13
4x ta = int32 uuss1 * int32 FVGS12
4x tb = int32 vvrr1 * int32 GSFV12
4x out13plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS13
4x tb = int32 vvrr0 * int32 GSFV13
4x out13 = ta + tb
4x out13 += out13plus
4x ta = int32 d0 * int32 mod13
4x tb = int32 d1 * int32 mod12
4x out13plus2 = ta + tb
4x out13plus2 += carryy
4x out13 += out13plus2

4x carryy = out13 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out13 &= _2p30m1x4
stack_FVGS11 = out13

FVGS14 = stack_FVGS14
GSFV14 = FVGS14[1,0]
mod14 = stack_mod14
4x ta = int32 uuss1 * int32 FVGS13
4x tb = int32 vvrr1 * int32 GSFV13
4x out14plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS14
4x tb = int32 vvrr0 * int32 GSFV14
4x out14 = ta + tb
4x out14 += out14plus
4x ta = int32 d0 * int32 mod14
4x tb = int32 d1 * int32 mod13
4x out14plus2 = ta + tb
4x out14plus2 += carryy
4x out14 += out14plus2

4x carryy = out14 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out14 &= _2p30m1x4
stack_FVGS12 = out14

FVGS15 = stack_FVGS15
GSFV15 = FVGS15[1,0]
mod15 = stack_mod15
4x ta = int32 uuss1 * int32 FVGS14
4x tb = int32 vvrr1 * int32 GSFV14
4x out15plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS15
4x tb = int32 vvrr0 * int32 GSFV15
4x out15 = ta + tb
4x out15 += out15plus
4x ta = int32 d0 * int32 mod15
4x tb = int32 d1 * int32 mod14
4x out15plus2 = ta + tb
4x out15plus2 += carryy
4x out15 += out15plus2

4x carryy = out15 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out15 &= _2p30m1x4
stack_FVGS13 = out15

FVGS16 = stack_FVGS16
GSFV16 = FVGS16[1,0]
mod16 = stack_mod16
4x ta = int32 uuss1 * int32 FVGS15
4x tb = int32 vvrr1 * int32 GSFV15
4x out16plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS16
4x tb = int32 vvrr0 * int32 GSFV16
4x out16 = ta + tb
4x out16 += out16plus
4x ta = int32 d0 * int32 mod16
4x tb = int32 d1 * int32 mod15
4x out16plus2 = ta + tb
4x out16plus2 += carryy
4x out16 += out16plus2

4x carryy = out16 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out16 &= _2p30m1x4
stack_FVGS14 = out16

FVGS17 = stack_FVGS17
GSFV17 = FVGS17[1,0]
mod17 = stack_mod17
4x ta = int32 uuss1 * int32 FVGS16
4x tb = int32 vvrr1 * int32 GSFV16
4x out17plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS17
4x tb = int32 vvrr0 * int32 GSFV17
4x out17 = ta + tb
4x out17 += out17plus
4x ta = int32 d0 * int32 mod17
4x tb = int32 d1 * int32 mod16
4x out17plus2 = ta + tb
4x out17plus2 += carryy
4x out17 += out17plus2

4x carryy = out17 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out17 &= _2p30m1x4
stack_FVGS15 = out17
_2p33x4 = stack_2p33x4
4x ta = int32 uuss1 * int32 FVGS17
4x tb = int32 vvrr1 * int32 GSFV17
4x out18plus = ta + tb
4x ta = int32 mod17 * int32 d1
4x out18 = ta + carryy
4x out18 += out18plus
4x out19 = out18 + _2p63m2p33x4
4x out19 unsigned >>= 30
4x out19 -= _2p33x4
out18 &= _2p30m1x4
stack_FVGS16 = out18
stack_FVGS17 = out19

# entering condition: f and g are 60-bit signed ints

loop20_init:

  fuv = f & ~ _m2p20
  grs = g & ~ _m2p20
  #fuv = f
  #grs = g
  #fuv <<= 44
  #grs <<= 44
  #(int64) fuv >>= 44
  #(int64) grs >>= 44
  fuv += stack_m2p41
  grs += stack_m2p62

# Rep #0
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #1
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #2
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #3
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #4
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #5
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #6
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #7
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #8
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #9
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #10
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #11
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #12
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #13
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #14
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #15
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #16
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #17
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #18
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #19
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1


# extract u,v,r,s; compute next f,g
extract_init:

  _2p20a2p41 = stack_2p20a2p41
  s = grs + _2p20a2p41
  (int64) s >>= 42

  t2 = g
  g *= s  
  # g = gs

  v = fuv + _2p20a2p41
  (int64) v >>= 42

  t2 *= v
  # t2 = gv

  _2p20 = stack_2p20
  r = grs + _2p20
  r <<= 22
  (int64) r >>= 43

      rax = f
      rax *= r
      # rax = fr

  u = fuv + _2p20
  u <<= 22
  (int64) u >>= 43

       f *= u
       f += t2
       g += rax

  (int64) f >>= 20
  (int64) g >>= 20

  inplace stack_vvrr[0] = v
  inplace stack_uuss[0] = u
  inplace stack_uuss[2] = s
  inplace stack_vvrr[2] = r

#  loop = 4
  #loop = 3
  loop = 2
# endswap

loop20:

  fuv = f & ~ _m2p20
  grs = g & ~ _m2p20
  #fuv = f
  #grs = g
  #fuv <<= 44
  #grs <<= 44
  #(int64) fuv >>= 44
  #(int64) grs >>= 44
  fuv += stack_m2p41
  grs += stack_m2p62

j = 4
loop2:
# Rep #0
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #1
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #2
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #3
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

# Rep #4
  z = -1
  oldg = grs
  h = grs + fuv
              =? grs & 1

  z = m   if !=
  h = grs if  =
  mnew = m + 1
  grs -= fuv

  (int64) grs >>= 1
  (int64) h >>= 1
  m = -m
                 signed<? z - 0

  fuv = oldg if !signed<
  grs = h    if  signed<
  m = mnew   if  signed<
#  (int64) grs >>= 1

 =? j -= 1
goto loop2 if !=

  =? loop -= 1		
goto lastloop if =

# extract u,v,r,s
extract:

  _2p20a2p41 = stack_2p20a2p41
  s = grs + _2p20a2p41
  (int64) s >>= 42

  t2 = g
  g *= s  
  # g = gs

  v = fuv + _2p20a2p41
  (int64) v >>= 42

  t2 *= v
  # t2 = gv

  _2p20 = stack_2p20
  r = grs + _2p20
  r <<= 22
  (int64) r >>= 43

      rax = f
      rax *= r
      # rax = fr

  u = fuv + _2p20
  u <<= 22
  (int64) u >>= 43

       f *= u
       f += t2
       g += rax

  (int64) f >>= 20
  (int64) g >>= 20

#first loops iteration has NOT been removed
#=? loop - 2  
#goto first_loop if =

  t0 = stack_uuss[0]
  t0 *= u
  t1 = stack_vvrr[2]
  t1 *= v

  rtimesoldv = stack_vvrr[0]
  u *= rtimesoldv
  stimesolds = stack_uuss[2]
  v *= stimesolds
  rtimesoldv *= r
  stimesolds *= s
  r *= stack_uuss[0]
  s *= stack_vvrr[2]

  v += u
  u = t0 + t1

  r += s
  s = rtimesoldv + stimesolds

first_loop:


  inplace stack_vvrr[0] = v
  inplace stack_uuss[0] = u
  inplace stack_uuss[2] = s
  inplace stack_vvrr[2] = r


goto loop20 

lastloop:

  _2p20a2p41 = stack_2p20a2p41
  s = grs + _2p20a2p41
  (int64) s >>= 42
  v = fuv + _2p20a2p41
  (int64) v >>= 42

  t1 = stack_vvrr[2]
  t1 *= v
  stimesolds = stack_uuss[2]
  v *= stimesolds
  stimesolds *= s

  _2p20 = stack_2p20
  r = grs + _2p20
  r <<= 22
  (int64) r >>= 43
  u = fuv + _2p20
  u <<= 22
  (int64) u >>= 43

  t0 = stack_uuss[0]
  t0 *= u
  rtimesoldv = stack_vvrr[0]
  u *= rtimesoldv
  rtimesoldv *= r

  s *= stack_vvrr[2]
  r *= stack_uuss[0]

  v += u
  u = t0 + t1
  r += s
  s = rtimesoldv + stimesolds

  #f = stack_fxgx[0]
  #g = stack_fxgx[2]
  #f0 = stack_fygy[0]
  #g0 = stack_fygy[2]

  t0 = stack_FVGS0[0]
  t1 = stack_FVGS1[0]
  t1 <<= 30
  f = t0 + t1
 
  t0 = stack_FVGS0[2]
  t1 = stack_FVGS1[2]
  t1 <<= 30
  g = t0 + t1

  t0 = stack_FVGS2[0]
  t1 = stack_FVGS3[0]
  t1 <<= 30
  f0 = t0 + t1
 
  t0 = stack_FVGS2[2]
  t1 = stack_FVGS3[2]
  t1 <<= 30
  g0 = t0 + t1

=? i -= 1
goto bigloop if !=



last_transition:

fuv &= 2
t0 = fuv - 1
# t0 should be +1 or -1, depending on fuv was -1 or +1
u *= t0
v *= t0

# transition portion


new vvrr
vvrr = v,vvrr[1],0,0
vvrr = vvrr[0],r,0,0

FVGS0 = stack_FVGS0

new uuss
uuss = u,uuss[1],0,0
uuss = uuss[0],s,0,0

GSFV0 = FVGS0[1,0]

uuss = uuss[0,0,1,1]
vvrr = vvrr[0,0,1,1]


_2p30m1x4 = stack_2p30m1x4

uuss0 = uuss & _2p30m1x4
vvrr0 = vvrr & _2p30m1x4 

_2p63x4 = stack_2p63x4

uuss1 = uuss ^ _2p63x4
vvrr1 = vvrr ^ _2p63x4
4x uuss1 unsigned>>= 30
4x vvrr1 unsigned>>= 30

_2p33x4 = stack_2p33x4

4x uuss1 -= _2p33x4
4x vvrr1 -= _2p33x4

4x ta = int32 uuss0 * int32 FVGS0
4x tb = int32 vvrr0 * int32 GSFV0
4x out0 = ta + tb

minvx4 = 4x stack_minv
mod0 = stack_mod0

4x d0 = int32 minvx4 * int32 out0
d0 &= _2p30m1x4
4x ta = int32 mod0 * int32 d0
4x out0 += ta

4x carryy = out0 +_2p63x4
4x carryy unsigned>>= 30


FVGS1 = stack_FVGS1
GSFV1 = FVGS1[1,0]
mod1 = stack_mod1
4x ta = int32 uuss1 * int32 FVGS0
4x tb = int32 vvrr1 * int32 GSFV0
4x out1plus = ta + tb
4x ta = int32 uuss0 * int32 FVGS1
4x tb = int32 vvrr0 * int32 GSFV1
4x out1 = ta + tb
4x out1 += out1plus
4x ta = int32 d0 * int32 mod1
4x ta += carryy
4x out1 += ta
4x d1 = int32 minvx4 * int32 out1
d1 &= _2p30m1x4
4x ta = int32 mod0 * int32 d1
4x out1 += ta
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out1 + _2p63m2p33x4 
4x carryy unsigned>>= 30

FVGS2 = stack_FVGS2
GSFV2 = FVGS2[1,0]
4x ta = int32 uuss1 * int32 FVGS1
4x out2 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV1
4x out2 += tb
4x ta = int32 uuss0 * int32 FVGS2
4x out2 += ta
4x tb = int32 vvrr0 * int32 GSFV2
4x out2 += tb
4x tb = int32 d1 * int32 mod1
4x out2 += tb
mod2 = stack_mod2
4x ta = int32 d0 * int32 mod2
4x out2 += ta
_2p30m1x4 = stack_2p30m1x4
_2p29x4 = stack_2p29x4
4x d2 = int32 minvx4 * int32 out2
d2 &= _2p30m1x4
d2 ^= _2p29x4
4x d2 -=  _2p29x4
4x ta = int32 mod0 * int32 d2
4x out2 += ta
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out2 + _2p63m2p33x4 
4x carryy unsigned>>= 30


FVGS3 = stack_FVGS3
GSFV3 = FVGS3[1,0]
4x ta = int32 uuss1 * int32 FVGS2
4x out3 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV2
4x out3 += tb
4x ta = int32 uuss0 * int32 FVGS3
4x out3 += ta
4x tb = int32 vvrr0 * int32 GSFV3
4x out3 += tb
mod3 = stack_mod3
4x ta = int32 d2 * int32 mod1
4x out3 += ta
4x tb = int32 d1 * int32 mod2
4x out3 += tb
4x ta = int32 d0 * int32 mod3
4x out3 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out3 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out3 &= _2p30m1x4
stack_FVGS0 = out3

FVGS4 = stack_FVGS4
GSFV4 = FVGS4[1,0]
4x ta = int32 uuss1 * int32 FVGS3
4x out4 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV3
4x out4 += tb
4x ta = int32 uuss0 * int32 FVGS4
4x out4 += ta
4x tb = int32 vvrr0 * int32 GSFV4
4x out4 += tb
mod4 = stack_mod4
4x ta = int32 d2 * int32 mod2
4x out4 += ta
4x tb = int32 d1 * int32 mod3
4x out4 += tb
4x ta = int32 d0 * int32 mod4
4x out4 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out4 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out4 &= _2p30m1x4
stack_FVGS1 = out4

FVGS5 = stack_FVGS5
GSFV5 = FVGS5[1,0]
4x ta = int32 uuss1 * int32 FVGS4
4x out5 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV4
4x out5 += tb
4x ta = int32 uuss0 * int32 FVGS5
4x out5 += ta
4x tb = int32 vvrr0 * int32 GSFV5
4x out5 += tb
mod5 = stack_mod5
4x ta = int32 d2 * int32 mod3
4x out5 += ta
4x tb = int32 d1 * int32 mod4
4x out5 += tb
4x ta = int32 d0 * int32 mod5
4x out5 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out5 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out5 &= _2p30m1x4
stack_FVGS2 = out5

FVGS6 = stack_FVGS6
GSFV6 = FVGS6[1,0]
4x ta = int32 uuss1 * int32 FVGS5
4x out6 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV5
4x out6 += tb
4x ta = int32 uuss0 * int32 FVGS6
4x out6 += ta
4x tb = int32 vvrr0 * int32 GSFV6
4x out6 += tb
mod6 = stack_mod6
4x ta = int32 d2 * int32 mod4
4x out6 += ta
4x tb = int32 d1 * int32 mod5
4x out6 += tb
4x ta = int32 d0 * int32 mod6
4x out6 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out6 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out6 &= _2p30m1x4
stack_FVGS3 = out6

FVGS7 = stack_FVGS7
GSFV7 = FVGS7[1,0]
4x ta = int32 uuss1 * int32 FVGS6
4x out7 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV6
4x out7 += tb
4x ta = int32 uuss0 * int32 FVGS7
4x out7 += ta
4x tb = int32 vvrr0 * int32 GSFV7
4x out7 += tb
mod7 = stack_mod7
4x ta = int32 d2 * int32 mod5
4x out7 += ta
4x tb = int32 d1 * int32 mod6
4x out7 += tb
4x ta = int32 d0 * int32 mod7
4x out7 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out7 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out7 &= _2p30m1x4
stack_FVGS4 = out7

FVGS8 = stack_FVGS8
GSFV8 = FVGS8[1,0]
4x ta = int32 uuss1 * int32 FVGS7
4x out8 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV7
4x out8 += tb
4x ta = int32 uuss0 * int32 FVGS8
4x out8 += ta
4x tb = int32 vvrr0 * int32 GSFV8
4x out8 += tb
mod8 = stack_mod8
4x ta = int32 d2 * int32 mod6
4x out8 += ta
4x tb = int32 d1 * int32 mod7
4x out8 += tb
4x ta = int32 d0 * int32 mod8
4x out8 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out8 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out8 &= _2p30m1x4
stack_FVGS5 = out8

FVGS9 = stack_FVGS9
GSFV9 = FVGS9[1,0]
4x ta = int32 uuss1 * int32 FVGS8
4x out9 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV8
4x out9 += tb
4x ta = int32 uuss0 * int32 FVGS9
4x out9 += ta
4x tb = int32 vvrr0 * int32 GSFV9
4x out9 += tb
mod9 = stack_mod9
4x ta = int32 d2 * int32 mod7
4x out9 += ta
4x tb = int32 d1 * int32 mod8
4x out9 += tb
4x ta = int32 d0 * int32 mod9
4x out9 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out9 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out9 &= _2p30m1x4
stack_FVGS6 = out9

FVGS10 = stack_FVGS10
GSFV10 = FVGS10[1,0]
4x ta = int32 uuss1 * int32 FVGS9
4x out10 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV9
4x out10 += tb
4x ta = int32 uuss0 * int32 FVGS10
4x out10 += ta
4x tb = int32 vvrr0 * int32 GSFV10
4x out10 += tb
mod10 = stack_mod10
4x ta = int32 d2 * int32 mod8
4x out10 += ta
4x tb = int32 d1 * int32 mod9
4x out10 += tb
4x ta = int32 d0 * int32 mod10
4x out10 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out10 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out10 &= _2p30m1x4
stack_FVGS7 = out10

FVGS11 = stack_FVGS11
GSFV11 = FVGS11[1,0]
4x ta = int32 uuss1 * int32 FVGS10
4x out11 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV10
4x out11 += tb
4x ta = int32 uuss0 * int32 FVGS11
4x out11 += ta
4x tb = int32 vvrr0 * int32 GSFV11
4x out11 += tb
mod11 = stack_mod11
4x ta = int32 d2 * int32 mod9
4x out11 += ta
4x tb = int32 d1 * int32 mod10
4x out11 += tb
4x ta = int32 d0 * int32 mod11
4x out11 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out11 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out11 &= _2p30m1x4
stack_FVGS8 = out11

FVGS12 = stack_FVGS12
GSFV12 = FVGS12[1,0]
4x ta = int32 uuss1 * int32 FVGS11
4x out12 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV11
4x out12 += tb
4x ta = int32 uuss0 * int32 FVGS12
4x out12 += ta
4x tb = int32 vvrr0 * int32 GSFV12
4x out12 += tb
mod12 = stack_mod12
4x ta = int32 d2 * int32 mod10
4x out12 += ta
4x tb = int32 d1 * int32 mod11
4x out12 += tb
4x ta = int32 d0 * int32 mod12
4x out12 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out12 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out12 &= _2p30m1x4
stack_FVGS9 = out12

FVGS13 = stack_FVGS13
GSFV13 = FVGS13[1,0]
4x ta = int32 uuss1 * int32 FVGS12
4x out13 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV12
4x out13 += tb
4x ta = int32 uuss0 * int32 FVGS13
4x out13 += ta
4x tb = int32 vvrr0 * int32 GSFV13
4x out13 += tb
mod13 = stack_mod13
4x ta = int32 d2 * int32 mod11
4x out13 += ta
4x tb = int32 d1 * int32 mod12
4x out13 += tb
4x ta = int32 d0 * int32 mod13
4x out13 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out13 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out13 &= _2p30m1x4
stack_FVGS10 = out13

FVGS14 = stack_FVGS14
GSFV14 = FVGS14[1,0]
4x ta = int32 uuss1 * int32 FVGS13
4x out14 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV13
4x out14 += tb
4x ta = int32 uuss0 * int32 FVGS14
4x out14 += ta
4x tb = int32 vvrr0 * int32 GSFV14
4x out14 += tb
mod14 = stack_mod14
4x ta = int32 d2 * int32 mod12
4x out14 += ta
4x tb = int32 d1 * int32 mod13
4x out14 += tb
4x ta = int32 d0 * int32 mod14
4x out14 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out14 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out14 &= _2p30m1x4
stack_FVGS11 = out14

FVGS15 = stack_FVGS15
GSFV15 = FVGS15[1,0]
4x ta = int32 uuss1 * int32 FVGS14
4x out15 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV14
4x out15 += tb
4x ta = int32 uuss0 * int32 FVGS15
4x out15 += ta
4x tb = int32 vvrr0 * int32 GSFV15
4x out15 += tb
mod15 = stack_mod15
4x ta = int32 d2 * int32 mod13
4x out15 += ta
4x tb = int32 d1 * int32 mod14
4x out15 += tb
4x ta = int32 d0 * int32 mod15
4x out15 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out15 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out15 &= _2p30m1x4
stack_FVGS12 = out15

FVGS16 = stack_FVGS16
GSFV16 = FVGS16[1,0]
4x ta = int32 uuss1 * int32 FVGS15
4x out16 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV15
4x out16 += tb
4x ta = int32 uuss0 * int32 FVGS16
4x out16 += ta
4x tb = int32 vvrr0 * int32 GSFV16
4x out16 += tb
mod16 = stack_mod16
4x ta = int32 d2 * int32 mod14
4x out16 += ta
4x tb = int32 d1 * int32 mod15
4x out16 += tb
4x ta = int32 d0 * int32 mod16
4x out16 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out16 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out16 &= _2p30m1x4
stack_FVGS13 = out16

FVGS17 = stack_FVGS17
GSFV17 = FVGS17[1,0]
4x ta = int32 uuss1 * int32 FVGS16
4x out17 = ta + carryy
4x tb = int32 vvrr1 * int32 GSFV16
4x out17 += tb
4x ta = int32 uuss0 * int32 FVGS17
4x out17 += ta
4x tb = int32 vvrr0 * int32 GSFV17
4x out17 += tb
mod17 = stack_mod17
4x ta = int32 d2 * int32 mod15
4x out17 += ta
4x tb = int32 d1 * int32 mod16
4x out17 += tb
4x ta = int32 d0 * int32 mod17
4x out17 += ta
_2p30m1x4 = stack_2p30m1x4
_2p63m2p33x4 = stack_2p63m2p33x4

4x carryy = out17 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out17 &= _2p30m1x4
stack_FVGS14 = out17
4x ta = int32 uuss1 * int32 FVGS17
4x tb = int32 vvrr1 * int32 GSFV17
4x out18plus = ta + tb
4x ta = int32 mod17 * int32 d1
4x tb = int32 mod16 * int32 d2
4x tb += carryy
4x out18 = ta + tb
4x out18 += out18plus

4x carryy = out18 + _2p63m2p33x4 
4x carryy unsigned>>= 30

out18 &= _2p30m1x4
stack_FVGS15 = out18
_2p33x4 = stack_2p33x4
4x tb = int32 mod17 * int32 d2
4x out19 = tb + carryy
4x out20 = out19 + _2p63m2p33x4
4x out20 unsigned >>= 30
4x out20 -= _2p33x4
out19 &= _2p30m1x4
stack_FVGS17 = out20
stack_FVGS16 = out19
# now V is between +- p, conditionally add a p into V
a17 = stack_FVGS17[1]
t0 = a17
(int64) t0 >>= 63
t1 = stack_mod17[0]
t1 &= t0
a17 += t1
inplace stack_FVGS17[1] = a17
a0 = stack_FVGS0[1]
t1 = stack_mod0[0]
t1 &= t0
a0 += t1
inplace stack_FVGS0[1] = a0
a1 = stack_FVGS1[1]
t1 = stack_mod1[0]
t1 &= t0
a1 += t1
inplace stack_FVGS1[1] = a1
a2 = stack_FVGS2[1]
t1 = stack_mod2[0]
t1 &= t0
a2 += t1
inplace stack_FVGS2[1] = a2
a3 = stack_FVGS3[1]
t1 = stack_mod3[0]
t1 &= t0
a3 += t1
inplace stack_FVGS3[1] = a3
a4 = stack_FVGS4[1]
t1 = stack_mod4[0]
t1 &= t0
a4 += t1
inplace stack_FVGS4[1] = a4
a5 = stack_FVGS5[1]
t1 = stack_mod5[0]
t1 &= t0
a5 += t1
inplace stack_FVGS5[1] = a5
a6 = stack_FVGS6[1]
t1 = stack_mod6[0]
t1 &= t0
a6 += t1
inplace stack_FVGS6[1] = a6
a7 = stack_FVGS7[1]
t1 = stack_mod7[0]
t1 &= t0
a7 += t1
inplace stack_FVGS7[1] = a7
a8 = stack_FVGS8[1]
t1 = stack_mod8[0]
t1 &= t0
a8 += t1
inplace stack_FVGS8[1] = a8
a9 = stack_FVGS9[1]
t1 = stack_mod9[0]
t1 &= t0
a9 += t1
inplace stack_FVGS9[1] = a9
a10 = stack_FVGS10[1]
t1 = stack_mod10[0]
t1 &= t0
a10 += t1
inplace stack_FVGS10[1] = a10
a11 = stack_FVGS11[1]
t1 = stack_mod11[0]
t1 &= t0
a11 += t1
inplace stack_FVGS11[1] = a11
a12 = stack_FVGS12[1]
t1 = stack_mod12[0]
t1 &= t0
a12 += t1
inplace stack_FVGS12[1] = a12
a13 = stack_FVGS13[1]
t1 = stack_mod13[0]
t1 &= t0
a13 += t1
inplace stack_FVGS13[1] = a13
a14 = stack_FVGS14[1]
t1 = stack_mod14[0]
t1 &= t0
a14 += t1
inplace stack_FVGS14[1] = a14
a15 = stack_FVGS15[1]
t1 = stack_mod15[0]
t1 &= t0
a15 += t1
inplace stack_FVGS15[1] = a15
a16 = stack_FVGS16[1]
t1 = stack_mod16[0]
t1 &= t0
a16 += t1
inplace stack_FVGS16[1] = a16
# now need to collapse the V's into the answer
# each V is from 0 to 2^31
h = stack_out
a0 = stack_FVGS0[1]
t1 = stack_FVGS1[1]
t1 <<= 30
a0 += t1
t2 = stack_FVGS2[1]
a1 = t2
t2 <<= 60
(uint64) a1 >>= 4
carry? a0 += t2
a1 += 0 + carry
mem64[h +  0] = a0
t3 = stack_FVGS3[1]
t3 <<= 26
a1 += t3
t4 = stack_FVGS4[1]
a2 = t4
t4 <<= 56
(uint64) a2 >>= 8
carry? a1 += t4
a2 += 0 + carry
mem64[h +  8] = a1
t5 = stack_FVGS5[1]
t5 <<= 22
a2 += t5
t6 = stack_FVGS6[1]
a3 = t6
t6 <<= 52
(uint64) a3 >>= 12
carry? a2 += t6
a3 += 0 + carry
mem64[h + 16] = a2
t7 = stack_FVGS7[1]
t7 <<= 18
a3 += t7
t8 = stack_FVGS8[1]
a4 = t8
t8 <<= 48
(uint64) a4 >>= 16
carry? a3 += t8
a4 += 0 + carry
mem64[h + 24] = a3
t9 = stack_FVGS9[1]
t9 <<= 14
a4 += t9
t10 = stack_FVGS10[1]
a5 = t10
t10 <<= 44
(uint64) a5 >>= 20
carry? a4 += t10
a5 += 0 + carry
mem64[h + 32] = a4
t11 = stack_FVGS11[1]
t11 <<= 10
a5 += t11
t12 = stack_FVGS12[1]
a6 = t12
t12 <<= 40
(uint64) a6 >>= 24
carry? a5 += t12
a6 += 0 + carry
mem64[h + 40] = a5
t13 = stack_FVGS13[1]
t13 <<= 6
a6 += t13
t14 = stack_FVGS14[1]
a7 = t14
t14 <<= 36
(uint64) a7 >>= 28
carry? a6 += t14
a7 += 0 + carry
mem64[h + 48] = a6
t15 = stack_FVGS15[1]
t15 <<= 2
a7 += t15
t16 = stack_FVGS16[1]
t16 <<= 32
a7 += t16
t17 = stack_FVGS17[1]
a8 = t17
t17 <<= 62
(uint64) a8 >>= 2
carry? a7 += t17
a8 += 0 + carry
mem64[h + 56] = a7
caller_r11 = stack_r11
caller_r12 = stack_r12
caller_r13 = stack_r13
caller_r14 = stack_r14
caller_r15 = stack_r15
caller_rbx = stack_rbx
caller_rbp = stack_rbp
return
