# Generated by cmovm-loop.py
int64 m
int64 f
int64 g
int64 u
int64 v
int64 r
int64 s
int64 uvrs
int64 fuv
int64 grs
int64 mnew
int64 z
int64 loop
int64 rax
int64 rdx
int64 t0
int64 t1
int64 t2
int64 h
int64 oldg
int64 i
int64 f0
int64 g0
int64 m1

stack64 stack_0



enter innerloop15x1000
fuv = input_0
grs = input_1
z = 0
stack_0 = z
m = 1
i = 1000
m1 = -1


stack64 stack_r11
stack_r11 = caller_r11
stack64 stack_r12
stack_r12 = caller_r12
stack64 stack_r13
stack_r13 = caller_r13
stack64 stack_r14
stack_r14 = caller_r14
stack64 stack_r15
stack_r15 = caller_r15
stack64 stack_rbx
stack_rbx = caller_rbx
stack64 stack_rbp
stack_rbp = caller_rbp
loop1000:
# Rep #0
  z = stack_0
  h = grs + fuv
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew = m + m1
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m ^= m1
                 signed<? z & z

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if !signed<
#  (int64) grs >>= 1

# Rep #1
  z = stack_0
  h = grs + fuv
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew = m + m1
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m ^= m1
                 signed<? z & z

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if !signed<
#  (int64) grs >>= 1

# Rep #2
  z = stack_0
  h = grs + fuv
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew = m + m1
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m ^= m1
                 signed<? z & z

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if !signed<
#  (int64) grs >>= 1

# Rep #3
  z = stack_0
  h = grs + fuv
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew = m + m1
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m ^= m1
                 signed<? z & z

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if !signed<
#  (int64) grs >>= 1

# Rep #4
  z = stack_0
  h = grs + fuv
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew = m + m1
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m ^= m1
                 signed<? z & z

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if !signed<
#  (int64) grs >>= 1

# Rep #5
  z = stack_0
  h = grs + fuv
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew = m + m1
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m ^= m1
                 signed<? z & z

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if !signed<
#  (int64) grs >>= 1

# Rep #6
  z = stack_0
  h = grs + fuv
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew = m + m1
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m ^= m1
                 signed<? z & z

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if !signed<
#  (int64) grs >>= 1

# Rep #7
  z = stack_0
  h = grs + fuv
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew = m + m1
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m ^= m1
                 signed<? z & z

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if !signed<
#  (int64) grs >>= 1

# Rep #8
  z = stack_0
  h = grs + fuv
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew = m + m1
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m ^= m1
                 signed<? z & z

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if !signed<
#  (int64) grs >>= 1

# Rep #9
  z = stack_0
  h = grs + fuv
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew = m + m1
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m ^= m1
                 signed<? z & z

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if !signed<
#  (int64) grs >>= 1

# Rep #10
  z = stack_0
  h = grs + fuv
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew = m + m1
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m ^= m1
                 signed<? z & z

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if !signed<
#  (int64) grs >>= 1

# Rep #11
  z = stack_0
  h = grs + fuv
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew = m + m1
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m ^= m1
                 signed<? z & z

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if !signed<
#  (int64) grs >>= 1

# Rep #12
  z = stack_0
  h = grs + fuv
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew = m + m1
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m ^= m1
                 signed<? z & z

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if !signed<
#  (int64) grs >>= 1

# Rep #13
  z = stack_0
  h = grs + fuv
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew = m + m1
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m ^= m1
                 signed<? z & z

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if !signed<
#  (int64) grs >>= 1

# Rep #14
  z = stack_0
  h = grs + fuv
  oldg = grs
              =? grs & 1

  h = grs if  =
  z = m   if !=
  mnew = m + m1
  grs -= fuv

  (int64) h >>= 1
  (int64) grs >>= 1
  m ^= m1
                 signed<? z & z

  fuv = oldg if  signed<
  grs = h    if !signed<
  m = mnew   if !signed<
#  (int64) grs >>= 1


=? i -= 1
goto loop1000 if !=


caller_r11 = stack_r11
caller_r12 = stack_r12
caller_r13 = stack_r13
caller_r14 = stack_r14
caller_r15 = stack_r15
caller_rbx = stack_rbx
caller_rbp = stack_rbp
return
