

# This file was *autogenerated* from the file Jump62.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_255 = Integer(255); _sage_const_19 = Integer(19); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_62 = Integer(62); _sage_const_12 = Integer(12); _sage_const_64 = Integer(64); _sage_const_744 = Integer(744)
p = _sage_const_2 **_sage_const_255  - _sage_const_19 ; 
assert(p.is_prime())
x = randint(_sage_const_1 ,p);

def generate_scaled_T_n(delta,g):
    g_and_1 = g & _sage_const_1 
    if delta > _sage_const_0  and (g_and_1):
        return _sage_const_1 -delta, matrix([[_sage_const_0 ,_sage_const_2 ],[-_sage_const_1 ,_sage_const_1 ]])
    else:
        return _sage_const_1 +delta, matrix([[_sage_const_2 ,_sage_const_0 ],[ g_and_1 ,_sage_const_1 ]])
    
def Update(T,f,g):
    result = T * matrix([f,g]).T
    f, g = result[_sage_const_0 ,_sage_const_0 ], result[_sage_const_1 ,_sage_const_0 ]
    f = f >> _sage_const_1 
    g = g >> _sage_const_1 
    return f, g


def jump62(delta,f0,g0):
    jump_length = _sage_const_62 
    f0_copy = f0
    g0_copy = g0


    T_list = []
    for _ in range(jump_length):
        delta, T = generate_scaled_T_n(delta,g0)
        T_list.append(T)
        f0,g0 = Update(T, f0, g0)
        

    f1, g1 = f0, g0    #used for assertion
    #print(f0,g0)
    
    T = matrix.identity(_sage_const_2 )
    for i in range(len(T_list)):
        T = T_list[i] * T

    # Assertion
    f0 = f0_copy
    g0 = g0_copy
    result = T * matrix([f0,g0]).T
    assert(f1 == result[_sage_const_0 ,_sage_const_0 ]>>(jump_length))
    assert(g1 == result[_sage_const_1 ,_sage_const_0 ]>>(jump_length))
    

    
    return delta, T
    
    
    


def cpt_inv(x):
    f = p; g = x; delta =_sage_const_1 
    jump_length = _sage_const_62 
    assert(p == _sage_const_2 **_sage_const_255  - _sage_const_19 )

    T_list_12 = []
    for i in range(_sage_const_12 ):
        f0 = f % (_sage_const_2 **_sage_const_64 )
        g0 = g % (_sage_const_2 **_sage_const_64 )
        delta, T = jump62(delta, f0, g0)

        result = T * matrix([f,g]).T
        f = result[_sage_const_0 ,_sage_const_0 ]>>(jump_length)
        g = result[_sage_const_1 ,_sage_const_0 ]>>(jump_length)

        
        #print(f,g)
        T_list_12.append(T)

    assert(len(T_list_12) == _sage_const_12 )

    
    master_T = matrix.identity(_sage_const_2 )
    for i in range(_sage_const_12 ):
        master_T = T_list_12[i] * master_T

    
    R = IntegerModRing(p);
    v = R(master_T[_sage_const_0 ,_sage_const_1 ])
    v = v * R(_sage_const_2 **(-_sage_const_744 ))
    #print(v)
    assert(v * x * sign(f) == _sage_const_1 )

    return v    


v = cpt_inv(x)
print(x)
print("and its inverse in 25519 is")
print(v)

